"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
async function main() {
    let stack = _1.Stack.create();
    let ReferenceType = await stack.create.model('reference', {
        string: 'use me',
        items: [0, 1, 2, 3, 4]
    });
    let GG = await stack.create.model('gg', {
        name: {
            type: ({ string }) => string,
            value: '',
            symbols: [
                { name: 'no-re', value: { some: 'thing', is: -1, not: { anything: true } } }
            ]
        },
        int: -42,
        uint: ({ uint }) => uint(42),
        bool: false,
        list: [''],
        ref: ({ ref }) => ref(ReferenceType.name),
        string: 'Oh man!'
    });
    let ggs = new Array();
    for (let i = 0; i < 99; ++i) {
        let created = await GG.create();
        await GG.save(created);
        ggs.push(created);
    }
    let paged = await GG.getAll();
    console.dir(paged);
    let Team = await stack.create.model('team', {
        name: '',
        manager: 'mother'
    });
    let defaultTeam = await Team.create({
        name: 'default',
        manager: 'jefe'
    });
    let User = await stack.create.model('user', {
        name: '',
        age: 0,
        money: -100,
        team: ({ ref }) => ref('team', defaultTeam.id)
    });
    let chris = await User.create({
        name: 'chris'
    });
    stack.update.object(User, chris, async (obj, state) => {
        if (state === _1.ExistState.DoesNotExist) {
            return;
        }
        obj.age = 34;
    });
    /*
       type StoreContext = {
          name: string      // The data store name (ie stacks:dynamo)
          version: string   // The data store version
          store: any
       }
 
       stack.setQuery(async (context: StoreContext) => {
          let query = new CustomQueryObject(context)
       })
    */
    console.dir(chris, { depth: null });
}
main()
    .then(() => {
    console.log(`Succeeded`);
    process.exit(0);
})
    .catch(err => {
    console.error(`Failed`);
    console.error(`Reason:\n${err}\nStack:\n${err.stack}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0JBQWtEO0FBRWxELEtBQUssVUFBVSxJQUFJO0lBQ2hCLElBQUksS0FBSyxHQUFHLFFBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQWMxQixJQUFJLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUN2RCxNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3hCLENBQUMsQ0FBQTtJQUVGLElBQUksRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3JDLElBQUksRUFBRTtZQUNILElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU07WUFDNUIsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUU7Z0JBQ04sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO2FBQzlFO1NBQ0g7UUFDRCxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ1IsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLEVBQUUsS0FBSztRQUNYLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNWLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxTQUFTO0tBQ25CLENBQUMsQ0FBQTtJQUVGLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxFQUFlLENBQUE7SUFFbEMsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN6QixJQUFJLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMvQixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtLQUNuQjtJQUVELElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBRTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFbEIsSUFBSSxJQUFJLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDekMsSUFBSSxFQUFFLEVBQUU7UUFDUixPQUFPLEVBQUUsUUFBUTtLQUNuQixDQUFDLENBQUE7SUFFRixJQUFJLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQVc7UUFDM0MsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsTUFBTTtLQUNqQixDQUFDLENBQUE7SUFFRixJQUFJLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUN6QyxJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsRUFBRSxDQUFDO1FBQ04sS0FBSyxFQUFFLENBQUMsR0FBRztRQUNYLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQztLQUNoRCxDQUFDLENBQUE7SUFFRixJQUFJLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQVc7UUFDckMsSUFBSSxFQUFFLE9BQU87S0FDZixDQUFDLENBQUE7SUFFRixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDbkQsSUFBRyxLQUFLLEtBQUssYUFBVSxDQUFDLFlBQVksRUFBRTtZQUNuQyxPQUFNO1NBQ1I7UUFFRCxHQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUNoQixDQUFDLENBQUMsQ0FBQTtJQUVGOzs7Ozs7Ozs7O01BVUU7SUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ3RDLENBQUM7QUFFRCxJQUFJLEVBQUU7S0FDRixJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLENBQUMsQ0FBQztLQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsYUFBYSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUN0RCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhpc3RTdGF0ZSwgU3RhY2ssIFN0YWNrT2JqZWN0IH0gZnJvbSAnLidcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgIGxldCBzdGFjayA9IFN0YWNrLmNyZWF0ZSgpXG5cbiAgIHR5cGUgVXNlclR5cGUgPSB7XG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIGFnZTogbnVtYmVyXG4gICAgICBtb25leTogbnVtYmVyXG4gICAgICB0ZWFtOiBUZWFtVHlwZVxuICAgfSAmIFN0YWNrT2JqZWN0XG5cbiAgIHR5cGUgVGVhbVR5cGUgPSB7XG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIG1hbmFnZXI6IHN0cmluZ1xuICAgfSAmIFN0YWNrT2JqZWN0XG5cbiAgIGxldCBSZWZlcmVuY2VUeXBlID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCdyZWZlcmVuY2UnLCB7XG4gICAgICBzdHJpbmc6ICd1c2UgbWUnLFxuICAgICAgaXRlbXM6IFswLCAxLCAyLCAzLCA0XVxuICAgfSlcblxuICAgbGV0IEdHID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCdnZycsIHtcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgIHR5cGU6ICh7IHN0cmluZyB9KSA9PiBzdHJpbmcsXG4gICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICBzeW1ib2xzOiBbXG4gICAgICAgICAgICB7IG5hbWU6ICduby1yZScsIHZhbHVlOiB7IHNvbWU6ICd0aGluZycsIGlzOiAtMSwgbm90OiB7IGFueXRoaW5nOiB0cnVlIH0gfSB9XG4gICAgICAgICBdXG4gICAgICB9LFxuICAgICAgaW50OiAtNDIsXG4gICAgICB1aW50OiAoeyB1aW50IH0pID0+IHVpbnQoNDIpLFxuICAgICAgYm9vbDogZmFsc2UsXG4gICAgICBsaXN0OiBbJyddLFxuICAgICAgcmVmOiAoeyByZWYgfSkgPT4gcmVmKFJlZmVyZW5jZVR5cGUubmFtZSksXG4gICAgICBzdHJpbmc6ICdPaCBtYW4hJ1xuICAgfSlcblxuICAgbGV0IGdncyA9IG5ldyBBcnJheTxTdGFja09iamVjdD4oKVxuXG4gICBmb3IobGV0IGkgPSAwOyBpIDwgOTk7ICsraSkge1xuICAgICAgbGV0IGNyZWF0ZWQgPSBhd2FpdCBHRy5jcmVhdGUoKVxuICAgICAgYXdhaXQgR0cuc2F2ZShjcmVhdGVkKVxuICAgICAgZ2dzLnB1c2goY3JlYXRlZClcbiAgIH1cblxuICAgbGV0IHBhZ2VkID0gYXdhaXQgR0cuZ2V0QWxsKClcblxuICAgY29uc29sZS5kaXIocGFnZWQpXG5cbiAgIGxldCBUZWFtID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCd0ZWFtJywge1xuICAgICAgbmFtZTogJycsXG4gICAgICBtYW5hZ2VyOiAnbW90aGVyJ1xuICAgfSlcblxuICAgbGV0IGRlZmF1bHRUZWFtID0gYXdhaXQgVGVhbS5jcmVhdGU8VGVhbVR5cGU+KHtcbiAgICAgIG5hbWU6ICdkZWZhdWx0JyxcbiAgICAgIG1hbmFnZXI6ICdqZWZlJ1xuICAgfSlcblxuICAgbGV0IFVzZXIgPSBhd2FpdCBzdGFjay5jcmVhdGUubW9kZWwoJ3VzZXInLCB7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIGFnZTogMCxcbiAgICAgIG1vbmV5OiAtMTAwLFxuICAgICAgdGVhbTogKHsgcmVmIH0pID0+IHJlZigndGVhbScsIGRlZmF1bHRUZWFtLmlkKVxuICAgfSlcblxuICAgbGV0IGNocmlzID0gYXdhaXQgVXNlci5jcmVhdGU8VXNlclR5cGU+KHtcbiAgICAgIG5hbWU6ICdjaHJpcydcbiAgIH0pXG5cbiAgIHN0YWNrLnVwZGF0ZS5vYmplY3QoVXNlciwgY2hyaXMsIGFzeW5jIChvYmosIHN0YXRlKSA9PiB7XG4gICAgICBpZihzdGF0ZSA9PT0gRXhpc3RTdGF0ZS5Eb2VzTm90RXhpc3QpIHtcbiAgICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBvYmohLmFnZSA9IDM0XG4gICB9KVxuXG4gICAvKlxuICAgICAgdHlwZSBTdG9yZUNvbnRleHQgPSB7XG4gICAgICAgICBuYW1lOiBzdHJpbmcgICAgICAvLyBUaGUgZGF0YSBzdG9yZSBuYW1lIChpZSBzdGFja3M6ZHluYW1vKVxuICAgICAgICAgdmVyc2lvbjogc3RyaW5nICAgLy8gVGhlIGRhdGEgc3RvcmUgdmVyc2lvblxuICAgICAgICAgc3RvcmU6IGFueVxuICAgICAgfVxuXG4gICAgICBzdGFjay5zZXRRdWVyeShhc3luYyAoY29udGV4dDogU3RvcmVDb250ZXh0KSA9PiB7XG4gICAgICAgICBsZXQgcXVlcnkgPSBuZXcgQ3VzdG9tUXVlcnlPYmplY3QoY29udGV4dClcbiAgICAgIH0pXG4gICAqL1xuXG4gICBjb25zb2xlLmRpcihjaHJpcywgeyBkZXB0aDogbnVsbCB9KVxufVxuXG5tYWluKClcbiAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBTdWNjZWVkZWRgKVxuICAgICAgcHJvY2Vzcy5leGl0KDApXG4gICB9KVxuICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWRgKVxuICAgICAgY29uc29sZS5lcnJvcihgUmVhc29uOlxcbiR7ZXJyfVxcblN0YWNrOlxcbiR7ZXJyLnN0YWNrfWApXG4gICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgIH0pIl19