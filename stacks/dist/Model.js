"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
const MemberCollection_1 = require("./collections/MemberCollection");
const Type_1 = require("./values/Type");
class Model {
    constructor(name, id, context) {
        this.name = name;
        this.id = id;
        this.context = context;
        this.members = new MemberCollection_1.MemberCollection(this, this.context);
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    get serializer() {
        return this.context.serializer;
    }
    async append(obj) {
        return this.members.append(obj);
    }
    async save(obj) {
        await this.orchestrator.saveObject(this, obj);
    }
    async create(params = {}) {
        return await this.orchestrator.createObject(this, params);
    }
    async delete(object) {
        await this.orchestrator.deleteObject(this, object);
    }
    async get(id) {
        return await this.orchestrator.getObject(this, id);
    }
    async getAll() {
        let cursor = '';
        let results = new Array();
        do {
            let paged = await this.orchestrator.getManyObjects(this, { cursor });
            results.push(...paged.items);
            cursor = paged.cursor;
        } while (cursor !== '');
        return results;
    }
    async getMany(req = {}) {
        return this.orchestrator.getManyObjects(this, req);
    }
    async toJs() {
        let result = {
            id: this.id
        };
        for (let member of this.members) {
            result[member.name] = await this.serializer.toJs(member.value);
        }
        //@ts-ignore
        return result;
    }
    async validate(obj) {
        let report = new Type_1.ValidationReport();
        for (let key of Object.keys(obj)) {
            let member = this.members.get(key);
            if (member === undefined) {
                report.addError(new Error(`Object contains a key that does not exist in the Model: ${key}`));
                continue;
            }
            let result = await member.type.validate(obj[key]);
            if (result.success === false && result.error) {
                report.addError(result.error);
            }
        }
        return report;
    }
}
exports.Model = Model;
//# sourceMappingURL=data:application/json;base64,