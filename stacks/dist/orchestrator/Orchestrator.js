"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Orchestrator = void 0;
const events_1 = require("../events");
const SaveObjectEvent_1 = require("../events/SaveObjectEvent");
const DeleteObjectEvent_1 = require("../events/DeleteObjectEvent");
const Event_1 = require("../events/Event");
const GetManyObjectsEvent_1 = require("../events/GetManyObjectsEvent");
const HasIdEvent_1 = require("../events/HasIdEvent");
const UpdateObjectEvent_1 = require("../events/UpdateObjectEvent");
const Model_1 = require("../Model");
const ProxyObject_1 = require("../ProxyObject");
const UidKeeper_1 = require("../UidKeeper");
const CreateObjectEvent_1 = require("../events/CreateObjectEvent");
const CreateModelEvent_1 = require("../events/CreateModelEvent");
const DeleteModelEvent_1 = require("../events/DeleteModelEvent");
const GetModelEvent_1 = require("../events/GetModelEvent");
const BootstrapEvent_1 = require("../events/BootstrapEvent");
class Orchestrator {
    constructor(context) {
        this.context = context;
    }
    get cache() {
        return this.context.cache;
    }
    get rfc() {
        return this.context.rfc;
    }
    get serializer() {
        return this.context.serializer;
    }
    get stack() {
        return this.context.stack;
    }
    get uid() {
        return this.context.uid;
    }
    async boostrap() {
        await this.rfc.create(new BootstrapEvent_1.BootstrapEvent())
            .fulfill(async (event) => {
            await this.stack.emit(Event_1.EventSet.Bootstrap, event);
        })
            .commit();
    }
    async createModel(name, params) {
        let model = await this.stack.get.model(name);
        if (model !== undefined) {
            throw new Error(`A Model with the name ${name} already exists`);
        }
        let id = await this.uid.generate();
        model = new Model_1.Model(name, id, this.context);
        await model.append(params);
        this.cache.saveModel(model);
        await this.rfc.create(new CreateModelEvent_1.CreateModelEvent(model))
            .fulfill(async (event) => {
            await this.stack.emit(Event_1.EventSet.ModelCreated, event);
        })
            .commit();
        return model;
    }
    async deleteModel(model) {
        await this.rfc.create(new DeleteModelEvent_1.DeleteModelEvent(model))
            .fulfill(async (event) => {
            this.cache.deleteModel(model.name);
        })
            .commit();
    }
    // Note: This may not be needed. Watch for this.
    // Model's are stored in local cache because they are
    // defined locally, and are the contract between the
    // the expected data set and what is stored.
    async getModel(name) {
        let model;
        await this.rfc.create(new GetModelEvent_1.GetModelEvent(name))
            .fulfill(async (event) => {
            let getModel = event;
            model = getModel.model;
            if (model !== undefined) {
                this.cache.saveModel(model);
            }
            await this.stack.emit(Event_1.EventSet.GetModel, event);
        })
            .commit();
        return model;
    }
    async updateModel(model, params) {
    }
    async createObject(model, params) {
        let created = await ProxyObject_1.ProxyObject.fromCreated(model, params, this.context);
        await this.rfc.create(new CreateObjectEvent_1.CreateObjectEvent(model, created))
            .fulfill(async (event) => {
            await this.stack.emit(Event_1.EventSet.ObjectCreated, event);
        })
            .commit();
        return created;
    }
    /**
     *
     * @param model The Model
     * @param obj The Object to save. Note that this is really a Proxy'd SerializableObject
     */
    async saveObject(model, obj) {
        if (obj.id === UidKeeper_1.UidKeeper.IdNotSet) {
            obj.id = await this.uid.generate();
        }
        let validations = await model.validate(obj);
        if (!validations.success) {
            throw new Error(`Cannot Save Object with ID ${obj.id} since it fails validation. Reason: ${validations.results.map(r => r.error)}`);
        }
        //@ts-ignore
        let serialized = ProxyObject_1.ProxyObject.unwrap(obj);
        await this.rfc.create(new SaveObjectEvent_1.SaveObjectEvent(model, obj, serialized))
            .fulfill(async (event) => {
            this.cache.saveObject(model, obj);
            await this.stack.emit(Event_1.EventSet.ObjectSaved, event);
        })
            .commit();
    }
    async getManyObjects(model, options = { cursor: '', limit: 100 }) {
        let results = {
            cursor: '',
            items: new Array()
        };
        await this.rfc.create(new GetManyObjectsEvent_1.GetManyObjectsEvent(model, options))
            .fulfill(async (event) => {
            let cast = event;
            await this.stack.emit(Event_1.EventSet.GetManyObjects, cast);
            if (cast.results !== undefined) {
                results = cast.results;
                return;
            }
            let objects = this.cache.getObjects(model);
            if (objects.length == 0) {
                return;
            }
            let cursor = options.cursor || '';
            let limit = options.limit || 100;
            // Sort by ID. The resulting paged set is not perfect, and will have
            // holes when new entries are added in between queries.
            objects.sort((a, b) => {
                let aId = a.id.toLowerCase();
                let bId = b.id.toLowerCase();
                return (aId < bId) ? -1 : (aId > bId) ? 1 : 0;
            });
            if (cursor === '') {
                // For an empty cursor we start from the beginning
                let items = objects.slice(0, Math.min(objects.length, limit));
                if (items.length == limit && objects.length > limit) {
                    results.cursor = Buffer.from(objects[limit].id).toString('base64');
                }
                else {
                    // If there are no more entries in thenext set, we default the cursor
                    // to empty string
                    results.cursor = '';
                }
                results.items = items;
                return;
            }
            else {
                // We have a cursor and continue from whence we left off
                cursor = Buffer.from(cursor, 'base64').toString('ascii');
                let index = objects.findIndex(o => o.id === cursor);
                if (index === -1) {
                    // We get here when the object that's next has been deleted
                    // return early
                    return;
                }
                let nextIndex = index + limit;
                results.items = objects.slice(index, nextIndex);
                if (objects.length > nextIndex) {
                    results.cursor = Buffer.from(objects[nextIndex].id).toString('base64');
                }
                else {
                    // If there are no more entries in the next set, we default the cursor
                    // to empty string
                    results.cursor = '';
                }
                return;
            }
            return;
        })
            .commit();
        return results;
    }
    async deleteObject(model, obj) {
        await this.rfc.create(new DeleteObjectEvent_1.DeleteObjectEvent(model, obj))
            .fulfill(async (event) => {
            this.cache.deleteObject(model, obj);
            await this.stack.emit(Event_1.EventSet.ObjectDeleted, event);
        })
            .commit();
    }
    async getObject(model, id) {
        let object;
        await this.rfc.create(new events_1.GetObjectEvent(model, id))
            .fulfill(async (event) => {
            let cast = event;
            if (cast.object === undefined) {
                object = cast.exists === Event_1.ExistState.DoesNotExist ?
                    undefined :
                    this.cache.getObject(model, id);
            }
            else {
                // We get a serialized version of the Object
                let serialized = await ProxyObject_1.ProxyObject.fromStored(model, cast.object, this.context.serializer);
                this.cache.saveObject(model, serialized);
                //@ts-ignore
                object = serialized;
            }
            await this.stack.emit(Event_1.EventSet.GetObject, event);
        })
            .commit();
        return object;
    }
    async hasId(id) {
        let hasId = false;
        await this.rfc.create(new HasIdEvent_1.HasIdEvent(id))
            .fulfill(async (event) => {
            let cast = event;
            await this.stack.emit(Event_1.EventSet.HasId, event);
            if (cast.hasId) {
                hasId = true;
                return;
            }
            // Has it a plugin attempted to set it?
            if (cast.attemptedSet) {
                // If so, we can trust that an external system doesn't have it
                hasId = false;
                return;
            }
            // If no external system attempted to set it, do we have it cached?
            hasId = this.cache.hasId(id);
        })
            .commit();
        return hasId;
    }
    async updateObject(model, obj, onUpdate) {
        await this.rfc.create(new UpdateObjectEvent_1.UpdateObjectEvent(model, obj))
            .fulfill(async (event) => {
            let cast = event;
            let updated = cast.updated;
            await onUpdate(updated, cast.exists);
            await this.stack.emit(Event_1.EventSet.ObjectUpdated, event);
        })
            .commit();
    }
}
exports.Orchestrator = Orchestrator;
//# sourceMappingURL=data:application/json;base64,