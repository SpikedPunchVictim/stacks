"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const Cache_1 = require("../Cache");
const EventRouter_1 = require("../events/EventRouter");
const RequestForChange_1 = require("../events/RequestForChange");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const UidKeeper_1 = require("../UidKeeper");
const Eventing_1 = require("../utils/Eventing");
const Bool_1 = require("../values/Bool");
const Int_1 = require("../values/Int");
const List_1 = require("../values/List");
const ObjectRef_1 = require("../values/ObjectRef");
const String_1 = require("../values/String");
const Type_1 = require("../values/Type");
const UInt_1 = require("../values/UInt");
const StackContext_1 = require("./StackContext");
const StackCreate_1 = require("./StackCreate");
const StackDelete_1 = require("./StackDelete");
const StackGet_1 = require("./StackGet");
const StackUpdate_1 = require("./StackUpdate");
class Stack extends Eventing_1.CombinedEventEmitter {
    constructor(options) {
        super();
        this.uid = (options === null || options === void 0 ? void 0 : options.uidKeeper) || new UidKeeper_1.UidKeeper();
        this.cache = new Cache_1.Cache();
        this.router = new EventRouter_1.EventRouter();
        this.rfc = new RequestForChange_1.RequestForChangeSource(this.router);
        let serializer = new ValueSerializer_1.CompositeSerializer();
        this.serializer = serializer;
        this.context = new StackContext_1.StackContext(this, this.rfc, this.cache, this.uid, serializer);
        serializer.register(Type_1.TypeSet.Bool, new Bool_1.BoolSerializer());
        serializer.register(Type_1.TypeSet.Int, new Int_1.IntSerializer());
        serializer.register(Type_1.TypeSet.List, new List_1.ListSerializer(serializer));
        serializer.register(Type_1.TypeSet.ObjectRef, new ObjectRef_1.ObjectRefSerializer(this.context));
        serializer.register(Type_1.TypeSet.String, new String_1.StringSerializer());
        serializer.register(Type_1.TypeSet.UInt, new UInt_1.UIntSerializer());
        this.delete = new StackDelete_1.StackDelete(this.cache, this.context.orchestrator);
        this.get = new StackGet_1.StackGet(this.context);
        this.create = new StackCreate_1.StackCreate(this.get, this.context);
        this.update = new StackUpdate_1.StackUpdate(this.context);
    }
    static create(options) {
        return new Stack(options);
    }
    async bootstrap() {
        return this.context.orchestrator.boostrap();
    }
    async use(plugin) {
        await plugin.setup(this, this.router);
    }
    async hasId(id) {
        return this.context.orchestrator.hasId(id);
    }
}
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RhY2svU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0NBQXdDO0FBQ3hDLHVEQUFpRTtBQUNqRSxpRUFBNEY7QUFDNUYsa0VBQW9GO0FBQ3BGLDRDQUFvRDtBQUNwRCxnREFBK0U7QUFDL0UseUNBQStDO0FBQy9DLHVDQUE2QztBQUM3Qyx5Q0FBK0M7QUFDL0MsbURBQXlEO0FBQ3pELDZDQUFtRDtBQUNuRCx5Q0FBd0M7QUFDeEMseUNBQStDO0FBRS9DLGlEQUE2QztBQUM3QywrQ0FBeUQ7QUFDekQsK0NBQXlEO0FBQ3pELHlDQUFnRDtBQUNoRCwrQ0FBeUQ7QUFvQ3pELE1BQWEsS0FDVixTQUFRLCtCQUFvQjtJQWU1QixZQUFZLE9BQXNCO1FBQy9CLEtBQUssRUFBRSxDQUFBO1FBRVAsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLEtBQUksSUFBSSxxQkFBUyxFQUFFLENBQUE7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFBO1FBRXhCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUE7UUFDL0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLHlDQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVsRCxJQUFJLFVBQVUsR0FBRyxJQUFJLHFDQUFtQixFQUFFLENBQUE7UUFDMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7UUFFNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLDJCQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBRWpGLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLHFCQUFjLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZELFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLG1CQUFhLEVBQUUsQ0FBQyxDQUFBO1FBQ3JELFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLHFCQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUNqRSxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSwrQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM3RSxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSx5QkFBZ0IsRUFBRSxDQUFDLENBQUE7UUFDM0QsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsSUFBSSxFQUFFLElBQUkscUJBQWMsRUFBRSxDQUFDLENBQUE7UUFFdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3BFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBc0I7UUFDakMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQzlDLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQWU7UUFDdEIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0NBQ0g7QUExREQsc0JBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGUsIElDYWNoZSB9IGZyb20gXCIuLi9DYWNoZVwiXG5pbXBvcnQgeyBFdmVudFJvdXRlciwgSUV2ZW50Um91dGVyIH0gZnJvbSBcIi4uL2V2ZW50cy9FdmVudFJvdXRlclwiXG5pbXBvcnQgeyBJUmVxdWVzdEZvckNoYW5nZVNvdXJjZSwgUmVxdWVzdEZvckNoYW5nZVNvdXJjZSB9IGZyb20gXCIuLi9ldmVudHMvUmVxdWVzdEZvckNoYW5nZVwiXG5pbXBvcnQgeyBDb21wb3NpdGVTZXJpYWxpemVyLCBJVmFsdWVTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZS9WYWx1ZVNlcmlhbGl6ZXJcIlxuaW1wb3J0IHsgSVVpZEtlZXBlciwgVWlkS2VlcGVyIH0gZnJvbSBcIi4uL1VpZEtlZXBlclwiXG5pbXBvcnQgeyBDb21iaW5lZEV2ZW50RW1pdHRlciwgSUNvbWJpbmVkRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWxzL0V2ZW50aW5nXCJcbmltcG9ydCB7IEJvb2xTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3ZhbHVlcy9Cb29sXCJcbmltcG9ydCB7IEludFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdmFsdWVzL0ludFwiXG5pbXBvcnQgeyBMaXN0U2VyaWFsaXplciB9IGZyb20gXCIuLi92YWx1ZXMvTGlzdFwiXG5pbXBvcnQgeyBPYmplY3RSZWZTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3ZhbHVlcy9PYmplY3RSZWZcIlxuaW1wb3J0IHsgU3RyaW5nU2VyaWFsaXplciB9IGZyb20gXCIuLi92YWx1ZXMvU3RyaW5nXCJcbmltcG9ydCB7IFR5cGVTZXQgfSBmcm9tIFwiLi4vdmFsdWVzL1R5cGVcIlxuaW1wb3J0IHsgVUludFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdmFsdWVzL1VJbnRcIlxuaW1wb3J0IHsgSVBsdWdpbiB9IGZyb20gXCIuL1BsdWdpblwiXG5pbXBvcnQgeyBTdGFja0NvbnRleHQgfSBmcm9tIFwiLi9TdGFja0NvbnRleHRcIlxuaW1wb3J0IHsgSVN0YWNrQ3JlYXRlLCBTdGFja0NyZWF0ZSB9IGZyb20gXCIuL1N0YWNrQ3JlYXRlXCJcbmltcG9ydCB7IElTdGFja0RlbGV0ZSwgU3RhY2tEZWxldGUgfSBmcm9tIFwiLi9TdGFja0RlbGV0ZVwiXG5pbXBvcnQgeyBJU3RhY2tHZXQsIFN0YWNrR2V0IH0gZnJvbSBcIi4vU3RhY2tHZXRcIlxuaW1wb3J0IHsgSVN0YWNrVXBkYXRlLCBTdGFja1VwZGF0ZSB9IGZyb20gXCIuL1N0YWNrVXBkYXRlXCJcblxuZXhwb3J0IHR5cGUgU3RhY2tPcHRpb25zID0ge1xuICAgdWlkS2VlcGVyPzogSVVpZEtlZXBlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGFjayBleHRlbmRzIElDb21iaW5lZEV2ZW50RW1pdHRlciB7XG4gICByZWFkb25seSBjcmVhdGU6IElTdGFja0NyZWF0ZVxuICAgcmVhZG9ubHkgZGVsZXRlOiBJU3RhY2tEZWxldGVcbiAgIHJlYWRvbmx5IGdldDogSVN0YWNrR2V0XG4gICByZWFkb25seSB1cGRhdGU6IElTdGFja1VwZGF0ZVxuICAgcmVhZG9ubHkgc2VyaWFsaXplcjogSVZhbHVlU2VyaWFsaXplclxuICAgcmVhZG9ubHkgcm91dGVyOiBJRXZlbnRSb3V0ZXJcblxuICAgLyoqXG4gICAgKiBDYWxsZWQgYWZ0ZXIgYWxsIE1vZGVscyBoYXZlIGJlZW4gZGVmaW5lZC4gQ2FsbGluZ1xuICAgICogdGhpcyBtZXRob2QgaXMgb3B0aW9uYWwsIGJ1dCBwcm92aWRlcyBhIGhvb2sgZm9yXG4gICAgKiBQbHVnaW5zIHRoYXQgcmVxdWlyZSBpbml0aWFsaXphdGlvbi5cbiAgICAqL1xuICAgYm9vdHN0cmFwKCk6IFByb21pc2U8dm9pZD5cblxuICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIGlmIGFuIGlkIGlzIGFscmVhZHkgaW4gdXNlLlxuICAgICogXG4gICAgKiBAcGFyYW0gaWQgVGhlIGlkXG4gICAgKi9cbiAgIGhhc0lkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+XG5cbiAgIC8qKlxuICAgICogQWRkcyBhIFBsdWdpbiB0byB0aGUgU3RhY2tcbiAgICAqIFxuICAgICogQHBhcmFtIHBsdWdpbiBUaGUgUGx1Z2luIHRvIHVzZVxuICAgICovXG4gICB1c2UocGx1Z2luOiBJUGx1Z2luKTogUHJvbWlzZTx2b2lkPlxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2tcbiAgIGV4dGVuZHMgQ29tYmluZWRFdmVudEVtaXR0ZXIgXG4gICBpbXBsZW1lbnRzIElTdGFja1xuICAge1xuICAgcmVhZG9ubHkgZ2V0OiBJU3RhY2tHZXRcbiAgIHJlYWRvbmx5IGNyZWF0ZTogSVN0YWNrQ3JlYXRlXG4gICByZWFkb25seSB1cGRhdGU6IElTdGFja1VwZGF0ZVxuICAgcmVhZG9ubHkgZGVsZXRlOiBJU3RhY2tEZWxldGVcbiAgIHJlYWRvbmx5IHVpZDogSVVpZEtlZXBlclxuICAgcmVhZG9ubHkgc2VyaWFsaXplcjogSVZhbHVlU2VyaWFsaXplclxuICAgcmVhZG9ubHkgcm91dGVyOiBJRXZlbnRSb3V0ZXJcblxuICAgcHJpdmF0ZSByZmM6IElSZXF1ZXN0Rm9yQ2hhbmdlU291cmNlXG4gICBwcml2YXRlIGNvbnRleHQ6IFN0YWNrQ29udGV4dFxuICAgcHJpdmF0ZSBjYWNoZTogSUNhY2hlXG5cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBTdGFja09wdGlvbnMpIHtcbiAgICAgIHN1cGVyKClcbiAgICAgIFxuICAgICAgdGhpcy51aWQgPSBvcHRpb25zPy51aWRLZWVwZXIgfHwgbmV3IFVpZEtlZXBlcigpXG4gICAgICB0aGlzLmNhY2hlID0gbmV3IENhY2hlKClcbiAgICAgIFxuICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgRXZlbnRSb3V0ZXIoKVxuICAgICAgdGhpcy5yZmMgPSBuZXcgUmVxdWVzdEZvckNoYW5nZVNvdXJjZSh0aGlzLnJvdXRlcilcblxuICAgICAgbGV0IHNlcmlhbGl6ZXIgPSBuZXcgQ29tcG9zaXRlU2VyaWFsaXplcigpXG4gICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyXG5cbiAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBTdGFja0NvbnRleHQodGhpcywgdGhpcy5yZmMsIHRoaXMuY2FjaGUsIHRoaXMudWlkLCBzZXJpYWxpemVyKVxuXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuQm9vbCwgbmV3IEJvb2xTZXJpYWxpemVyKCkpXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuSW50LCBuZXcgSW50U2VyaWFsaXplcigpKVxuICAgICAgc2VyaWFsaXplci5yZWdpc3RlcihUeXBlU2V0Lkxpc3QsIG5ldyBMaXN0U2VyaWFsaXplcihzZXJpYWxpemVyKSlcbiAgICAgIHNlcmlhbGl6ZXIucmVnaXN0ZXIoVHlwZVNldC5PYmplY3RSZWYsIG5ldyBPYmplY3RSZWZTZXJpYWxpemVyKHRoaXMuY29udGV4dCkpXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuU3RyaW5nLCBuZXcgU3RyaW5nU2VyaWFsaXplcigpKVxuICAgICAgc2VyaWFsaXplci5yZWdpc3RlcihUeXBlU2V0LlVJbnQsIG5ldyBVSW50U2VyaWFsaXplcigpKVxuXG4gICAgICB0aGlzLmRlbGV0ZSA9IG5ldyBTdGFja0RlbGV0ZSh0aGlzLmNhY2hlLCB0aGlzLmNvbnRleHQub3JjaGVzdHJhdG9yKVxuICAgICAgdGhpcy5nZXQgPSBuZXcgU3RhY2tHZXQodGhpcy5jb250ZXh0KVxuICAgICAgdGhpcy5jcmVhdGUgPSBuZXcgU3RhY2tDcmVhdGUodGhpcy5nZXQsIHRoaXMuY29udGV4dClcbiAgICAgIHRoaXMudXBkYXRlID0gbmV3IFN0YWNrVXBkYXRlKHRoaXMuY29udGV4dClcbiAgIH1cblxuICAgc3RhdGljIGNyZWF0ZShvcHRpb25zPzogU3RhY2tPcHRpb25zKTogSVN0YWNrIHtcbiAgICAgIHJldHVybiBuZXcgU3RhY2sob3B0aW9ucylcbiAgIH1cblxuICAgYXN5bmMgYm9vdHN0cmFwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5vcmNoZXN0cmF0b3IuYm9vc3RyYXAoKVxuICAgfVxuXG4gICBhc3luYyB1c2UocGx1Z2luOiBJUGx1Z2luKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBhd2FpdCBwbHVnaW4uc2V0dXAodGhpcywgdGhpcy5yb3V0ZXIpXG4gICB9XG5cbiAgIGFzeW5jIGhhc0lkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQub3JjaGVzdHJhdG9yLmhhc0lkKGlkKVxuICAgfVxufSJdfQ==