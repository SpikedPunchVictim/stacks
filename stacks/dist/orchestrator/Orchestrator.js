"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Orchestrator = void 0;
const Model_1 = require("../Model");
const ProxyObject_1 = require("../ProxyObject");
const UidKeeper_1 = require("../UidKeeper");
const events_1 = require("../events");
class Orchestrator {
    constructor(context) {
        this.context = context;
    }
    get cache() {
        return this.context.cache;
    }
    get rfc() {
        return this.context.rfc;
    }
    get serializer() {
        return this.context.serializer;
    }
    get stack() {
        return this.context.stack;
    }
    get uid() {
        return this.context.uid;
    }
    async boostrap() {
        await this.rfc.create(new events_1.BootstrapEvent())
            .fulfill(async (event) => {
            await this.stack.emit(events_1.EventSet.Bootstrap, event);
        })
            .commit();
    }
    async createModel(name, params) {
        let model = await this.stack.get.model(name);
        if (model !== undefined) {
            throw new Error(`A Model with the name ${name} already exists`);
        }
        model = await Model_1.Model.create(name, this.context);
        await model.append(params);
        this.cache.saveModel(model);
        await this.rfc.create(new events_1.ModelCreateEvent(model))
            .fulfill(async (event) => {
            await this.stack.emit(events_1.EventSet.ModelCreated, event);
        })
            .commit();
        return model;
    }
    async deleteModel(model) {
        await this.rfc.create(new events_1.ModelDeleteEvent(model))
            .fulfill(async (event) => {
            this.cache.deleteModel(model.name);
        })
            .commit();
    }
    // Note: This may not be needed. Watch for this.
    // Model's are stored in local cache because they are
    // defined locally, and are the contract between the
    // the expected data set and what is stored.
    async getModel(name) {
        let model;
        await this.rfc.create(new events_1.GetModelEvent(name))
            .fulfill(async (event) => {
            let getModel = event;
            model = getModel.model || this.cache.getModel(name);
            if (model !== undefined) {
                this.cache.saveModel(model);
            }
            await this.stack.emit(events_1.EventSet.GetModel, event);
        })
            .commit();
        return model;
    }
    async updateModel(model, params) {
        this.rfc.create(new events_1.ModelUpdateEvent(model))
            .fulfill(async (event) => {
            let updateModelEvent = event;
            this.cache.saveModel(updateModelEvent.model);
        })
            .commit();
    }
    async createObject(model, params) {
        let created = await ProxyObject_1.ProxyObject.fromCreated(model, params, this.context);
        await this.rfc.create(new events_1.ObjectCreateEvent(model, created))
            .fulfill(async (event) => {
            await this.stack.emit(events_1.EventSet.ObjectCreated, event);
        })
            .commit();
        return created;
    }
    /**
     *
     * @param model The Model
     * @param obj The Object to save. Note that this is really a Proxy'd SerializableObject
     */
    async saveObject(model, obj) {
        if (obj.id === UidKeeper_1.UidKeeper.IdNotSet) {
            obj.id = await this.uid.generate(model);
        }
        let validations = await model.validate(obj);
        if (!validations.success) {
            throw new Error(`Cannot Save Object with ID ${obj.id} since it fails validation. Reason: ${validations.results.map(r => r.error)}`);
        }
        //@ts-ignore
        let serialized = ProxyObject_1.ProxyObject.unwrap(obj);
        await this.rfc.create(new events_1.ObjectSaveEvent(model, obj, serialized))
            .fulfill(async (event) => {
            this.cache.saveObject(model, obj);
            await this.stack.emit(events_1.EventSet.ObjectSaved, event);
        })
            .commit();
    }
    async getManyObjects(model, options = { cursor: '', limit: 100 }) {
        let results = {
            cursor: '',
            items: new Array()
        };
        await this.rfc.create(new events_1.GetManyObjectsEvent(model, options))
            .fulfill(async (event) => {
            let cast = event;
            await this.stack.emit(events_1.EventSet.GetManyObjects, cast);
            if (cast.results !== undefined) {
                results = cast.results;
                return;
            }
            let objects = this.cache.getObjects(model);
            if (objects.length == 0) {
                return;
            }
            let cursor = options.cursor || '';
            let limit = options.limit || 100;
            // Sort by ID. The resulting paged set is not perfect, and will have
            // holes when new entries are added in between queries.
            objects.sort((a, b) => {
                let aId = a.id.toLowerCase();
                let bId = b.id.toLowerCase();
                return (aId < bId) ? -1 : (aId > bId) ? 1 : 0;
            });
            if (cursor === '') {
                // For an empty cursor we start from the beginning
                let items = objects.slice(0, Math.min(objects.length, limit));
                if (items.length == limit && objects.length > limit) {
                    results.cursor = Buffer.from(objects[limit].id).toString('base64');
                }
                else {
                    // If there are no more entries in thenext set, we default the cursor
                    // to empty string
                    results.cursor = '';
                }
                results.items = items;
                return;
            }
            else {
                // We have a cursor and continue from whence we left off
                cursor = Buffer.from(cursor, 'base64').toString('ascii');
                let index = objects.findIndex(o => o.id === cursor);
                if (index === -1) {
                    // We get here when the object that's next has been deleted
                    // return early
                    return;
                }
                let nextIndex = index + limit;
                results.items = objects.slice(index, nextIndex);
                if (objects.length > nextIndex) {
                    results.cursor = Buffer.from(objects[nextIndex].id).toString('base64');
                }
                else {
                    // If there are no more entries in the next set, we default the cursor
                    // to empty string
                    results.cursor = '';
                }
                return;
            }
            return;
        })
            .commit();
        return results;
    }
    async deleteObject(model, obj) {
        await this.rfc.create(new events_1.ObjectDeleteEvent(model, obj))
            .fulfill(async (event) => {
            this.cache.deleteObject(model, obj);
            await this.stack.emit(events_1.EventSet.ObjectDeleted, event);
        })
            .commit();
    }
    async getObject(model, id) {
        let object;
        await this.rfc.create(new events_1.GetObjectEvent(model, id))
            .fulfill(async (event) => {
            let cast = event;
            if (cast.object === undefined) {
                object = cast.exists === events_1.ExistState.DoesNotExist ?
                    undefined :
                    this.cache.getObject(model, id);
            }
            else {
                // We get a serialized version of the Object
                let serialized = await ProxyObject_1.ProxyObject.fromStored(model, cast.object, this.context.serializer);
                this.cache.saveObject(model, serialized);
                //@ts-ignore
                object = serialized;
            }
            await this.stack.emit(events_1.EventSet.GetObject, event);
        })
            .commit();
        return object;
    }
    async hasId(id, model) {
        let hasId = false;
        await this.rfc.create(new events_1.HasIdEvent(id, model))
            .fulfill(async (event) => {
            let cast = event;
            await this.stack.emit(events_1.EventSet.HasId, event);
            if (cast.hasId) {
                hasId = true;
                return;
            }
            // Has it a plugin attempted to set it?
            if (cast.attemptedSet) {
                // If so, we can trust that an external system doesn't have it
                hasId = false;
                return;
            }
            // If no external system attempted to set it, do we have it cached?
            hasId = this.cache.hasId(id);
        })
            .commit();
        return hasId;
    }
    async storeQueryObject(handler) {
        let result = undefined;
        await this.rfc.create(new events_1.GetStoreContextEvent())
            .fulfill(async (event) => {
            let getStoreContext = event;
            result = await handler(getStoreContext.contexts);
        })
            .commit();
        return result;
    }
    /**
     * Updates an already existing object with the latest from the stored version.
     * This method is intended to be used on long lived objects where we want them
     * to be updated locally, and not saved.
     *
     * @param model The Model
     * @param obj The Object
     * @param onUpdate Function to update the Object based on the latest version
     */
    async updateObject(model, obj, onUpdate) {
        await this.rfc.create(new events_1.ObjectUpdateEvent(model, obj, ProxyObject_1.ProxyObject.unwrap(obj)))
            .fulfill(async (event) => {
            let cast = event;
            let updated = cast.updated;
            await onUpdate(updated, cast.exists);
            await this.stack.emit(events_1.EventSet.ObjectUpdated, event);
        })
            .commit();
    }
}
exports.Orchestrator = Orchestrator;
//# sourceMappingURL=data:application/json;base64,