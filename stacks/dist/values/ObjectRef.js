"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectRefSerializer = exports.ObjectRefValue = exports.ObjectRefType = void 0;
const ProxyObject_1 = require("../ProxyObject");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const StackObject_1 = require("../StackObject");
const UidKeeper_1 = require("../UidKeeper");
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class ObjectRefType extends Type_1.Type {
    get orchestrator() {
        return this.context.orchestrator;
    }
    get info() {
        return {
            type: this.type,
            modelName: this.modelName
        };
    }
    constructor(modelName, context) {
        super(Type_1.TypeSet.ObjectRef);
        this.modelName = modelName;
        this.context = context;
    }
    equals(other) {
        if (other.type !== Type_1.TypeSet.ObjectRef) {
            return false;
        }
        let cast = other;
        if (cast.modelName.toLowerCase() !== this.modelName.toLowerCase()) {
            return false;
        }
        return true;
    }
    async validate(obj) {
        if (typeof obj !== 'object') {
            return { success: false, error: new Error(`Type does not match. Expected 'object' for a reference type but receieved '${typeof obj}'`) };
        }
        if (!(0, StackObject_1.isStackObject)(obj)) {
            return { success: false, error: new Error(`The Object is expected to be a StackObject.`) };
        }
        return { success: true };
    }
}
exports.ObjectRefType = ObjectRefType;
class ObjectRefValue extends Value_1.Value {
    constructor(modelName, id, context) {
        super(new ObjectRefType(modelName, context));
        this.id = id;
    }
    clone() {
        let refType = this.type;
        return new ObjectRefValue(refType.modelName, this.id, refType.context);
    }
}
exports.ObjectRefValue = ObjectRefValue;
class ObjectRefSerializer extends ValueSerializer_1.ValueSerializer {
    constructor(context) {
        super(Type_1.TypeSet.ObjectRef);
        this.context = context;
    }
    async toJs(value) {
        this.validate(value.type);
        let type = value.type;
        let objRef = value;
        let model = this.context.cache.getModel(type.modelName);
        if (model === undefined) {
            throw new Error(`Encountered an error when serializing an ObjectRef. The Model referenced (${type.modelName}) does not exist.`);
        }
        if (objRef.id === UidKeeper_1.UidKeeper.IdNotSet) {
            return await ProxyObject_1.ProxyObject.fromModel(model, this.context);
        }
        return await this.context.orchestrator.getObject(model, objRef.id);
    }
    async fromJs(type, obj) {
        this.validate(type);
        let castObj = obj;
        let castType = type;
        let model = this.context.cache.getModel(castType.modelName);
        if (model === undefined) {
            throw new Error(`Error encountered while trying to serialize an edited value (ObjectRef). The Model (${castType.modelName}) does not exist.`);
        }
        return new ObjectRefValue(castType.modelName, castObj.id, this.context);
    }
}
exports.ObjectRefSerializer = ObjectRefSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0UmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZhbHVlcy9PYmplY3RSZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsZ0RBQTZDO0FBQzdDLGtFQUErRDtBQUUvRCxnREFBNEQ7QUFDNUQsNENBQXlDO0FBQ3pDLGlDQUF3RTtBQUN4RSxtQ0FBd0M7QUFFeEMsTUFBYSxhQUFjLFNBQVEsV0FBSTtJQUNwQyxJQUFJLFlBQVk7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFBO0lBQ25DLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTCxPQUFPO1lBQ0osSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQzNCLENBQUE7SUFDSixDQUFDO0lBRUQsWUFBcUIsU0FBaUIsRUFBVyxPQUFzQjtRQUNwRSxLQUFLLENBQUMsY0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRE4sY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUFXLFlBQU8sR0FBUCxPQUFPLENBQWU7SUFFdkUsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFZO1FBQ2hCLElBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxjQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbkMsT0FBTyxLQUFLLENBQUE7UUFDZixDQUFDO1FBRUQsSUFBSSxJQUFJLEdBQUcsS0FBc0IsQ0FBQTtRQUVqQyxJQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1lBQ2hFLE9BQU8sS0FBSyxDQUFBO1FBQ2YsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUksR0FBTTtRQUNyQixJQUFHLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzFCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFDLENBQUE7UUFDMUksQ0FBQztRQUVELElBQUcsQ0FBQyxJQUFBLDJCQUFhLEVBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN0QixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsRUFBQyxDQUFBO1FBQzVGLENBQUM7UUFFRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQzNCLENBQUM7Q0FDSDtBQXpDRCxzQ0F5Q0M7QUFFRCxNQUFhLGNBQWUsU0FBUSxhQUFLO0lBR3RDLFlBQVksU0FBaUIsRUFBRSxFQUFVLEVBQUUsT0FBc0I7UUFDOUQsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQzVDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2YsQ0FBQztJQUVELEtBQUs7UUFDRixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBcUIsQ0FBQTtRQUN4QyxPQUFPLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDekUsQ0FBQztDQUNIO0FBWkQsd0NBWUM7QUFFRCxNQUFhLG1CQUFvQixTQUFRLGlDQUFlO0lBQ3JELFlBQXFCLE9BQXNCO1FBQ3hDLEtBQUssQ0FBQyxjQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFETixZQUFPLEdBQVAsT0FBTyxDQUFlO0lBRTNDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFekIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQXFCLENBQUE7UUFDdEMsSUFBSSxNQUFNLEdBQUcsS0FBdUIsQ0FBQTtRQUVwQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXZELElBQUcsS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkVBQTZFLElBQUksQ0FBQyxTQUFTLG1CQUFtQixDQUFDLENBQUE7UUFDbEksQ0FBQztRQUVELElBQUcsTUFBTSxDQUFDLEVBQUUsS0FBSyxxQkFBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25DLE9BQU8sTUFBTSx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzFELENBQUM7UUFFRCxPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDckUsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBVyxFQUFFLEdBQVE7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVuQixJQUFJLE9BQU8sR0FBRyxHQUFrQixDQUFBO1FBQ2hDLElBQUksUUFBUSxHQUFHLElBQXFCLENBQUE7UUFDcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUUzRCxJQUFHLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHVGQUF1RixRQUFRLENBQUMsU0FBUyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ2hKLENBQUM7UUFFRCxPQUFPLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDMUUsQ0FBQztDQUNIO0FBckNELGtEQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElPcmNoZXN0cmF0b3IgfSBmcm9tIFwiLi4vb3JjaGVzdHJhdG9yL09yY2hlc3RyYXRvclwiO1xuaW1wb3J0IHsgUHJveHlPYmplY3QgfSBmcm9tIFwiLi4vUHJveHlPYmplY3RcIjtcbmltcG9ydCB7IFZhbHVlU2VyaWFsaXplciB9IGZyb20gXCIuLi9zZXJpYWxpemUvVmFsdWVTZXJpYWxpemVyXCI7XG5pbXBvcnQgeyBJU3RhY2tDb250ZXh0IH0gZnJvbSBcIi4uL3N0YWNrL1N0YWNrQ29udGV4dFwiO1xuaW1wb3J0IHsgaXNTdGFja09iamVjdCwgU3RhY2tPYmplY3QgfSBmcm9tIFwiLi4vU3RhY2tPYmplY3RcIjtcbmltcG9ydCB7IFVpZEtlZXBlciB9IGZyb20gXCIuLi9VaWRLZWVwZXJcIjtcbmltcG9ydCB7IElUeXBlLCBUeXBlLCBUeXBlSW5mbywgVHlwZVNldCwgVmFsaWRhdGVSZXN1bHQgfSBmcm9tIFwiLi9UeXBlXCI7XG5pbXBvcnQgeyBJVmFsdWUsIFZhbHVlIH0gZnJvbSBcIi4vVmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIE9iamVjdFJlZlR5cGUgZXh0ZW5kcyBUeXBlIHtcbiAgIGdldCBvcmNoZXN0cmF0b3IoKTogSU9yY2hlc3RyYXRvciB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm9yY2hlc3RyYXRvclxuICAgfVxuXG4gICBnZXQgaW5mbygpOiBUeXBlSW5mbyB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgbW9kZWxOYW1lOiB0aGlzLm1vZGVsTmFtZVxuICAgICAgfVxuICAgfVxuXG4gICBjb25zdHJ1Y3RvcihyZWFkb25seSBtb2RlbE5hbWU6IHN0cmluZywgcmVhZG9ubHkgY29udGV4dDogSVN0YWNrQ29udGV4dCkge1xuICAgICAgc3VwZXIoVHlwZVNldC5PYmplY3RSZWYpXG4gICB9XG5cbiAgIGVxdWFscyhvdGhlcjogSVR5cGUpOiBib29sZWFuIHtcbiAgICAgIGlmKG90aGVyLnR5cGUgIT09IFR5cGVTZXQuT2JqZWN0UmVmKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgbGV0IGNhc3QgPSBvdGhlciBhcyBPYmplY3RSZWZUeXBlXG5cbiAgICAgIGlmKGNhc3QubW9kZWxOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHRoaXMubW9kZWxOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgfVxuXG4gICBhc3luYyB2YWxpZGF0ZTxUPihvYmo6IFQpOiBQcm9taXNlPFZhbGlkYXRlUmVzdWx0PiB7XG4gICAgICBpZih0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBuZXcgRXJyb3IoYFR5cGUgZG9lcyBub3QgbWF0Y2guIEV4cGVjdGVkICdvYmplY3QnIGZvciBhIHJlZmVyZW5jZSB0eXBlIGJ1dCByZWNlaWV2ZWQgJyR7dHlwZW9mIG9ian0nYCl9XG4gICAgICB9XG5cbiAgICAgIGlmKCFpc1N0YWNrT2JqZWN0KG9iaikpIHtcbiAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogbmV3IEVycm9yKGBUaGUgT2JqZWN0IGlzIGV4cGVjdGVkIHRvIGJlIGEgU3RhY2tPYmplY3QuYCl9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxuICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2JqZWN0UmVmVmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG4gICBpZDogc3RyaW5nXG5cbiAgIGNvbnN0cnVjdG9yKG1vZGVsTmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCBjb250ZXh0OiBJU3RhY2tDb250ZXh0KSB7XG4gICAgICBzdXBlcihuZXcgT2JqZWN0UmVmVHlwZShtb2RlbE5hbWUsIGNvbnRleHQpKVxuICAgICAgdGhpcy5pZCA9IGlkXG4gICB9XG5cbiAgIGNsb25lKCk6IElWYWx1ZSB7XG4gICAgICBsZXQgcmVmVHlwZSA9IHRoaXMudHlwZSBhcyBPYmplY3RSZWZUeXBlXG4gICAgICByZXR1cm4gbmV3IE9iamVjdFJlZlZhbHVlKHJlZlR5cGUubW9kZWxOYW1lLCB0aGlzLmlkLCByZWZUeXBlLmNvbnRleHQpXG4gICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPYmplY3RSZWZTZXJpYWxpemVyIGV4dGVuZHMgVmFsdWVTZXJpYWxpemVyIHtcbiAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGNvbnRleHQ6IElTdGFja0NvbnRleHQpIHtcbiAgICAgIHN1cGVyKFR5cGVTZXQuT2JqZWN0UmVmKVxuICAgfVxuXG4gICBhc3luYyB0b0pzKHZhbHVlOiBJVmFsdWUpOiBQcm9taXNlPGFueT4ge1xuICAgICAgdGhpcy52YWxpZGF0ZSh2YWx1ZS50eXBlKVxuXG4gICAgICBsZXQgdHlwZSA9IHZhbHVlLnR5cGUgYXMgT2JqZWN0UmVmVHlwZVxuICAgICAgbGV0IG9ialJlZiA9IHZhbHVlIGFzIE9iamVjdFJlZlZhbHVlXG4gICAgICBcbiAgICAgIGxldCBtb2RlbCA9IHRoaXMuY29udGV4dC5jYWNoZS5nZXRNb2RlbCh0eXBlLm1vZGVsTmFtZSlcblxuICAgICAgaWYobW9kZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbmNvdW50ZXJlZCBhbiBlcnJvciB3aGVuIHNlcmlhbGl6aW5nIGFuIE9iamVjdFJlZi4gVGhlIE1vZGVsIHJlZmVyZW5jZWQgKCR7dHlwZS5tb2RlbE5hbWV9KSBkb2VzIG5vdCBleGlzdC5gKVxuICAgICAgfVxuXG4gICAgICBpZihvYmpSZWYuaWQgPT09IFVpZEtlZXBlci5JZE5vdFNldCkge1xuICAgICAgICAgcmV0dXJuIGF3YWl0IFByb3h5T2JqZWN0LmZyb21Nb2RlbChtb2RlbCwgdGhpcy5jb250ZXh0KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250ZXh0Lm9yY2hlc3RyYXRvci5nZXRPYmplY3QobW9kZWwsIG9ialJlZi5pZClcbiAgIH1cblxuICAgYXN5bmMgZnJvbUpzKHR5cGU6IElUeXBlLCBvYmo6IGFueSk6IFByb21pc2U8SVZhbHVlPiB7XG4gICAgICB0aGlzLnZhbGlkYXRlKHR5cGUpXG5cbiAgICAgIGxldCBjYXN0T2JqID0gb2JqIGFzIFN0YWNrT2JqZWN0XG4gICAgICBsZXQgY2FzdFR5cGUgPSB0eXBlIGFzIE9iamVjdFJlZlR5cGVcbiAgICAgIGxldCBtb2RlbCA9IHRoaXMuY29udGV4dC5jYWNoZS5nZXRNb2RlbChjYXN0VHlwZS5tb2RlbE5hbWUpXG5cbiAgICAgIGlmKG1vZGVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgdHJ5aW5nIHRvIHNlcmlhbGl6ZSBhbiBlZGl0ZWQgdmFsdWUgKE9iamVjdFJlZikuIFRoZSBNb2RlbCAoJHtjYXN0VHlwZS5tb2RlbE5hbWV9KSBkb2VzIG5vdCBleGlzdC5gKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IE9iamVjdFJlZlZhbHVlKGNhc3RUeXBlLm1vZGVsTmFtZSwgY2FzdE9iai5pZCwgdGhpcy5jb250ZXh0KVxuICAgfVxufVxuIl19