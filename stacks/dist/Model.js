"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = exports.NoOpModel = void 0;
const MemberCollection_1 = require("./collections/MemberCollection");
const Type_1 = require("./values/Type");
const UidKeeper_1 = require("./UidKeeper");
class NoOpModel {
    constructor() {
        this.id = 'empty-object-not-a-valid-model';
        this.name = 'empty-object-not-a-valid-model';
        this.symbols = new Array();
        this.members = new MemberCollection_1.NoOpMemberCollection();
    }
    append(obj) {
        throw new Error(`Not Implemented`);
    }
    save(object) {
        throw new Error(`Not Implemented`);
    }
    create(obj) {
        {
            throw new Error(`Not Implemented`);
        }
    }
    delete(object) {
        throw new Error(`Not Implemented`);
    }
    get(id) {
        throw new Error(`Not Implemented`);
    }
    getAll() {
        throw new Error(`Not Implemented`);
    }
    getMany(req) {
        throw new Error(`Not Implemented`);
    }
    toJs() {
        throw new Error(`Not Implemented`);
    }
    validate(obj) {
        throw new Error(`Not Implemented`);
    }
}
exports.NoOpModel = NoOpModel;
class Model {
    constructor(name, context) {
        this._id = UidKeeper_1.UidKeeper.IdNotSet;
        this.name = name;
        this.context = context;
        this.members = new MemberCollection_1.MemberCollection(this, this.context);
        this.symbols = new Array();
    }
    get id() {
        return this._id;
    }
    static get NoOp() {
        return this._noop;
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    get serializer() {
        return this.context.serializer;
    }
    static async create(name, context) {
        let model = new Model(name, context);
        model.setId(await context.uid.generate(model));
        return model;
    }
    static isModel(obj) {
        for (let key of Object.keys(Model.NoOp)) {
            if (obj[key] == null ||
                (typeof obj[key] !== typeof Model.NoOp[key])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Determines if an Object is a Model. If it is, then it will return a
     * cast value of the Model, otherwise undefined.
     *
     * @param obj The Object to cast
     * @returns
     */
    static asModel(obj) {
        if (Model.isModel(obj)) {
            return obj;
        }
        return undefined;
    }
    async append(obj) {
        return this.members.append(obj);
    }
    async save(obj) {
        await this.orchestrator.saveObject(this, obj);
    }
    async create(params = {}) {
        return await this.orchestrator.createObject(this, params);
    }
    async delete(object) {
        await this.orchestrator.deleteObject(this, object);
    }
    async get(id) {
        return await this.orchestrator.getObject(this, id);
    }
    async getAll() {
        let cursor = '';
        let results = new Array();
        do {
            let paged = await this.orchestrator.getManyObjects(this, { cursor });
            results.push(...paged.items);
            cursor = paged.cursor;
        } while (cursor !== '');
        return results;
    }
    async getMany(req = {}) {
        return this.orchestrator.getManyObjects(this, req);
    }
    async toJs() {
        let result = {
            id: this.id
        };
        for (let member of this.members) {
            result[member.name] = await this.serializer.toJs(member.value);
        }
        //@ts-ignore
        return result;
    }
    async validate(obj) {
        let report = new Type_1.ValidationReport();
        for (let key of Object.keys(obj)) {
            let member = this.members.get(key);
            if (member === undefined) {
                report.addError(new Error(`Object contains a key that does not exist in the Model: ${key}`));
                continue;
            }
            let result = await member.type.validate(obj[key]);
            if (result.success === false && result.error) {
                report.addError(result.error);
            }
        }
        return report;
    }
    setId(id) {
        this._id = id;
    }
}
exports.Model = Model;
Model._noop = new NoOpModel();
//# sourceMappingURL=data:application/json;base64,