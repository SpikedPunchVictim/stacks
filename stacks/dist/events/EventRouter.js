"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventRouter = void 0;
class EventRouter {
    constructor() {
        this._handlerMap = new Map();
    }
    on(type, handler) {
        let found = this._handlerMap.get(type);
        if (found === undefined) {
            let array = new Array();
            array.push(handler);
            this._handlerMap.set(type, array);
        }
        else {
            found.push(handler);
        }
    }
    async raise(event) {
        await this.raiseAction(event);
    }
    async raiseAction(event) {
        try {
            let found = this._handlerMap.get(event.type);
            if (found === undefined) {
                return;
            }
            let promises = new Array();
            for (let handler of found) {
                promises.push(this.monitor(handler(event)));
            }
            let statuses = await Promise.all(promises);
            // Rollback in the case of a failure
            if (!statuses.every(status => status.success)) {
                event.rollback();
                for (let handler of found) {
                    promises.push(this.monitor(handler(event)));
                    // TODO: Log/Promote failures when rollingback
                    await Promise.all(promises);
                }
            }
        }
        catch (err) {
            console.log(`REMOVE THESE LOGS AFTER DEVELOPMENT`);
            console.error(err);
            throw err;
        }
    }
    async monitor(promise) {
        try {
            await promise;
            return {
                success: true
            };
        }
        catch (err) {
            return {
                success: false,
                error: err
            };
        }
    }
}
exports.EventRouter = EventRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRSb3V0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRzL0V2ZW50Um91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWNBLE1BQWEsV0FBVztJQU1yQjtRQUNHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQW9DLENBQUE7SUFDakUsQ0FBQztJQUVELEVBQUUsQ0FBbUIsSUFBYyxFQUFFLE9BQXdCO1FBQzFELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXRDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBbUIsQ0FBQTtZQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtTQUNuQzthQUFNO1lBQ0osS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUNyQjtJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWE7UUFDdEIsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWE7UUFDNUIsSUFBSTtZQUNELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUU1QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3RCLE9BQU07YUFDUjtZQUVELElBQUksUUFBUSxHQUFHLElBQUksS0FBSyxFQUEwQixDQUFBO1lBRWxELEtBQUssSUFBSSxPQUFPLElBQUksS0FBSyxFQUFFO2dCQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUM3QztZQUVELElBQUksUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUUxQyxvQ0FBb0M7WUFDcEMsSUFBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzFDLEtBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtnQkFFM0IsS0FBSyxJQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUU7b0JBQ3hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUUzQyw4Q0FBOEM7b0JBQzlDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtpQkFDN0I7YUFDSDtTQUVIO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUE7WUFDbEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNsQixNQUFNLEdBQUcsQ0FBQTtTQUNYO0lBQ0osQ0FBQztJQUVPLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBc0I7UUFDekMsSUFBSTtZQUNELE1BQU0sT0FBTyxDQUFBO1lBQ2IsT0FBTztnQkFDSixPQUFPLEVBQUUsSUFBSTthQUNmLENBQUE7U0FDSDtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1YsT0FBTztnQkFDSixPQUFPLEVBQUUsS0FBSztnQkFDZCxLQUFLLEVBQUUsR0FBWTthQUNyQixDQUFBO1NBQ0g7SUFDSixDQUFDO0NBQ0g7QUExRUQsa0NBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50U2V0LCBJRXZlbnQgfSBmcm9tIFwiLi9FdmVudFwiXG5cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlcjxUIGV4dGVuZHMgSUV2ZW50PiA9IChhY3Rpb246IFQpID0+IFByb21pc2U8dm9pZD5cblxudHlwZSBNb25pdG9yU3RhdHVzID0ge1xuICAgc3VjY2VzczogYm9vbGVhblxuICAgZXJyb3I/OiBFcnJvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudFJvdXRlciB7XG4gICBvbjxUIGV4dGVuZHMgSUV2ZW50Pih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50SGFuZGxlcjxUPik6IHZvaWRcbiAgIHJhaXNlKGFjdGlvbjogSUV2ZW50KTogUHJvbWlzZTx2b2lkPlxufVxuXG5leHBvcnQgY2xhc3MgRXZlbnRSb3V0ZXIgaW1wbGVtZW50cyBJRXZlbnRSb3V0ZXIge1xuXG4gICAvLyBLZXk6IEV2ZW50IG5hbWVcbiAgIC8vIFZhbHVlOiBUaGUgQWN0aW9uSGFuZGxlcjxUPlxuICAgcHJpdmF0ZSBfaGFuZGxlck1hcDogTWFwPHN0cmluZywgQXJyYXk8RXZlbnRIYW5kbGVyPGFueT4+PlxuXG4gICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2hhbmRsZXJNYXAgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8RXZlbnRIYW5kbGVyPGFueT4+PigpXG4gICB9XG5cbiAgIG9uPFQgZXh0ZW5kcyBJRXZlbnQ+KHR5cGU6IEV2ZW50U2V0LCBoYW5kbGVyOiBFdmVudEhhbmRsZXI8VD4pOiB2b2lkIHtcbiAgICAgIGxldCBmb3VuZCA9IHRoaXMuX2hhbmRsZXJNYXAuZ2V0KHR5cGUpXG5cbiAgICAgIGlmIChmb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICBsZXQgYXJyYXkgPSBuZXcgQXJyYXk8RXZlbnRIYW5kbGVyPFQ+PigpXG4gICAgICAgICBhcnJheS5wdXNoKGhhbmRsZXIpXG4gICAgICAgICB0aGlzLl9oYW5kbGVyTWFwLnNldCh0eXBlLCBhcnJheSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICBmb3VuZC5wdXNoKGhhbmRsZXIpXG4gICAgICB9XG4gICB9XG5cbiAgIGFzeW5jIHJhaXNlKGV2ZW50OiBJRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGF3YWl0IHRoaXMucmFpc2VBY3Rpb24oZXZlbnQpXG4gICB9XG5cbiAgIGFzeW5jIHJhaXNlQWN0aW9uKGV2ZW50OiBJRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICBsZXQgZm91bmQgPSB0aGlzLl9oYW5kbGVyTWFwLmdldChldmVudC50eXBlKVxuXG4gICAgICAgICBpZiAoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICB9XG5cbiAgICAgICAgIGxldCBwcm9taXNlcyA9IG5ldyBBcnJheTxQcm9taXNlPE1vbml0b3JTdGF0dXM+PigpXG5cbiAgICAgICAgIGZvciAobGV0IGhhbmRsZXIgb2YgZm91bmQpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5tb25pdG9yKGhhbmRsZXIoZXZlbnQpKSlcbiAgICAgICAgIH1cblxuICAgICAgICAgbGV0IHN0YXR1c2VzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG5cbiAgICAgICAgIC8vIFJvbGxiYWNrIGluIHRoZSBjYXNlIG9mIGEgZmFpbHVyZVxuICAgICAgICAgaWYoIXN0YXR1c2VzLmV2ZXJ5KHN0YXR1cyA9PiBzdGF0dXMuc3VjY2VzcykpIHtcbiAgICAgICAgICAgIChldmVudCBhcyBFdmVudCkucm9sbGJhY2soKVxuXG4gICAgICAgICAgICBmb3IgKGxldCBoYW5kbGVyIG9mIGZvdW5kKSB7XG4gICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMubW9uaXRvcihoYW5kbGVyKGV2ZW50KSkpXG5cbiAgICAgICAgICAgICAgIC8vIFRPRE86IExvZy9Qcm9tb3RlIGZhaWx1cmVzIHdoZW4gcm9sbGluZ2JhY2tcbiAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgIGNvbnNvbGUubG9nKGBSRU1PVkUgVEhFU0UgTE9HUyBBRlRFUiBERVZFTE9QTUVOVGApXG4gICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgICAgIHRocm93IGVyclxuICAgICAgfVxuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIG1vbml0b3IocHJvbWlzZTogUHJvbWlzZTx2b2lkPik6IFByb21pc2U8TW9uaXRvclN0YXR1cz4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGF3YWl0IHByb21pc2VcbiAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICB9XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGVyciBhcyBFcnJvclxuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxufSJdfQ==