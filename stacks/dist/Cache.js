"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
const UidKeeper_1 = require("./UidKeeper");
class Cache {
    constructor() {
        /**
         * Key: Model name
         * Value: Model
         */
        this.models = new Map();
        /**
         * Key: Model Name
         * Value: Object
         */
        this.objects = new Map();
    }
    deleteModel(name) {
        this.models.delete(name);
    }
    getModel(name) {
        return this.models.get(name);
    }
    getModelById(id) {
        for (let model of this.models.values()) {
            if (model.id === id) {
                return model;
            }
        }
        return undefined;
    }
    hasId(id) {
        let model = this.getModelById(id);
        if (model) {
            return true;
        }
        for (let [_, objects] of this.objects) {
            let found = objects.find(o => o.id === id);
            if (found) {
                return true;
            }
        }
        return false;
    }
    saveModel(model) {
        this.models.set(model.name, model);
    }
    saveObject(model, obj) {
        if (obj.id === UidKeeper_1.UidKeeper.IdNotSet) {
            /*
               Objects must have IDs in order for them to be cached.
               We would have no way to look them up from the cache.
               This means that an Object can be created, before it is
               saved, and the get() calls will not work on them to
               find the Object.
            */
            throw new Error(`Cannot cache an Object without an ID`);
        }
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            objects = new Array();
            this.objects.set(model.name, objects);
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === -1) {
            objects.push(obj);
            return;
        }
        objects.splice(found, 1);
        objects.push(obj);
    }
    deleteObject(model, obj) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return;
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === -1) {
            return;
        }
        objects.splice(found, 1);
    }
    getObject(model, id) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return undefined;
        }
        return objects.find(o => o.id === id);
    }
    getObjects(model) {
        let objects = this.objects.get(model.name);
        return objects || new Array();
    }
}
exports.Cache = Cache;
//# sourceMappingURL=data:application/json;base64,