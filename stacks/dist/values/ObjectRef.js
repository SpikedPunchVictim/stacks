"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectRefSerializer = exports.ObjectRefValue = exports.ObjectRefType = void 0;
const ProxyObject_1 = require("../ProxyObject");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const UidKeeper_1 = require("../UidKeeper");
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class ObjectRefType extends Type_1.Type {
    constructor(modelName, context) {
        super(Type_1.TypeSet.ObjectRef);
        this.modelName = modelName;
        this.context = context;
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    equals(other) {
        if (other.type !== Type_1.TypeSet.ObjectRef) {
            return false;
        }
        let cast = other;
        if (cast.modelName.toLowerCase() !== this.modelName.toLowerCase()) {
            return false;
        }
        return true;
    }
    async validate(obj) {
        if (typeof obj !== 'string') {
            return { success: false, error: new Error(`Type does not match. Expected 'string' for id and receieved '${typeof obj}'`) };
        }
        let id = obj;
        let model = this.context.cache.getModel(this.modelName);
        if (model === undefined) {
            return { success: false, error: new Error(`No Model exists with the name ${this.modelName}.`) };
        }
        let found = await this.orchestrator.getObject(model, id);
        if (found === undefined) {
            return { success: false, error: new Error(`The Object referenced (id: ${id}) doesn't exist`) };
        }
        return { success: true };
    }
}
exports.ObjectRefType = ObjectRefType;
class ObjectRefValue extends Value_1.Value {
    constructor(modelName, id, context) {
        super(new ObjectRefType(modelName, context));
        this.id = id;
    }
    clone() {
        let refType = this.type;
        return new ObjectRefValue(refType.modelName, this.id, refType.context);
    }
}
exports.ObjectRefValue = ObjectRefValue;
class ObjectRefSerializer extends ValueSerializer_1.ValueSerializer {
    constructor(context) {
        super(Type_1.TypeSet.ObjectRef);
        this.context = context;
    }
    async toJs(value) {
        this.validate(value.type);
        let type = value.type;
        let objRef = value;
        let model = this.context.cache.getModel(type.modelName);
        if (model === undefined) {
            throw new Error(`Encountered an error when serializing an ObjectRef. The Model referenced (${type.modelName}) does not exist.`);
        }
        if (objRef.id === UidKeeper_1.UidKeeper.IdNotSet) {
            return await ProxyObject_1.ProxyObject.fromModel(model, this.context);
        }
        return await this.context.orchestrator.getObject(model, objRef.id);
    }
    async fromJs(type, obj) {
        this.validate(type);
        let castObj = obj;
        let castType = type;
        let model = this.context.cache.getModel(castType.modelName);
        if (model === undefined) {
            throw new Error(`Error encountered while trying to serialize an edited value (ObjectRef). The Model (${castType.modelName}) does not exist.`);
        }
        return new ObjectRefValue(castType.modelName, castObj.id, this.context);
    }
}
exports.ObjectRefSerializer = ObjectRefSerializer;
//# sourceMappingURL=data:application/json;base64,