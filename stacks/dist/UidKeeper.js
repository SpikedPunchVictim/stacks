"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UidKeeper = void 0;
const secure_1 = require("uid/secure");
class UidKeeper {
    constructor() {
        this.ids = new Array();
        this._stack = undefined;
    }
    get stack() {
        return this._stack;
    }
    attach(stack) {
        this._stack = stack;
    }
    async generate() {
        let id = (0, secure_1.uid)(32);
        while (await this.has(id)) {
            id = (0, secure_1.uid)(32);
        }
        return id;
    }
    generateLocal() {
        return (0, secure_1.uid)(32);
    }
    async has(id) {
        if (this.ids.indexOf(id) >= 0) {
            return true;
        }
        return this.stack === undefined ? false : await this.stack.hasId(id);
    }
    async register(id) {
        if (this.ids.indexOf(id) >= 0) {
            return;
        }
        this.ids.push(id);
    }
    async unregister(id) {
        let index = this.ids.indexOf(id);
        if (index < 0) {
            return;
        }
        this.ids.splice(index, 1);
    }
}
exports.UidKeeper = UidKeeper;
UidKeeper.IdNotSet = '---ID-Not-Set---';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVWlkS2VlcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1VpZEtlZXBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBZ0M7QUErQ2hDLE1BQWEsU0FBUztJQVVuQjtRQUhRLFFBQUcsR0FBa0IsSUFBSSxLQUFLLEVBQVUsQ0FBQTtRQUN4QyxXQUFNLEdBQXVCLFNBQVMsQ0FBQTtJQUk5QyxDQUFDO0lBWEQsSUFBSSxLQUFLO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3JCLENBQUM7SUFXRCxNQUFNLENBQUMsS0FBYTtRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWCxJQUFJLEVBQUUsR0FBRyxJQUFBLFlBQUcsRUFBQyxFQUFFLENBQUMsQ0FBQTtRQUVoQixPQUFNLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN2QixFQUFFLEdBQUcsSUFBQSxZQUFHLEVBQUMsRUFBRSxDQUFDLENBQUE7U0FDZDtRQUVELE9BQU8sRUFBRSxDQUFBO0lBQ1osQ0FBQztJQUVELGFBQWE7UUFDVixPQUFPLElBQUEsWUFBRyxFQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVU7UUFDakIsSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUE7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN2RSxDQUFDO0lBR0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFVO1FBQ3RCLElBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE9BQU07U0FDUjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQVU7UUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFaEMsSUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsT0FBTTtTQUNSO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzVCLENBQUM7O0FBekRKLDhCQTBEQztBQXJEUyxrQkFBUSxHQUFHLGtCQUFrQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdWlkIH0gZnJvbSAndWlkL3NlY3VyZSdcbmltcG9ydCB7IElTdGFjayB9IGZyb20gJy4vc3RhY2svU3RhY2snXG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBJRHMgZm9yIHRoZSBvYmplY3RzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVpZEtlZXBlciB7XG4gICAvKipcbiAgICAqIEF0dGFoY2VzIHRoZSBTdGFjayB0byB0aGlzIFVpZEtlZXBlclxuICAgICogXG4gICAgKiBAcGFyYW0gc3RhY2sgVGhlIFN0YWNrXG4gICAgKi9cbiAgIGF0dGFjaChzdGFjazogSVN0YWNrKTogdm9pZFxuXG4gICAvKipcbiAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRFxuICAgICovXG4gICBnZW5lcmF0ZSgpOiBQcm9taXNlPHN0cmluZz5cblxuICAgLyoqXG4gICAgKiBHZW5lcmF0ZXMgYW4gSUQgdXNlZCBsb2NhbGx5LiBUaGVzZSBhcmUgdXNlZCBmb3IgTW9kZWwgTWVtYmVyc1xuICAgICogd2hlcmUgdGhleSBhcmUgbm90IGV4cGVjdGVkIHRvIGJlIGNvbnNpc3RlbnQgYmV0d2VlbiBydW5zLlxuICAgICovXG4gICBnZW5lcmF0ZUxvY2FsKCk6IHN0cmluZ1xuICAgXG4gICAvKipcbiAgICAqIERldGVybWluZXMgaWYgYW4gSUQgaGFzIGFscmVhZHkgYmVlbiByZXNlcnZlZC5cbiAgICAqIFxuICAgICogQHBhcmFtIGlkIFRoZSBJRCB0byBjaGVja1xuICAgICovXG4gICBoYXMoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj5cblxuICAgLyoqXG4gICAgKiBSZWdpc3RlcnMgYW4gSUQgd2l0aCB0aGUgVWlkS2VlcGVyLiBSZWdpc3RlcmVkIElEcyB3b24ndCBiZSB1c2VkIGFnYWluXG4gICAgKiBcbiAgICAqIEBwYXJhbSBpZCBUaGUgaWQgdG8gcmVnaXN0ZXJcbiAgICAqL1xuICAgcmVnaXN0ZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD5cblxuICAgLyoqXG4gICAgKiBVbnJlZ2lzdGVycyBhbiBJRCB3aXRoIHRoZSBVaWRLZWVwZXIuXG4gICAgKiBcbiAgICAqIEBwYXJhbSBpZCBUaGUgaWQgdG8gdW5yZWdpc3RlclxuICAgICovXG4gICB1bnJlZ2lzdGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+XG59XG5cbmV4cG9ydCBjbGFzcyBVaWRLZWVwZXIgaW1wbGVtZW50cyBJVWlkS2VlcGVyIHtcbiAgIGdldCBzdGFjaygpOiBJU3RhY2sgfCB1bmRlZmluZWQge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YWNrXG4gICB9XG5cbiAgIHN0YXRpYyBJZE5vdFNldCA9ICctLS1JRC1Ob3QtU2V0LS0tJ1xuICAgXG4gICBwcml2YXRlIGlkczogQXJyYXk8c3RyaW5nPiA9IG5ldyBBcnJheTxzdHJpbmc+KClcbiAgIHByaXZhdGUgX3N0YWNrOiBJU3RhY2sgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblxuICAgY29uc3RydWN0b3IoKSB7XG5cbiAgIH1cblxuICAgYXR0YWNoKHN0YWNrOiBJU3RhY2spOiB2b2lkIHtcbiAgICAgIHRoaXMuX3N0YWNrID0gc3RhY2tcbiAgIH1cblxuICAgYXN5bmMgZ2VuZXJhdGUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgIGxldCBpZCA9IHVpZCgzMilcblxuICAgICAgd2hpbGUoYXdhaXQgdGhpcy5oYXMoaWQpKSB7XG4gICAgICAgICBpZCA9IHVpZCgzMilcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlkXG4gICB9XG5cbiAgIGdlbmVyYXRlTG9jYWwoKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB1aWQoMzIpXG4gICB9XG5cbiAgIGFzeW5jIGhhcyhpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICBpZih0aGlzLmlkcy5pbmRleE9mKGlkKSA+PSAwKSB7XG4gICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zdGFjayA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhd2FpdCB0aGlzLnN0YWNrLmhhc0lkKGlkKVxuICAgfVxuXG5cbiAgIGFzeW5jIHJlZ2lzdGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGlmKHRoaXMuaWRzLmluZGV4T2YoaWQpID49IDApIHtcbiAgICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLmlkcy5wdXNoKGlkKVxuICAgfVxuXG4gICBhc3luYyB1bnJlZ2lzdGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMuaWRzLmluZGV4T2YoaWQpXG4gICAgICBcbiAgICAgIGlmKGluZGV4IDwgMCkge1xuICAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaWRzLnNwbGljZShpbmRleCwgMSlcbiAgIH1cbn0iXX0=