"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UidKeeper = void 0;
const secure_1 = require("uid/secure");
class UidKeeper {
    constructor() {
        this.ids = new Array();
        this._stack = undefined;
    }
    get stack() {
        return this._stack;
    }
    attach(stack) {
        this._stack = stack;
    }
    async generate() {
        let id = (0, secure_1.uid)(32);
        while (await this.has(id)) {
            id = (0, secure_1.uid)(32);
        }
        return id;
    }
    generateLocal() {
        return (0, secure_1.uid)(32);
    }
    async has(id) {
        if (this.ids.indexOf(id) >= 0) {
            return true;
        }
        return this.stack === undefined ? false : await this.stack.hasId(id);
    }
    async register(id) {
        if (this.ids.indexOf(id) >= 0) {
            return;
        }
        this.ids.push(id);
    }
    async unregister(id) {
        let index = this.ids.indexOf(id);
        if (index < 0) {
            return;
        }
        this.ids.splice(index, 1);
    }
}
exports.UidKeeper = UidKeeper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVWlkS2VlcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1VpZEtlZXBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBZ0M7QUErQ2hDLE1BQWEsU0FBUztJQVFuQjtRQUhRLFFBQUcsR0FBa0IsSUFBSSxLQUFLLEVBQVUsQ0FBQTtRQUN4QyxXQUFNLEdBQXVCLFNBQVMsQ0FBQTtJQUk5QyxDQUFDO0lBVEQsSUFBSSxLQUFLO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3JCLENBQUM7SUFTRCxNQUFNLENBQUMsS0FBYTtRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWCxJQUFJLEVBQUUsR0FBRyxJQUFBLFlBQUcsRUFBQyxFQUFFLENBQUMsQ0FBQTtRQUVoQixPQUFNLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN2QixFQUFFLEdBQUcsSUFBQSxZQUFHLEVBQUMsRUFBRSxDQUFDLENBQUE7U0FDZDtRQUVELE9BQU8sRUFBRSxDQUFBO0lBQ1osQ0FBQztJQUVELGFBQWE7UUFDVixPQUFPLElBQUEsWUFBRyxFQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVU7UUFDakIsSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUE7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN2RSxDQUFDO0lBR0QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFVO1FBQ3RCLElBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE9BQU07U0FDUjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQVU7UUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFaEMsSUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsT0FBTTtTQUNSO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzVCLENBQUM7Q0FDSDtBQXhERCw4QkF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1aWQgfSBmcm9tICd1aWQvc2VjdXJlJ1xuaW1wb3J0IHsgSVN0YWNrIH0gZnJvbSAnLi9zdGFjay9TdGFjaydcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIElEcyBmb3IgdGhlIG9iamVjdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVWlkS2VlcGVyIHtcbiAgIC8qKlxuICAgICogQXR0YWhjZXMgdGhlIFN0YWNrIHRvIHRoaXMgVWlkS2VlcGVyXG4gICAgKiBcbiAgICAqIEBwYXJhbSBzdGFjayBUaGUgU3RhY2tcbiAgICAqL1xuICAgYXR0YWNoKHN0YWNrOiBJU3RhY2spOiB2b2lkXG5cbiAgIC8qKlxuICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElEXG4gICAgKi9cbiAgIGdlbmVyYXRlKCk6IFByb21pc2U8c3RyaW5nPlxuXG4gICAvKipcbiAgICAqIEdlbmVyYXRlcyBhbiBJRCB1c2VkIGxvY2FsbHkuIFRoZXNlIGFyZSB1c2VkIGZvciBNb2RlbCBNZW1iZXJzXG4gICAgKiB3aGVyZSB0aGV5IGFyZSBub3QgZXhwZWN0ZWQgdG8gYmUgY29uc2lzdGVudCBiZXR3ZWVuIHJ1bnMuXG4gICAgKi9cbiAgIGdlbmVyYXRlTG9jYWwoKTogc3RyaW5nXG4gICBcbiAgIC8qKlxuICAgICogRGV0ZXJtaW5lcyBpZiBhbiBJRCBoYXMgYWxyZWFkeSBiZWVuIHJlc2VydmVkLlxuICAgICogXG4gICAgKiBAcGFyYW0gaWQgVGhlIElEIHRvIGNoZWNrXG4gICAgKi9cbiAgIGhhcyhpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPlxuXG4gICAvKipcbiAgICAqIFJlZ2lzdGVycyBhbiBJRCB3aXRoIHRoZSBVaWRLZWVwZXIuIFJlZ2lzdGVyZWQgSURzIHdvbid0IGJlIHVzZWQgYWdhaW5cbiAgICAqIFxuICAgICogQHBhcmFtIGlkIFRoZSBpZCB0byByZWdpc3RlclxuICAgICovXG4gICByZWdpc3RlcihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPlxuXG4gICAvKipcbiAgICAqIFVucmVnaXN0ZXJzIGFuIElEIHdpdGggdGhlIFVpZEtlZXBlci5cbiAgICAqIFxuICAgICogQHBhcmFtIGlkIFRoZSBpZCB0byB1bnJlZ2lzdGVyXG4gICAgKi9cbiAgIHVucmVnaXN0ZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGNsYXNzIFVpZEtlZXBlciBpbXBsZW1lbnRzIElVaWRLZWVwZXIge1xuICAgZ2V0IHN0YWNrKCk6IElTdGFjayB8IHVuZGVmaW5lZCB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhY2tcbiAgIH1cbiAgIFxuICAgcHJpdmF0ZSBpZHM6IEFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPigpXG4gICBwcml2YXRlIF9zdGFjazogSVN0YWNrIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICB9XG5cbiAgIGF0dGFjaChzdGFjazogSVN0YWNrKTogdm9pZCB7XG4gICAgICB0aGlzLl9zdGFjayA9IHN0YWNrXG4gICB9XG5cbiAgIGFzeW5jIGdlbmVyYXRlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICBsZXQgaWQgPSB1aWQoMzIpXG5cbiAgICAgIHdoaWxlKGF3YWl0IHRoaXMuaGFzKGlkKSkge1xuICAgICAgICAgaWQgPSB1aWQoMzIpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpZFxuICAgfVxuXG4gICBnZW5lcmF0ZUxvY2FsKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdWlkKDMyKVxuICAgfVxuXG4gICBhc3luYyBoYXMoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgaWYodGhpcy5pZHMuaW5kZXhPZihpZCkgPj0gMCkge1xuICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3RhY2sgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXdhaXQgdGhpcy5zdGFjay5oYXNJZChpZClcbiAgIH1cblxuXG4gICBhc3luYyByZWdpc3RlcihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBpZih0aGlzLmlkcy5pbmRleE9mKGlkKSA+PSAwKSB7XG4gICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5pZHMucHVzaChpZClcbiAgIH1cblxuICAgYXN5bmMgdW5yZWdpc3RlcihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBsZXQgaW5kZXggPSB0aGlzLmlkcy5pbmRleE9mKGlkKVxuICAgICAgXG4gICAgICBpZihpbmRleCA8IDApIHtcbiAgICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLmlkcy5zcGxpY2UoaW5kZXgsIDEpXG4gICB9XG59Il19