"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsPlugin = void 0;
const path = require("path");
const stacks_1 = require("@spikedpunch/stacks");
const fs = require("fs-extra");
const TempFileExt = '.temp';
/**
 * File system plugin for Stacks
 *
 * Notes:
 *    * GetMany cursor points to the next file in a sorted list
 */
class FsPlugin {
    constructor(baseDir, options) {
        this.baseDir = baseDir;
        this.name = 'stacks-fs';
        this.version = undefined; // The plugin version
        // TODO: Normalize baseDir (~, .., etc)
        this.options = options || {};
    }
    /*
 export enum EventSet {
    Bootstrap = 'bootstrap',
    GetManyObjects = 'get-many-objects',
    GetModel = 'get-model',
    GetObject = 'get-object',
    HasId = 'has-id',
    ModelCreated = 'model-created',
    ModelDeleted = 'model-deleted',
    ModelUpdated = 'model-updated',
    ObjectCreated = 'object-created',
    ObjectDeleted = 'object-deleted',
    ObjectUpdated = 'object-updated',
    ObjectSaved = 'object-saved'
 }
    */
    async setup(stack, router) {
        await fs.ensureDir(this.baseDir);
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.Bootstrap, async (event) => {
            for (let model of stack.get.models()) {
                await this.setupModel(model);
            }
        });
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.GetManyObjects, async (event) => {
            let modelDir = this.getModelDir(event.model.name);
            let reqCursor = event.options.cursor || '';
            let reqCount = event.options.limit == null ? 100 : event.options.limit;
            // Ignore any Temp files that may be in the directory
            let files = await fs.readdir(modelDir);
            files = files.filter(it => path.parse(it).ext !== TempFileExt);
            files.sort();
            let cursor = '';
            let startIndex = 0;
            let requestedFiles = new Array();
            // The cursor becomes the next file one in the sorted list
            if (reqCursor !== '') {
                let names = files.map(f => path.parse(f).name);
                let decodedCursor = Buffer.from(reqCursor, 'base64').toString('ascii');
                let found = names.findIndex(it => it === decodedCursor);
                if (found < 0) {
                    found = 0;
                    event.wasCursorFound = false;
                }
                else {
                    startIndex = found;
                }
            }
            let endIndex = reqCount + startIndex;
            requestedFiles = files.slice(startIndex, endIndex);
            if (endIndex < (files.length - 1)) {
                let parsed = path.parse(path.join(this.baseDir, files[endIndex]));
                cursor = parsed.name;
            }
            else {
                cursor = '';
            }
            let objects = new Array();
            for (let file of requestedFiles) {
                objects.push(await fs.readJson(path.join(modelDir, file)));
            }
            event.results = {
                cursor: cursor === '' ? '' : Buffer.from(cursor).toString('base64'),
                items: objects
            };
        });
        router.on(stacks_1.EventSet.GetStoreContext, async (event) => {
            if (this.version === undefined) {
                let pkg = await fs.readJson(path.join(__dirname, '..', 'package.json'));
                this.version = pkg.version;
            }
            event.contexts.push({
                name: 'stacks:fs',
                version: this.version || 'version-not-set',
                store: {
                    baseDir: this.baseDir,
                    options: this.options,
                    fs: fs
                }
            });
        });
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.ObjectSaved, async (event) => {
            let modelDir = this.getModelDir(event.model.name);
            try {
                await fs.ensureDir(modelDir);
                await fs.writeJson(path.join(modelDir, `${event.serialize.id}.json`), event.serialize.toJs(), { spaces: 2 });
            }
            catch (err) {
                throw new Error(`[stacks-fs] Failed to save object. Reason: ${err}`);
            }
        });
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.GetObject, async (event) => {
            let objectPath = this.getObjectPath(event.model.id, event.id);
            try {
                let obj = await fs.readJson(objectPath);
                event.object = obj;
            }
            catch (err) {
                throw new Error(`[stacks-fs] Failed to retrieve Object ${event.id}. Reason ${err}`);
            }
        });
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.ObjectDeleted, async (event) => {
            let objectPath = this.getObjectPath(event.model.name, event.object.id);
            try {
                await fs.remove(objectPath);
            }
            catch (err) {
                throw new Error(`[stacks-fs] Failed to delete an Object ${event.object.id}. Reason ${err}`);
            }
        });
        //-------------------------------------------------------------------------------------------
        router.on(stacks_1.EventSet.ObjectUpdated, async (event) => {
            let objectPath = this.getObjectPath(event.model.name, event.object.id);
            try {
                await fs.access(objectPath);
                event.exists = stacks_1.ExistState.Exists;
                event.updated = await fs.readJson(objectPath);
            }
            catch (err) {
                event.exists = stacks_1.ExistState.DoesNotExist;
            }
        });
    }
    getModelDir(modelName) {
        return path.join(this.baseDir, modelName);
    }
    getObjectPath(modelName, objectId) {
        let modelDir = this.getModelDir(modelName);
        return path.join(modelDir, `${objectId}.json`);
    }
    async setupModel(model) {
        let modelDir = this.getModelDir(model.name);
        await fs.ensureDir(modelDir);
    }
}
exports.FsPlugin = FsPlugin;
//# sourceMappingURL=data:application/json;base64,