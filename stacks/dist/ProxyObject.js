"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyObject = void 0;
const _1 = require(".");
const FieldCollection_1 = require("./collections/FieldCollection");
const Field_1 = require("./Field");
const UidKeeper_1 = require("./UidKeeper");
const ValueSource_1 = require("./values/ValueSource");
let handler = {
    get(target, property) {
        if (property === '_unwrap') {
            // Unwrap the SerializedObject from the Proxy
            return function () {
                return target;
            };
        }
        if (property === 'id') {
            return target.id;
        }
        let field = target.fields.get(property);
        if (field === undefined) {
            // Returning undefined here to not only get around
            // not having the property, but also in the cases
            // when the Proxy is await'd, the underlying system
            // calls then() until an undefiend is returned.
            return undefined;
        }
        return field.edit;
    },
    set(target, property, value) {
        if (property === 'id') {
            let cast = target;
            cast.internaleSetId(value);
        }
        let field = target.fields.get(property);
        if (field === undefined) {
            return false;
        }
        field.edit = value;
        return true;
    }
};
class ProxyObject {
    constructor(model, id, fields) {
        this.model = model;
        this.fields = new FieldCollection_1.FieldCollection(fields);
        this._id = id;
    }
    get id() {
        return this._id;
    }
    static async fromModel(model, context) {
        let fields = new Array();
        for (let member of model.members) {
            let editObj = await context.serializer.toJs(member.value);
            fields.push(new Field_1.Field(member.name, member.value.clone(), editObj));
        }
        let proxy = new ProxyObject(model, UidKeeper_1.UidKeeper.IdNotSet, fields);
        //@ts-ignore
        return new Proxy(proxy, handler);
    }
    static async fromStored(model, serialized, serializer) {
        /*
           Bool -> true
           Int -> 0
           List ->
  
        */
        let fields = new Array();
        for (let key of Object.keys(serialized)) {
            let member = model.members.get(key);
            if (member === undefined) {
                // TODO: Potentially add a version compatibility mode where it doesn't throw an error?
                // May need to support not throwing an Error for migrations
                // Consider turning the IValue objects into little Proxies that can update
                // their own fields.
                throw new Error(`A property exists on ther serialized object, that doesn't exist in the Model. Model ${model.name}, Property ${key}`);
            }
            let value = await serializer.fromJs(member.type, serialized[key]);
            fields.push(new Field_1.Field(key, value, await serializer.toJs(value)));
        }
        let proxy = new ProxyObject(model, serialized.id, fields);
        return new Proxy(proxy, handler);
    }
    static async fromCreated(model, obj, context) {
        let fields = new Array();
        for (let key of Object.keys(obj)) {
            let member = model.members.find(m => m.name === key);
            if (member === undefined) {
                // Ignore keys that don't have matching members
                // Note: This could be a version mismatch between the data
                continue;
            }
            if (member.type.type === _1.TypeSet.ObjectRef) {
                let editObj = await this.buildNestedEditObject(member, obj[key], context);
                let objRefType = member.type;
                let value = context.value.ref(objRefType.modelName);
                fields.push(new Field_1.Field(key, value, editObj));
                continue;
            }
            let value = ValueSource_1.ValueSource.resolve(obj[key], context);
            let jsObj = await context.serializer.toJs(value);
            fields.push(new Field_1.Field(key, value, jsObj));
        }
        for (let member of model.members) {
            if (fields.find(f => f.name === member.name) !== undefined) {
                continue;
            }
            let editObj = await context.serializer.toJs(member.value);
            fields.push(new Field_1.Field(member.name, member.value.clone(), editObj));
        }
        // We create the ID when the Object is stored.
        // This saves round trip time, and covers the case where an 
        // ID may be generated, and not stored in the backend, and
        // another equal ID is generated for a different object.
        //@ts-ignore
        return new Proxy(new ProxyObject(model, UidKeeper_1.UidKeeper.IdNotSet, fields), handler);
    }
    static unwrap(serialized) {
        //@ts-ignore
        return serialized._unwrap();
    }
    static async buildNestedEditObject(member, createValues, context) {
        let objRefType = member.type;
        let refValue = context.value.ref(objRefType.modelName);
        let editObj = await context.serializer.toJs(refValue);
        let model = context.cache.getModel(objRefType.modelName);
        if (model === undefined) {
            throw new Error(`Encountered an error when building an Edit Object. The Model for the nested property ${member.name} does not exist `);
        }
        for (let childKey of Object.keys(createValues)) {
            let childValue = createValues[childKey];
            let childMember = model.members.find(m => m.name === childKey);
            // Ignore values that are provided and we don't have a Member for.
            // This could signal that the data versions are mismatched, and that's ok.
            if (childMember === undefined) {
                continue;
            }
            if (childMember.type.type === _1.TypeSet.ObjectRef) {
                editObj[childKey] = await this.buildNestedEditObject(childMember, childValue, context);
                continue;
            }
            let value = ValueSource_1.ValueSource.resolve(childValue, context);
            editObj[childKey] = await context.serializer.toJs(value);
        }
        return editObj;
    }
    internaleSetId(id) {
        this._id = id;
    }
}
exports.ProxyObject = ProxyObject;
//# sourceMappingURL=data:application/json;base64,