"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventRouter = void 0;
class EventRouter {
    constructor() {
        this._handlerMap = new Map();
    }
    on(type, handler) {
        let found = this._handlerMap.get(type);
        if (found === undefined) {
            let array = new Array();
            array.push(handler);
            this._handlerMap.set(type, array);
        }
        else {
            found.push(handler);
        }
    }
    async raise(event) {
        await this.raiseAction(event);
    }
    async raiseAction(event) {
        try {
            let found = this._handlerMap.get(event.type);
            if (found === undefined) {
                return;
            }
            let promises = new Array();
            for (let handler of found) {
                promises.push(this.monitor(handler(event)));
            }
            let statuses = await Promise.all(promises);
            // Rollback in the case of a failure
            if (!statuses.every(status => status.success)) {
                event.rollback();
                for (let handler of found) {
                    promises.push(this.monitor(handler(event)));
                    // TODO: Log/Promote failures when rollingback
                    await Promise.all(promises);
                }
            }
        }
        catch (err) {
            console.log(`REMOVE THESE LOGS AFTER DEVELOPMENT`);
            console.error(err);
            throw err;
        }
    }
    async monitor(promise) {
        try {
            await promise;
            return {
                success: true
            };
        }
        catch (err) {
            return {
                success: false,
                error: err
            };
        }
    }
}
exports.EventRouter = EventRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRSb3V0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRzL0V2ZW50Um91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWNBLE1BQWEsV0FBVztJQU1yQjtRQUNHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQW9DLENBQUE7SUFDakUsQ0FBQztJQUVELEVBQUUsQ0FBbUIsSUFBYyxFQUFFLE9BQXdCO1FBQzFELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXRDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBbUIsQ0FBQTtZQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtTQUNuQzthQUFNO1lBQ0osS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUNyQjtJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWE7UUFDdEIsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWE7UUFDNUIsSUFBSTtZQUNELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUU1QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3RCLE9BQU07YUFDUjtZQUVELElBQUksUUFBUSxHQUFHLElBQUksS0FBSyxFQUEwQixDQUFBO1lBRWxELEtBQUssSUFBSSxPQUFPLElBQUksS0FBSyxFQUFFO2dCQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUM3QztZQUVELElBQUksUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUUxQyxvQ0FBb0M7WUFDcEMsSUFBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzFDLEtBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtnQkFFM0IsS0FBSyxJQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUU7b0JBQ3hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUUzQyw4Q0FBOEM7b0JBQzlDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtpQkFDN0I7YUFDSDtTQUVIO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUE7WUFDbEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNsQixNQUFNLEdBQUcsQ0FBQTtTQUNYO0lBQ0osQ0FBQztJQUVPLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBc0I7UUFDekMsSUFBSTtZQUNELE1BQU0sT0FBTyxDQUFBO1lBQ2IsT0FBTztnQkFDSixPQUFPLEVBQUUsSUFBSTthQUNmLENBQUE7U0FDSDtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1YsT0FBTztnQkFDSixPQUFPLEVBQUUsS0FBSztnQkFDZCxLQUFLLEVBQUUsR0FBWTthQUNyQixDQUFBO1NBQ0g7SUFDSixDQUFDO0NBQ0g7QUExRUQsa0NBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50U2V0LCBJRXZlbnQgfSBmcm9tIFwiLi9FdmVudFwiXG5cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlcjxUIGV4dGVuZHMgSUV2ZW50PiA9IChhY3Rpb246IFQpID0+IFByb21pc2U8dm9pZD5cblxudHlwZSBNb25pdG9yU3RhdHVzID0ge1xuICAgc3VjY2VzczogYm9vbGVhblxuICAgZXJyb3I/OiBFcnJvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudFJvdXRlciB7XG4gICBvbjxUIGV4dGVuZHMgSUV2ZW50Pih0eXBlOiBFdmVudFNldCwgaGFuZGxlcjogRXZlbnRIYW5kbGVyPFQ+KTogdm9pZFxuICAgcmFpc2UoYWN0aW9uOiBJRXZlbnQpOiBQcm9taXNlPHZvaWQ+XG59XG5cbmV4cG9ydCBjbGFzcyBFdmVudFJvdXRlciBpbXBsZW1lbnRzIElFdmVudFJvdXRlciB7XG5cbiAgIC8vIEtleTogRXZlbnQgbmFtZVxuICAgLy8gVmFsdWU6IFRoZSBBY3Rpb25IYW5kbGVyPFQ+XG4gICBwcml2YXRlIF9oYW5kbGVyTWFwOiBNYXA8c3RyaW5nLCBBcnJheTxFdmVudEhhbmRsZXI8YW55Pj4+XG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5faGFuZGxlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBBcnJheTxFdmVudEhhbmRsZXI8YW55Pj4+KClcbiAgIH1cblxuICAgb248VCBleHRlbmRzIElFdmVudD4odHlwZTogRXZlbnRTZXQsIGhhbmRsZXI6IEV2ZW50SGFuZGxlcjxUPik6IHZvaWQge1xuICAgICAgbGV0IGZvdW5kID0gdGhpcy5faGFuZGxlck1hcC5nZXQodHlwZSlcblxuICAgICAgaWYgKGZvdW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIGxldCBhcnJheSA9IG5ldyBBcnJheTxFdmVudEhhbmRsZXI8VD4+KClcbiAgICAgICAgIGFycmF5LnB1c2goaGFuZGxlcilcbiAgICAgICAgIHRoaXMuX2hhbmRsZXJNYXAuc2V0KHR5cGUsIGFycmF5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIGZvdW5kLnB1c2goaGFuZGxlcilcbiAgICAgIH1cbiAgIH1cblxuICAgYXN5bmMgcmFpc2UoZXZlbnQ6IElFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgYXdhaXQgdGhpcy5yYWlzZUFjdGlvbihldmVudClcbiAgIH1cblxuICAgYXN5bmMgcmFpc2VBY3Rpb24oZXZlbnQ6IElFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgIGxldCBmb3VuZCA9IHRoaXMuX2hhbmRsZXJNYXAuZ2V0KGV2ZW50LnR5cGUpXG5cbiAgICAgICAgIGlmIChmb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgIH1cblxuICAgICAgICAgbGV0IHByb21pc2VzID0gbmV3IEFycmF5PFByb21pc2U8TW9uaXRvclN0YXR1cz4+KClcblxuICAgICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBmb3VuZCkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLm1vbml0b3IoaGFuZGxlcihldmVudCkpKVxuICAgICAgICAgfVxuXG4gICAgICAgICBsZXQgc3RhdHVzZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcblxuICAgICAgICAgLy8gUm9sbGJhY2sgaW4gdGhlIGNhc2Ugb2YgYSBmYWlsdXJlXG4gICAgICAgICBpZighc3RhdHVzZXMuZXZlcnkoc3RhdHVzID0+IHN0YXR1cy5zdWNjZXNzKSkge1xuICAgICAgICAgICAgKGV2ZW50IGFzIEV2ZW50KS5yb2xsYmFjaygpXG5cbiAgICAgICAgICAgIGZvciAobGV0IGhhbmRsZXIgb2YgZm91bmQpIHtcbiAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5tb25pdG9yKGhhbmRsZXIoZXZlbnQpKSlcblxuICAgICAgICAgICAgICAgLy8gVE9ETzogTG9nL1Byb21vdGUgZmFpbHVyZXMgd2hlbiByb2xsaW5nYmFja1xuICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG5cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgY29uc29sZS5sb2coYFJFTU9WRSBUSEVTRSBMT0dTIEFGVEVSIERFVkVMT1BNRU5UYClcbiAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9XG4gICB9XG5cbiAgIHByaXZhdGUgYXN5bmMgbW9uaXRvcihwcm9taXNlOiBQcm9taXNlPHZvaWQ+KTogUHJvbWlzZTxNb25pdG9yU3RhdHVzPiB7XG4gICAgICB0cnkge1xuICAgICAgICAgYXdhaXQgcHJvbWlzZVxuICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogZXJyIGFzIEVycm9yXG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG59Il19