"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicType = exports.Type = exports.ValidationReport = exports.TypeSet = void 0;
const Objects_1 = require("../utils/Objects");
var TypeSet;
(function (TypeSet) {
    TypeSet["Bool"] = "bool";
    TypeSet["Int"] = "int";
    TypeSet["List"] = "list";
    TypeSet["ObjectRef"] = "object-reference";
    TypeSet["String"] = "string";
    TypeSet["UInt"] = "uint";
})(TypeSet = exports.TypeSet || (exports.TypeSet = {}));
/**
 * Tracks multiple errors in a Validation call
 */
class ValidationReport {
    constructor() {
        this.results = new Array();
    }
    get success() {
        return this.results.every(it => it.success == true);
    }
    addError(error) {
        this.results.push({
            success: false,
            error
        });
    }
}
exports.ValidationReport = ValidationReport;
class Type {
    constructor(type) {
        this.type = type;
    }
    static isType(obj) {
        return (obj.equals != null) &&
            (obj.validate != null) &&
            (obj.type != null && (0, Objects_1.isEnum)(TypeSet, obj.type));
    }
    equals(other) {
        throw new Error("Method not implemented.");
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.Type = Type;
class BasicType {
    constructor(type) {
        this.type = type;
    }
    equals(other) {
        return other.type == this.type;
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.BasicType = BasicType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWx1ZXMvVHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBeUM7QUFFekMsSUFBWSxPQU9YO0FBUEQsV0FBWSxPQUFPO0lBQ2hCLHdCQUFhLENBQUE7SUFDYixzQkFBVyxDQUFBO0lBQ1gsd0JBQWEsQ0FBQTtJQUNiLHlDQUE4QixDQUFBO0lBQzlCLDRCQUFnQixDQUFBO0lBQ2hCLHdCQUFhLENBQUE7QUFDaEIsQ0FBQyxFQVBXLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQU9sQjtBQUVEOztHQUVHO0FBQ0gsTUFBYSxnQkFBZ0I7SUFPMUI7UUFOUyxZQUFPLEdBQXFCLElBQUksS0FBSyxFQUFrQixDQUFBO0lBUWhFLENBQUM7SUFORCxJQUFJLE9BQU87UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBTUQsUUFBUSxDQUFDLEtBQVk7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDZixPQUFPLEVBQUUsS0FBSztZQUNkLEtBQUs7U0FDUCxDQUFDLENBQUE7SUFDTCxDQUFDO0NBQ0g7QUFqQkQsNENBaUJDO0FBK0JELE1BQXNCLElBQUk7SUFHdkIsWUFBWSxJQUFhO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO0lBQ25CLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQVU7UUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO1lBQ3hCLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7WUFDdEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFBLGdCQUFNLEVBQVUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBWTtRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFNO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQ2hELENBQUM7Q0FDSDtBQXBCRCxvQkFvQkM7QUFFRCxNQUFzQixTQUFTO0lBRzVCLFlBQVksSUFBYTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVk7UUFDaEIsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDakMsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFNO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQ2hELENBQUM7Q0FDSDtBQWRELDhCQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbnVtIH0gZnJvbSBcIi4uL3V0aWxzL09iamVjdHNcIlxuXG5leHBvcnQgZW51bSBUeXBlU2V0IHtcbiAgIEJvb2wgPSAnYm9vbCcsXG4gICBJbnQgPSAnaW50JyxcbiAgIExpc3QgPSAnbGlzdCcsXG4gICBPYmplY3RSZWYgPSAnb2JqZWN0LXJlZmVyZW5jZScsXG4gICBTdHJpbmcgPSdzdHJpbmcnLFxuICAgVUludCA9ICd1aW50J1xufVxuXG4vKipcbiAqIFRyYWNrcyBtdWx0aXBsZSBlcnJvcnMgaW4gYSBWYWxpZGF0aW9uIGNhbGxcbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25SZXBvcnQge1xuICAgcmVhZG9ubHkgcmVzdWx0czogVmFsaWRhdGVSZXN1bHRbXSA9IG5ldyBBcnJheTxWYWxpZGF0ZVJlc3VsdD4oKVxuXG4gICBnZXQgc3VjY2VzcygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdHMuZXZlcnkoaXQgPT4gaXQuc3VjY2VzcyA9PSB0cnVlKVxuICAgfVxuXG4gICBjb25zdHJ1Y3RvcigpIHtcblxuICAgfVxuXG4gICBhZGRFcnJvcihlcnJvcjogRXJyb3IpOiB2b2lkIHtcbiAgICAgIHRoaXMucmVzdWx0cy5wdXNoKHtcbiAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgZXJyb3JcbiAgICAgIH0pXG4gICB9XG59XG5cbmV4cG9ydCB0eXBlIFZhbGlkYXRlUmVzdWx0ID0ge1xuICAgc3VjY2VzczogYm9vbGVhblxuICAgZXJyb3I/OiBFcnJvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUeXBlIHtcbiAgIHJlYWRvbmx5IHR5cGU6IFR5cGVTZXRcblxuICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIGlmIGFub3RoZXIgVHlwZSBpcyBlcXVhbFxuICAgICogXG4gICAgKiBAcGFyYW0gb3RoZXIgVGhlIHZhbHVlIHRvIHRlc3RcbiAgICAqL1xuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW5cblxuICAgLyoqXG4gICAgKiBWYWxpZGF0ZXMgdGhhdCBhIFByb3h5T2JqZWN0J3MgdmFsdWUgbWF0Y2hlcyB0aGUgVHlwZS4gXG4gICAgKiBcbiAgICAqIE5vdGU6IFZhbGlkYXRpb24gaXMgbm90IHBlcmZvcm1lZCB3aGVuIHNldHRpbmdcbiAgICAqIHRoZSBWYWx1ZSBzaW5jZSB3ZSB3YW50IHRoYXQgdG8gcmVtYWluIHN5bmNocm9ub3VzLlxuICAgICogV2UgdHJ1c3QgdGhlIGRldmVsb3BlciB0byBwdXQgdGhlIGNvcnJlY3Qgc2FmZWd1YXJkc1xuICAgICogaW4gcGxhY2UgaW4gb3JkZXIgZm9yIHVzIHRvIG1ha2UgdGhlIEFQSSBlYXN5IHRvXG4gICAgKiB3b3JrIHdpdGguIEl0IGFsbG93cyB1cyB0byB1c2UgUHJveGllcy5cbiAgICAqIFxuICAgICogQHBhcmFtIG9iaiBUaGUgSlMgb2JqZWN0IHRvIHZhbGlkYXRlXG4gICAgKi9cbiAgIHZhbGlkYXRlPFQ+KG9iajogVCk6IFByb21pc2U8VmFsaWRhdGVSZXN1bHQ+XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUeXBlIGltcGxlbWVudHMgSVR5cGUge1xuICAgcmVhZG9ubHkgdHlwZTogVHlwZVNldFxuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBUeXBlU2V0KSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICB9XG5cbiAgIHN0YXRpYyBpc1R5cGUob2JqOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChvYmouZXF1YWxzICE9IG51bGwpICYmIFxuICAgICAgICAgKG9iai52YWxpZGF0ZSAhPSBudWxsKSAmJlxuICAgICAgICAgKG9iai50eXBlICE9IG51bGwgJiYgaXNFbnVtPFR5cGVTZXQ+KFR5cGVTZXQsIG9iai50eXBlKSlcbiAgIH1cblxuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgIH1cblxuICAgdmFsaWRhdGU8VD4ob2JqOiBUKTogUHJvbWlzZTxWYWxpZGF0ZVJlc3VsdD4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWxpZGF0ZSgpIG5vdCBpbXBsZW1lbnRlZGApXG4gICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNpY1R5cGU8VD4gaW1wbGVtZW50cyBJVHlwZSB7XG4gICByZWFkb25seSB0eXBlOiBUeXBlU2V0XG5cbiAgIGNvbnN0cnVjdG9yKHR5cGU6IFR5cGVTZXQpIHtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgIH1cblxuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIG90aGVyLnR5cGUgPT0gdGhpcy50eXBlXG4gICB9XG5cbiAgIHZhbGlkYXRlPFQ+KG9iajogVCk6IFByb21pc2U8VmFsaWRhdGVSZXN1bHQ+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmFsaWRhdGUoKSBub3QgaW1wbGVtZW50ZWRgKVxuICAgfVxufSJdfQ==