"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberCollection = exports.NoOpMemberCollection = void 0;
const Member_1 = require("../Member");
const Model_1 = require("../Model");
class NoOpMemberCollection {
    get length() {
        throw new Error("Method not implemented.");
    }
    constructor() {
        this.model = Model_1.Model.NoOp;
    }
    add(name, value) {
        throw new Error("Method not implemented.");
    }
    append(obj) {
        throw new Error("Method not implemented.");
    }
    delete(name) {
        throw new Error("Method not implemented.");
    }
    find(predicate) {
        throw new Error("Method not implemented.");
    }
    map(visit) {
        throw new Error("Method not implemented.");
    }
    get(name) {
        throw new Error("Method not implemented.");
    }
    [Symbol.iterator]() {
        throw new Error("Method not implemented.");
    }
}
exports.NoOpMemberCollection = NoOpMemberCollection;
class MemberCollection {
    get length() {
        return this.members.length;
    }
    get uid() {
        return this.context.uid;
    }
    constructor(model, context) {
        this.model = model;
        this.context = context;
        this.members = new Array();
    }
    [Symbol.iterator]() {
        let index = 0;
        let self = this;
        return {
            next() {
                return index == self.members.length ?
                    { value: undefined, done: true } :
                    { value: self.members[index++], done: false };
            }
        };
    }
    async add(name, value) {
        let found = this.members.find(m => m.name === name);
        let member = Member_1.Member.create({ [name]: value }, this.model, { model: this.model }, this.context);
        if (found !== undefined) {
            found.value = member[0].value;
            return;
        }
        this.members.push(...member);
    }
    async append(obj) {
        let members = Member_1.Member.create(obj, this.model, { model: this.model }, this.context);
        for (let member of members) {
            let found = this.members.find(m => m.name === member.name);
            // Replace an existing Member if the Types match
            if (found !== undefined) {
                found.value = member.value;
                continue;
            }
            this.members.push(member);
        }
    }
    async delete(name) {
        let found = this.members.findIndex(m => m.name === name);
        if (found) {
            this.members.splice(found, 1);
        }
    }
    find(predicate) {
        return this.members.find(predicate);
    }
    map(visit) {
        return this.members.map(visit);
    }
    get(name) {
        return this.members.find(m => m.name === name);
    }
}
exports.MemberCollection = MemberCollection;
//# sourceMappingURL=data:application/json;base64,