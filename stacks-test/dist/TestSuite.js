"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSuite = void 0;
const stacks_1 = require("@spikedpunch/stacks");
const chai_1 = require("chai");
// type Depth0 = {
//    bool: boolean
//    int: number,
//    string: string
//    uint: number
//    list: string[]
// } & StackObject
const ObjDepth0 = {
    bool: true,
    int: -1,
    string: `I'm a string`,
    uint: 12,
    list: ['a', 'b', 'c']
};
class TestSuite {
    constructor(context) {
        this.context = context;
        this.tests = new Array();
    }
    static async create(context) {
        return new TestSuite(context);
    }
    addAllTests() {
        return this.getModel()
            .getModelById()
            .getModels()
            .getObject()
            .createModel()
            .createObject()
            .doubleObjectSave();
    }
    /**
     * Create a custom Test against the provided TestContext
     *
     * @param name The Name of the Test
     * @param handler The test to run
     * @returns
     */
    custom(name, handler) {
        this.test(name, handler);
        return this;
    }
    /**
     * Creates and retrieves Models
     * @returns
     */
    getModel() {
        this.test("Stack:Get | Model One by One", async ({ stack, models }) => {
            for (let model of models) {
                let mdl = await stack.get.model(model.name);
                (0, chai_1.expect)(mdl).to.not.be.undefined;
                this.validateModel(model, mdl);
            }
        });
        return this;
    }
    /**
     * Creates and retrieves Models by ID
     * @returns
     */
    getModelById() {
        this.test("Stack: | Get Model By ID", async ({ stack, models }) => {
            for (let model of models) {
                let mdl = await stack.get.modelById(model.id);
                (0, chai_1.expect)(mdl).to.not.be.undefined;
                this.validateModel(model, mdl);
            }
        });
        return this;
    }
    /**
     * Creates and retrieves Models
     * @returns
     */
    getModels() {
        this.test('Stack:Get | Models All at one time', async ({ stack, models }) => {
            let many = await stack.get.models();
            (0, chai_1.expect)(many).to.have.lengthOf(models.length);
            for (let mdl of many) {
                let found = models.find(m => m.id === mdl.id);
                (0, chai_1.expect)(found).to.not.be.undefined;
                this.validateModel(found, mdl);
            }
        });
        return this;
    }
    /**
     * Creates a StackObject and retrieves it
     * @returns
     */
    getObject() {
        this.test('Stack:Get | Object', async ({ stack, models }) => {
            (0, chai_1.expect)(models.length).to.be.above(0);
            let obj = await stack.create.object(models[0].name, {});
            await models[0].save(obj);
            let ret = await stack.get.object(models[0].name, obj.id);
            (0, chai_1.expect)(ret).to.not.be.undefined;
        });
        return this;
    }
    /**
     * Double saves an Object to ensure only one exists when retrieving
     * @returns
     */
    doubleObjectSave() {
        this.test('Stack:Get | Object', async ({ stack, models }) => {
            (0, chai_1.expect)(models.length).to.be.above(0);
            let model = models[0];
            let obj = await stack.create.object(model.name, {});
            await model.save(obj);
            await model.save(obj);
            let ret = await stack.get.object(model.name, obj.id);
            (0, chai_1.expect)(ret).to.not.be.undefined;
            let objects = await model.getAll();
            (0, chai_1.expect)(objects).to.not.be.undefined;
            (0, chai_1.expect)(objects).to.have.lengthOf(1);
        });
        return this;
    }
    /**
     * Creates a Model and ensures it exists (using the create() api)
     * @returns
     */
    createModel() {
        this.test('Stack:Create | Model', async ({ stack, models }) => {
            let model = await stack.create.model('some-long-name', {
                bool: true,
                int: 42,
                str: `I'm a string`,
                array: ['']
            });
            (0, chai_1.expect)(model).to.not.be.undefined;
        });
        return this;
    }
    createObject() {
        this.test('Stack:Create | Object', async ({ stack, models }) => {
            (0, chai_1.expect)(models.length).to.be.above(0);
            let obj = await stack.create.object(models[0].name, {});
            (0, chai_1.expect)(obj).to.not.be.undefined;
        });
        return this;
    }
    async run() {
        var _a, _b, _c, _d;
        if ((_a = this.context.hooks) === null || _a === void 0 ? void 0 : _a.beforeAll) {
            await this.context.hooks.beforeAll();
        }
        for (let test of this.tests) {
            if ((_b = this.context.hooks) === null || _b === void 0 ? void 0 : _b.beforeTest) {
                await this.context.hooks.beforeTest();
            }
            try {
                let scenario = await this.createScenario();
                await test.handler(scenario);
                console.log(`${test.name} passed`);
            }
            catch (e) {
                let err = e;
                console.error(`${test.name} failed`);
                if (err.actual) {
                    console.error(`     actual: ${err.actual}`);
                }
                //@ts-ignore
                if (err.expected) {
                    console.error(`   expected: ${err.expected}`);
                }
                if (err.message) {
                    console.error(`    message: ${err.message}`);
                }
                if (err.stack) {
                    console.error(`   Stack:\n\t${err.stack}`);
                }
            }
            if ((_c = this.context.hooks) === null || _c === void 0 ? void 0 : _c.afterTest) {
                await this.context.hooks.afterTest();
            }
        }
        if ((_d = this.context.hooks) === null || _d === void 0 ? void 0 : _d.afterAll) {
            await this.context.hooks.afterAll();
        }
    }
    async createScenario() {
        let stack = stacks_1.Stack.create();
        if (this.context.plugin) {
            await stack.use(this.context.plugin);
        }
        let models = new Array();
        for (let i = 0; i < 5; ++i) {
            models.push(await stack.create.model(`${i}`, ObjDepth0));
        }
        await stack.bootstrap();
        return {
            stack,
            models
        };
    }
    test(name, handler) {
        this.tests.push({ name, handler });
    }
    /**
     * Validates that two Models are equal
     *
     * @param primary The Primary Model
     * @param other The Other Model
     */
    validateModel(primary, other) {
        (0, chai_1.expect)(primary.members.length).to.equal(other.members.length);
        for (let member of primary.members) {
            let pMember = primary.members.get(member.name);
            let oMember = other.members.get(member.name);
            (0, chai_1.expect)(pMember).to.not.be.undefined;
            (0, chai_1.expect)(oMember).to.not.be.undefined;
            (0, chai_1.expect)(pMember.value.equals(oMember.value)).to.be.true;
        }
    }
}
exports.TestSuite = TestSuite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFN1aXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1Rlc3RTdWl0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnREFBb0U7QUFDcEUsK0JBQTZDO0FBMEI3QyxrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixrQkFBa0I7QUFFbEIsTUFBTSxTQUFTLEdBQUc7SUFDZixJQUFJLEVBQUUsSUFBSTtJQUNWLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDUCxNQUFNLEVBQUUsY0FBYztJQUN0QixJQUFJLEVBQUUsRUFBRTtJQUNSLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0NBQ3ZCLENBQUE7QUFFRCxNQUFhLFNBQVM7SUFHbkIsWUFBNkIsT0FBb0I7UUFBcEIsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUZ6QyxVQUFLLEdBQVcsSUFBSSxLQUFLLEVBQVEsQ0FBQTtJQUl6QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBb0I7UUFDckMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsV0FBVztRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNsQixZQUFZLEVBQUU7YUFDZCxTQUFTLEVBQUU7YUFDWCxTQUFTLEVBQUU7YUFDWCxXQUFXLEVBQUU7YUFDYixZQUFZLEVBQUU7YUFDZCxnQkFBZ0IsRUFBRSxDQUFBO0lBQ3pCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsSUFBWSxFQUFFLE9BQW9CO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3hCLE9BQU8sSUFBSSxDQUFBO0lBQ2QsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTCxJ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LENBQUE7UUFDM0QsQ0FBQztJQUNKLENBQUM7Q0FDSDtBQTFQRCw4QkEwUEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTW9kZWwsIElQbHVnaW4sIElTdGFjaywgU3RhY2sgfSBmcm9tIFwiQHNwaWtlZHB1bmNoL3N0YWNrc1wiXG5pbXBvcnQgeyBBc3NlcnRpb25FcnJvciwgZXhwZWN0IH0gZnJvbSBcImNoYWlcIlxuXG5leHBvcnQgdHlwZSBUZXN0SGFuZGxlciA9IChzY2VuYXJpbzogVGVzdFNjZW5hcmlvKSA9PiBQcm9taXNlPHZvaWQ+XG5leHBvcnQgdHlwZSBIb29rSGFuZGxlciA9ICgpID0+IFByb21pc2U8dm9pZD5cblxuZXhwb3J0IHR5cGUgVGVzdENvbnRleHQgPSB7XG4gICBwbHVnaW4/OiBJUGx1Z2luXG4gICBob29rcz86IHtcbiAgICAgIGJlZm9yZUFsbD86IEhvb2tIYW5kbGVyICAgIC8vIENhbGxlZCBiZWZvcmUgYWxsIHRlc3RzIGFyZSBydW5cbiAgICAgIGJlZm9yZVRlc3Q/OiBIb29rSGFuZGxlciAgIC8vIENhbGxlZCBiZWZvcmUgZXZlcnkgdGVzdFxuICAgICAgYWZ0ZXJUZXN0PzogSG9va0hhbmRsZXIgICAgLy8gQ2FsbGVkIGFmdGVyIGV2ZXJ5IHRlc3RcbiAgICAgIGFmdGVyQWxsPzogSG9va0hhbmRsZXIgICAgIC8vIENhbGxlZCBhZnRlciBhbGwgZXRzdHMgaGF2ZSBmaW5pc2hlZFxuICAgfVxufVxuXG5leHBvcnQgdHlwZSBUZXN0U2NlbmFyaW8gPSB7XG4gICBzdGFjazogSVN0YWNrXG4gICBtb2RlbHM6IElNb2RlbFtdXG4gICAvLyBwbHVnaW5zOiBJUGx1Z2luW11cbn1cblxudHlwZSBUZXN0ID0ge1xuICAgbmFtZTogc3RyaW5nXG4gICBoYW5kbGVyOiBUZXN0SGFuZGxlclxufVxuXG4vLyB0eXBlIERlcHRoMCA9IHtcbi8vICAgIGJvb2w6IGJvb2xlYW5cbi8vICAgIGludDogbnVtYmVyLFxuLy8gICAgc3RyaW5nOiBzdHJpbmdcbi8vICAgIHVpbnQ6IG51bWJlclxuLy8gICAgbGlzdDogc3RyaW5nW11cbi8vIH0gJiBTdGFja09iamVjdFxuXG5jb25zdCBPYmpEZXB0aDAgPSB7XG4gICBib29sOiB0cnVlLFxuICAgaW50OiAtMSxcbiAgIHN0cmluZzogYEknbSBhIHN0cmluZ2AsXG4gICB1aW50OiAxMixcbiAgIGxpc3Q6IFsnYScsICdiJywgJ2MnXVxufVxuXG5leHBvcnQgY2xhc3MgVGVzdFN1aXRlIHtcbiAgIHByaXZhdGUgdGVzdHM6IFRlc3RbXSA9IG5ldyBBcnJheTxUZXN0PigpXG4gICBcbiAgIHByaXZhdGUgY29uc3RydWN0b3IocmVhZG9ubHkgY29udGV4dDogVGVzdENvbnRleHQpIHtcblxuICAgfVxuXG4gICBzdGF0aWMgYXN5bmMgY3JlYXRlKGNvbnRleHQ6IFRlc3RDb250ZXh0KTogUHJvbWlzZTxUZXN0U3VpdGU+IHtcbiAgICAgIHJldHVybiBuZXcgVGVzdFN1aXRlKGNvbnRleHQpXG4gICB9XG5cbiAgIGFkZEFsbFRlc3RzKCk6IFRlc3RTdWl0ZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRNb2RlbCgpXG4gICAgICAgICAuZ2V0TW9kZWxCeUlkKClcbiAgICAgICAgIC5nZXRNb2RlbHMoKVxuICAgICAgICAgLmdldE9iamVjdCgpXG4gICAgICAgICAuY3JlYXRlTW9kZWwoKVxuICAgICAgICAgLmNyZWF0ZU9iamVjdCgpXG4gICAgICAgICAuZG91YmxlT2JqZWN0U2F2ZSgpXG4gICB9XG5cbiAgIC8qKlxuICAgICogQ3JlYXRlIGEgY3VzdG9tIFRlc3QgYWdhaW5zdCB0aGUgcHJvdmlkZWQgVGVzdENvbnRleHRcbiAgICAqIFxuICAgICogQHBhcmFtIG5hbWUgVGhlIE5hbWUgb2YgdGhlIFRlc3RcbiAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSB0ZXN0IHRvIHJ1blxuICAgICogQHJldHVybnMgXG4gICAgKi9cbiAgIGN1c3RvbShuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IFRlc3RIYW5kbGVyKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdChuYW1lLCBoYW5kbGVyKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgIH1cblxuICAgLyoqXG4gICAgKiBDcmVhdGVzIGFuZCByZXRyaWV2ZXMgTW9kZWxzXG4gICAgKiBAcmV0dXJucyBcbiAgICAqL1xuICAgZ2V0TW9kZWwoKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdChcIlN0YWNrOkdldCB8IE1vZGVsIE9uZSBieSBPbmVcIiwgYXN5bmMgKHsgc3RhY2ssIG1vZGVscyB9KSA9PiB7XG4gICAgICAgICBmb3IobGV0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgICAgICAgbGV0IG1kbCA9IGF3YWl0IHN0YWNrLmdldC5tb2RlbChtb2RlbC5uYW1lKVxuICAgICAgICAgICAgZXhwZWN0KG1kbCkudG8ubm90LmJlLnVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZU1vZGVsKG1vZGVsLCBtZGwhKVxuICAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgIH1cblxuICAgLyoqXG4gICAgKiBDcmVhdGVzIGFuZCByZXRyaWV2ZXMgTW9kZWxzIGJ5IElEXG4gICAgKiBAcmV0dXJucyBcbiAgICAqL1xuICAgZ2V0TW9kZWxCeUlkKCk6IFRlc3RTdWl0ZSB7XG4gICAgICB0aGlzLnRlc3QoXCJTdGFjazogfCBHZXQgTW9kZWwgQnkgSURcIiwgYXN5bmMgKHsgc3RhY2ssIG1vZGVscyB9KSA9PiB7XG4gICAgICAgICBmb3IobGV0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgICAgICAgbGV0IG1kbCA9IGF3YWl0IHN0YWNrLmdldC5tb2RlbEJ5SWQobW9kZWwuaWQpXG4gICAgICAgICAgICBleHBlY3QobWRsKS50by5ub3QuYmUudW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlTW9kZWwobW9kZWwsIG1kbCEpXG4gICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgfVxuXG4gICAvKipcbiAgICAqIENyZWF0ZXMgYW5kIHJldHJpZXZlcyBNb2RlbHNcbiAgICAqIEByZXR1cm5zIFxuICAgICovXG4gICBnZXRNb2RlbHMoKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdCgnU3RhY2s6R2V0IHwgTW9kZWxzIEFsbCBhdCBvbmUgdGltZScsIGFzeW5jICh7IHN0YWNrLCBtb2RlbHMgfSkgPT4ge1xuICAgICAgICAgbGV0IG1hbnkgPSBhd2FpdCBzdGFjay5nZXQubW9kZWxzKClcblxuICAgICAgICAgZXhwZWN0KG1hbnkpLnRvLmhhdmUubGVuZ3RoT2YobW9kZWxzLmxlbmd0aClcbiAgICAgICAgIFxuICAgICAgICAgZm9yKGxldCBtZGwgb2YgbWFueSkge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gbW9kZWxzLmZpbmQobSA9PiBtLmlkID09PSBtZGwuaWQpXG5cbiAgICAgICAgICAgIGV4cGVjdChmb3VuZCkudG8ubm90LmJlLnVuZGVmaW5lZFxuXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlTW9kZWwoZm91bmQhLCBtZGwpXG4gICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgfVxuXG4gICAvKipcbiAgICAqIENyZWF0ZXMgYSBTdGFja09iamVjdCBhbmQgcmV0cmlldmVzIGl0XG4gICAgKiBAcmV0dXJucyBcbiAgICAqL1xuICAgZ2V0T2JqZWN0KCk6IFRlc3RTdWl0ZSB7XG4gICAgICB0aGlzLnRlc3QoJ1N0YWNrOkdldCB8IE9iamVjdCcsIGFzeW5jICh7IHN0YWNrLCBtb2RlbHMgfSkgPT4ge1xuICAgICAgICAgZXhwZWN0KG1vZGVscy5sZW5ndGgpLnRvLmJlLmFib3ZlKDApXG5cbiAgICAgICAgIGxldCBvYmogPSBhd2FpdCBzdGFjay5jcmVhdGUub2JqZWN0KG1vZGVsc1swXS5uYW1lLCB7fSlcbiAgICAgICAgIGF3YWl0IG1vZGVsc1swXS5zYXZlKG9iailcbiAgICAgICBcbiAgICAgICAgIGxldCByZXQgPSBhd2FpdCBzdGFjay5nZXQub2JqZWN0KG1vZGVsc1swXS5uYW1lLCBvYmouaWQpXG5cbiAgICAgICAgIGV4cGVjdChyZXQpLnRvLm5vdC5iZS51bmRlZmluZWRcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICB9XG5cbiAgIC8qKlxuICAgICogRG91YmxlIHNhdmVzIGFuIE9iamVjdCB0byBlbnN1cmUgb25seSBvbmUgZXhpc3RzIHdoZW4gcmV0cmlldmluZ1xuICAgICogQHJldHVybnMgXG4gICAgKi9cbiAgIGRvdWJsZU9iamVjdFNhdmUoKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdCgnU3RhY2s6R2V0IHwgT2JqZWN0JywgYXN5bmMgKHsgc3RhY2ssIG1vZGVscyB9KSA9PiB7XG4gICAgICAgICBleHBlY3QobW9kZWxzLmxlbmd0aCkudG8uYmUuYWJvdmUoMClcblxuICAgICAgICAgbGV0IG1vZGVsID0gbW9kZWxzWzBdXG5cbiAgICAgICAgIGxldCBvYmogPSBhd2FpdCBzdGFjay5jcmVhdGUub2JqZWN0KG1vZGVsLm5hbWUsIHt9KVxuICAgICAgICAgYXdhaXQgbW9kZWwuc2F2ZShvYmopXG4gICAgICAgICBhd2FpdCBtb2RlbC5zYXZlKG9iailcbiAgICAgICBcbiAgICAgICAgIGxldCByZXQgPSBhd2FpdCBzdGFjay5nZXQub2JqZWN0KG1vZGVsLm5hbWUsIG9iai5pZClcbiAgICAgICAgIGV4cGVjdChyZXQpLnRvLm5vdC5iZS51bmRlZmluZWRcblxuICAgICAgICAgbGV0IG9iamVjdHMgPSBhd2FpdCBtb2RlbC5nZXRBbGwoKVxuICAgICAgICAgZXhwZWN0KG9iamVjdHMpLnRvLm5vdC5iZS51bmRlZmluZWRcbiAgICAgICAgIGV4cGVjdChvYmplY3RzKS50by5oYXZlLmxlbmd0aE9mKDEpXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgfVxuXG4gICAvKipcbiAgICAqIENyZWF0ZXMgYSBNb2RlbCBhbmQgZW5zdXJlcyBpdCBleGlzdHMgKHVzaW5nIHRoZSBjcmVhdGUoKSBhcGkpXG4gICAgKiBAcmV0dXJucyBcbiAgICAqL1xuICAgY3JlYXRlTW9kZWwoKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdCgnU3RhY2s6Q3JlYXRlIHwgTW9kZWwnLCBhc3luYyAoeyBzdGFjaywgbW9kZWxzIH0pID0+IHtcbiAgICAgICAgIGxldCBtb2RlbCA9IGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbCgnc29tZS1sb25nLW5hbWUnLCB7XG4gICAgICAgICAgICBib29sOiB0cnVlLFxuICAgICAgICAgICAgaW50OiA0MixcbiAgICAgICAgICAgIHN0cjogYEknbSBhIHN0cmluZ2AsXG4gICAgICAgICAgICBhcnJheTogWycnXVxuICAgICAgICAgfSlcblxuICAgICAgICAgZXhwZWN0KG1vZGVsKS50by5ub3QuYmUudW5kZWZpbmVkXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgfVxuXG4gICBjcmVhdGVPYmplY3QoKTogVGVzdFN1aXRlIHtcbiAgICAgIHRoaXMudGVzdCgnU3RhY2s6Q3JlYXRlIHwgT2JqZWN0JywgYXN5bmMgKHsgc3RhY2ssIG1vZGVscyB9KSA9PiB7XG4gICAgICAgICBleHBlY3QobW9kZWxzLmxlbmd0aCkudG8uYmUuYWJvdmUoMClcbiAgICAgICAgIGxldCBvYmogPSBhd2FpdCBzdGFjay5jcmVhdGUub2JqZWN0KG1vZGVsc1swXS5uYW1lLCB7fSlcbiAgICAgICAgIGV4cGVjdChvYmopLnRvLm5vdC5iZS51bmRlZmluZWRcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICB9XG5cbiAgIGFzeW5jIHJ1bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGlmKHRoaXMuY29udGV4dC5ob29rcz8uYmVmb3JlQWxsKSB7XG4gICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHQuaG9va3MuYmVmb3JlQWxsKClcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCB0ZXN0IG9mIHRoaXMudGVzdHMpIHtcbiAgICAgICAgIGlmKHRoaXMuY29udGV4dC5ob29rcz8uYmVmb3JlVGVzdCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0Lmhvb2tzLmJlZm9yZVRlc3QoKVxuICAgICAgICAgfVxuXG4gICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHNjZW5hcmlvID0gYXdhaXQgdGhpcy5jcmVhdGVTY2VuYXJpbygpXG4gICAgICAgICAgICBhd2FpdCB0ZXN0LmhhbmRsZXIoc2NlbmFyaW8pXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0ZXN0Lm5hbWV9IHBhc3NlZGApXG4gICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGxldCBlcnIgPSBlIGFzIEFzc2VydGlvbkVycm9yXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke3Rlc3QubmFtZX0gZmFpbGVkYClcblxuICAgICAgICAgICAgaWYoZXJyLmFjdHVhbCkge1xuICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgICAgICBhY3R1YWw6ICR7ZXJyLmFjdHVhbCF9YClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBpZihlcnIuZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCAgIGV4cGVjdGVkOiAke2Vyci5leHBlY3RlZCF9YClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCAgICBtZXNzYWdlOiAke2Vyci5tZXNzYWdlIX1gKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihlcnIuc3RhY2spIHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCAgIFN0YWNrOlxcblxcdCR7ZXJyLnN0YWNrfWApXG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG5cbiAgICAgICAgIGlmKHRoaXMuY29udGV4dC5ob29rcz8uYWZ0ZXJUZXN0KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHQuaG9va3MuYWZ0ZXJUZXN0KClcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5jb250ZXh0Lmhvb2tzPy5hZnRlckFsbCkge1xuICAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0Lmhvb2tzLmFmdGVyQWxsKClcbiAgICAgIH1cbiAgIH1cblxuICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVTY2VuYXJpbygpOiBQcm9taXNlPFRlc3RTY2VuYXJpbz4ge1xuICAgICAgbGV0IHN0YWNrID0gU3RhY2suY3JlYXRlKClcbiAgICAgIFxuICAgICAgaWYodGhpcy5jb250ZXh0LnBsdWdpbikge1xuICAgICAgICAgYXdhaXQgc3RhY2sudXNlKHRoaXMuY29udGV4dC5wbHVnaW4pXG4gICAgICB9XG5cbiAgICAgIGxldCBtb2RlbHMgPSBuZXcgQXJyYXk8SU1vZGVsPigpXG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgIG1vZGVscy5wdXNoKGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbChgJHtpfWAsIE9iakRlcHRoMCkpXG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHN0YWNrLmJvb3RzdHJhcCgpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICBzdGFjayxcbiAgICAgICAgIG1vZGVsc1xuICAgICAgfVxuICAgfVxuXG4gICBwcml2YXRlIHRlc3QobmFtZTogc3RyaW5nLCBoYW5kbGVyOiBUZXN0SGFuZGxlcik6IHZvaWQge1xuICAgICAgdGhpcy50ZXN0cy5wdXNoKHsgbmFtZSwgaGFuZGxlciB9KVxuICAgfVxuXG4gICAvKipcbiAgICAqIFZhbGlkYXRlcyB0aGF0IHR3byBNb2RlbHMgYXJlIGVxdWFsXG4gICAgKiBcbiAgICAqIEBwYXJhbSBwcmltYXJ5IFRoZSBQcmltYXJ5IE1vZGVsXG4gICAgKiBAcGFyYW0gb3RoZXIgVGhlIE90aGVyIE1vZGVsXG4gICAgKi9cbiAgIHByaXZhdGUgdmFsaWRhdGVNb2RlbChwcmltYXJ5OiBJTW9kZWwsIG90aGVyOiBJTW9kZWwpOiB2b2lkIHtcbiAgICAgIGV4cGVjdChwcmltYXJ5Lm1lbWJlcnMubGVuZ3RoKS50by5lcXVhbChvdGhlci5tZW1iZXJzLmxlbmd0aClcblxuICAgICAgZm9yKCBsZXQgbWVtYmVyIG9mIHByaW1hcnkubWVtYmVycykge1xuICAgICAgICAgbGV0IHBNZW1iZXIgPSBwcmltYXJ5Lm1lbWJlcnMuZ2V0KG1lbWJlci5uYW1lKVxuICAgICAgICAgbGV0IG9NZW1iZXIgPSBvdGhlci5tZW1iZXJzLmdldChtZW1iZXIubmFtZSlcblxuICAgICAgICAgZXhwZWN0KHBNZW1iZXIpLnRvLm5vdC5iZS51bmRlZmluZWRcbiAgICAgICAgIGV4cGVjdChvTWVtYmVyKS50by5ub3QuYmUudW5kZWZpbmVkXG5cbiAgICAgICAgIGV4cGVjdChwTWVtYmVyIS52YWx1ZS5lcXVhbHMob01lbWJlciEudmFsdWUpKS50by5iZS50cnVlXG4gICAgICB9XG4gICB9XG59Il19