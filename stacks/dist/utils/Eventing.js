"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncEventEmitter = exports.CombinedEventEmitter = exports.emitAsync = exports.emit = void 0;
const events_1 = require("events");
/**
 * Emits events from multiple objects. It will emit the event for
 * an EventEmitter and ICombinedEventEmitter source.
 *
 * @param info The Event Info used to emit an event from multiple sources
 */
async function emit(info) {
    for (let ev of info) {
        if (CombinedEventEmitter.isCombinedEventEmitter(ev.source)) {
            let combined = ev.source;
            await combined.emit(ev.event, ev.data);
            continue;
        }
        ev.source.emit(ev.event, ev.data);
    }
}
exports.emit = emit;
async function emitAsync(eventBus, info) {
    for (let ev of info) {
        await eventBus.emit(ev.event, ev.data);
    }
}
exports.emitAsync = emitAsync;
class CombinedEventEmitter {
    constructor() {
        this.sync = new events_1.EventEmitter();
        this.async = new AsyncEventEmitter();
    }
    static isCombinedEventEmitter(other) {
        if (other.sync == null || !(other.sync instanceof events_1.EventEmitter)) {
            return false;
        }
        if (other.async == null || !(other.async instanceof AsyncEventEmitter)) {
            return false;
        }
        return true;
    }
    async emit(event, data) {
        this.sync.emit(event, data);
        await this.async.emit(event, data);
    }
    on(event, syncHandler, asyncHandler) {
        this.sync.on(event, syncHandler);
        this.async.on(event, asyncHandler);
    }
    off(event, syncHandler, asyncHandler) {
        this.sync.off(event, syncHandler);
        this.async.off(event, asyncHandler);
    }
}
exports.CombinedEventEmitter = CombinedEventEmitter;
class AsyncEventEmitter {
    constructor() {
        this.handlers = new Map();
    }
    async emit(event, data) {
        let handlers = this.getHandlers(event);
        for (let handler of handlers) {
            // TODO: Consider running in parallel
            await handler(data);
        }
    }
    on(event, handler) {
        let handlers = this.getHandlers(event);
        handlers.splice(-1, 0, handler);
    }
    off(event, handler) {
        let handlers = this.getHandlers(event);
        for (let i = 0; i < handlers.length; ++i) {
            if (handlers[i] === handler) {
                handlers.splice(i, 1);
                return;
            }
        }
    }
    getHandlers(event) {
        let handlers = this.handlers.get(event);
        if (handlers === undefined) {
            handlers = new Array();
            this.handlers.set(event, handlers);
        }
        return handlers;
    }
}
exports.AsyncEventEmitter = AsyncEventEmitter;
//# sourceMappingURL=data:application/json;base64,