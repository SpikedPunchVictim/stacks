"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectRefSerializer = exports.ObjectRefValue = exports.ObjectRefType = void 0;
const ProxyObject_1 = require("../ProxyObject");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const StackObject_1 = require("../StackObject");
const UidKeeper_1 = require("../UidKeeper");
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class ObjectRefType extends Type_1.Type {
    constructor(modelName, context) {
        super(Type_1.TypeSet.ObjectRef);
        this.modelName = modelName;
        this.context = context;
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    equals(other) {
        if (other.type !== Type_1.TypeSet.ObjectRef) {
            return false;
        }
        let cast = other;
        if (cast.modelName.toLowerCase() !== this.modelName.toLowerCase()) {
            return false;
        }
        return true;
    }
    async validate(obj) {
        if (typeof obj !== 'object') {
            return { success: false, error: new Error(`Type does not match. Expected 'object' for a reference type but receieved '${typeof obj}'`) };
        }
        if (!(0, StackObject_1.isStackObject)(obj)) {
            return { success: false, error: new Error(`The Object is expected to be a StackObject.`) };
        }
        return { success: true };
    }
}
exports.ObjectRefType = ObjectRefType;
class ObjectRefValue extends Value_1.Value {
    constructor(modelName, id, context) {
        super(new ObjectRefType(modelName, context));
        this.id = id;
    }
    clone() {
        let refType = this.type;
        return new ObjectRefValue(refType.modelName, this.id, refType.context);
    }
}
exports.ObjectRefValue = ObjectRefValue;
class ObjectRefSerializer extends ValueSerializer_1.ValueSerializer {
    constructor(context) {
        super(Type_1.TypeSet.ObjectRef);
        this.context = context;
    }
    async toJs(value) {
        this.validate(value.type);
        let type = value.type;
        let objRef = value;
        let model = this.context.cache.getModel(type.modelName);
        if (model === undefined) {
            throw new Error(`Encountered an error when serializing an ObjectRef. The Model referenced (${type.modelName}) does not exist.`);
        }
        if (objRef.id === UidKeeper_1.UidKeeper.IdNotSet) {
            return await ProxyObject_1.ProxyObject.fromModel(model, this.context);
        }
        return await this.context.orchestrator.getObject(model, objRef.id);
    }
    async fromJs(type, obj) {
        this.validate(type);
        let castObj = obj;
        let castType = type;
        let model = this.context.cache.getModel(castType.modelName);
        if (model === undefined) {
            throw new Error(`Error encountered while trying to serialize an edited value (ObjectRef). The Model (${castType.modelName}) does not exist.`);
        }
        return new ObjectRefValue(castType.modelName, castObj.id, this.context);
    }
}
exports.ObjectRefSerializer = ObjectRefSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0UmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZhbHVlcy9PYmplY3RSZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsZ0RBQTZDO0FBQzdDLGtFQUErRDtBQUUvRCxnREFBNEQ7QUFDNUQsNENBQXlDO0FBQ3pDLGlDQUE4RDtBQUM5RCxtQ0FBd0M7QUFFeEMsTUFBYSxhQUFjLFNBQVEsV0FBSTtJQUtwQyxZQUFxQixTQUFpQixFQUFXLE9BQXNCO1FBQ3BFLEtBQUssQ0FBQyxjQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFETixjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVcsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUV2RSxDQUFDO0lBTkQsSUFBSSxZQUFZO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQTtJQUNuQyxDQUFDO0lBTUQsTUFBTSxDQUFDLEtBQVk7UUFDaEIsSUFBRyxLQUFLLENBQUMsSUFBSSxLQUFLLGNBQU8sQ0FBQyxTQUFTLEVBQUU7WUFDbEMsT0FBTyxLQUFLLENBQUE7U0FDZDtRQUVELElBQUksSUFBSSxHQUFHLEtBQXNCLENBQUE7UUFFakMsSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDL0QsT0FBTyxLQUFLLENBQUE7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUksR0FBTTtRQUNyQixJQUFHLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUN6QixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsOEVBQThFLE9BQU8sR0FBRyxHQUFHLENBQUMsRUFBQyxDQUFBO1NBQ3pJO1FBRUQsSUFBRyxDQUFDLElBQUEsMkJBQWEsRUFBQyxHQUFHLENBQUMsRUFBRTtZQUNyQixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsRUFBQyxDQUFBO1NBQzNGO1FBRUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0NBQ0g7QUFsQ0Qsc0NBa0NDO0FBRUQsTUFBYSxjQUFlLFNBQVEsYUFBSztJQUd0QyxZQUFZLFNBQWlCLEVBQUUsRUFBVSxFQUFFLE9BQXNCO1FBQzlELEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM1QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNmLENBQUM7SUFFRCxLQUFLO1FBQ0YsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQXFCLENBQUE7UUFDeEMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3pFLENBQUM7Q0FDSDtBQVpELHdDQVlDO0FBRUQsTUFBYSxtQkFBb0IsU0FBUSxpQ0FBZTtJQUNyRCxZQUFxQixPQUFzQjtRQUN4QyxLQUFLLENBQUMsY0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRE4sWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUUzQyxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXpCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFxQixDQUFBO1FBQ3RDLElBQUksTUFBTSxHQUFHLEtBQXVCLENBQUE7UUFFcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV2RCxJQUFHLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2RUFBNkUsSUFBSSxDQUFDLFNBQVMsbUJBQW1CLENBQUMsQ0FBQTtTQUNqSTtRQUVELElBQUcsTUFBTSxDQUFDLEVBQUUsS0FBSyxxQkFBUyxDQUFDLFFBQVEsRUFBRTtZQUNsQyxPQUFPLE1BQU0seUJBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN6RDtRQUVELE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFXLEVBQUUsR0FBUTtRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRW5CLElBQUksT0FBTyxHQUFHLEdBQWtCLENBQUE7UUFDaEMsSUFBSSxRQUFRLEdBQUcsSUFBcUIsQ0FBQTtRQUNwQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRTNELElBQUcsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHVGQUF1RixRQUFRLENBQUMsU0FBUyxtQkFBbUIsQ0FBQyxDQUFBO1NBQy9JO1FBRUQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzFFLENBQUM7Q0FDSDtBQXJDRCxrREFxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT3JjaGVzdHJhdG9yIH0gZnJvbSBcIi4uL29yY2hlc3RyYXRvci9PcmNoZXN0cmF0b3JcIjtcbmltcG9ydCB7IFByb3h5T2JqZWN0IH0gZnJvbSBcIi4uL1Byb3h5T2JqZWN0XCI7XG5pbXBvcnQgeyBWYWx1ZVNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vc2VyaWFsaXplL1ZhbHVlU2VyaWFsaXplclwiO1xuaW1wb3J0IHsgSVN0YWNrQ29udGV4dCB9IGZyb20gXCIuLi9zdGFjay9TdGFja0NvbnRleHRcIjtcbmltcG9ydCB7IGlzU3RhY2tPYmplY3QsIFN0YWNrT2JqZWN0IH0gZnJvbSBcIi4uL1N0YWNrT2JqZWN0XCI7XG5pbXBvcnQgeyBVaWRLZWVwZXIgfSBmcm9tIFwiLi4vVWlkS2VlcGVyXCI7XG5pbXBvcnQgeyBJVHlwZSwgVHlwZSwgVHlwZVNldCwgVmFsaWRhdGVSZXN1bHQgfSBmcm9tIFwiLi9UeXBlXCI7XG5pbXBvcnQgeyBJVmFsdWUsIFZhbHVlIH0gZnJvbSBcIi4vVmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIE9iamVjdFJlZlR5cGUgZXh0ZW5kcyBUeXBlIHtcbiAgIGdldCBvcmNoZXN0cmF0b3IoKTogSU9yY2hlc3RyYXRvciB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm9yY2hlc3RyYXRvclxuICAgfVxuXG4gICBjb25zdHJ1Y3RvcihyZWFkb25seSBtb2RlbE5hbWU6IHN0cmluZywgcmVhZG9ubHkgY29udGV4dDogSVN0YWNrQ29udGV4dCkge1xuICAgICAgc3VwZXIoVHlwZVNldC5PYmplY3RSZWYpXG4gICB9XG5cbiAgIGVxdWFscyhvdGhlcjogSVR5cGUpOiBib29sZWFuIHtcbiAgICAgIGlmKG90aGVyLnR5cGUgIT09IFR5cGVTZXQuT2JqZWN0UmVmKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgbGV0IGNhc3QgPSBvdGhlciBhcyBPYmplY3RSZWZUeXBlXG5cbiAgICAgIGlmKGNhc3QubW9kZWxOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHRoaXMubW9kZWxOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgfVxuXG4gICBhc3luYyB2YWxpZGF0ZTxUPihvYmo6IFQpOiBQcm9taXNlPFZhbGlkYXRlUmVzdWx0PiB7XG4gICAgICBpZih0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBuZXcgRXJyb3IoYFR5cGUgZG9lcyBub3QgbWF0Y2guIEV4cGVjdGVkICdvYmplY3QnIGZvciBhIHJlZmVyZW5jZSB0eXBlIGJ1dCByZWNlaWV2ZWQgJyR7dHlwZW9mIG9ian0nYCl9XG4gICAgICB9XG5cbiAgICAgIGlmKCFpc1N0YWNrT2JqZWN0KG9iaikpIHtcbiAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogbmV3IEVycm9yKGBUaGUgT2JqZWN0IGlzIGV4cGVjdGVkIHRvIGJlIGEgU3RhY2tPYmplY3QuYCl9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxuICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2JqZWN0UmVmVmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG4gICBpZDogc3RyaW5nXG5cbiAgIGNvbnN0cnVjdG9yKG1vZGVsTmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCBjb250ZXh0OiBJU3RhY2tDb250ZXh0KSB7XG4gICAgICBzdXBlcihuZXcgT2JqZWN0UmVmVHlwZShtb2RlbE5hbWUsIGNvbnRleHQpKVxuICAgICAgdGhpcy5pZCA9IGlkXG4gICB9XG5cbiAgIGNsb25lKCk6IElWYWx1ZSB7XG4gICAgICBsZXQgcmVmVHlwZSA9IHRoaXMudHlwZSBhcyBPYmplY3RSZWZUeXBlXG4gICAgICByZXR1cm4gbmV3IE9iamVjdFJlZlZhbHVlKHJlZlR5cGUubW9kZWxOYW1lLCB0aGlzLmlkLCByZWZUeXBlLmNvbnRleHQpXG4gICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPYmplY3RSZWZTZXJpYWxpemVyIGV4dGVuZHMgVmFsdWVTZXJpYWxpemVyIHtcbiAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGNvbnRleHQ6IElTdGFja0NvbnRleHQpIHtcbiAgICAgIHN1cGVyKFR5cGVTZXQuT2JqZWN0UmVmKVxuICAgfVxuXG4gICBhc3luYyB0b0pzKHZhbHVlOiBJVmFsdWUpOiBQcm9taXNlPGFueT4ge1xuICAgICAgdGhpcy52YWxpZGF0ZSh2YWx1ZS50eXBlKVxuXG4gICAgICBsZXQgdHlwZSA9IHZhbHVlLnR5cGUgYXMgT2JqZWN0UmVmVHlwZVxuICAgICAgbGV0IG9ialJlZiA9IHZhbHVlIGFzIE9iamVjdFJlZlZhbHVlXG4gICAgICBcbiAgICAgIGxldCBtb2RlbCA9IHRoaXMuY29udGV4dC5jYWNoZS5nZXRNb2RlbCh0eXBlLm1vZGVsTmFtZSlcblxuICAgICAgaWYobW9kZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbmNvdW50ZXJlZCBhbiBlcnJvciB3aGVuIHNlcmlhbGl6aW5nIGFuIE9iamVjdFJlZi4gVGhlIE1vZGVsIHJlZmVyZW5jZWQgKCR7dHlwZS5tb2RlbE5hbWV9KSBkb2VzIG5vdCBleGlzdC5gKVxuICAgICAgfVxuXG4gICAgICBpZihvYmpSZWYuaWQgPT09IFVpZEtlZXBlci5JZE5vdFNldCkge1xuICAgICAgICAgcmV0dXJuIGF3YWl0IFByb3h5T2JqZWN0LmZyb21Nb2RlbChtb2RlbCwgdGhpcy5jb250ZXh0KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250ZXh0Lm9yY2hlc3RyYXRvci5nZXRPYmplY3QobW9kZWwsIG9ialJlZi5pZClcbiAgIH1cblxuICAgYXN5bmMgZnJvbUpzKHR5cGU6IElUeXBlLCBvYmo6IGFueSk6IFByb21pc2U8SVZhbHVlPiB7XG4gICAgICB0aGlzLnZhbGlkYXRlKHR5cGUpXG5cbiAgICAgIGxldCBjYXN0T2JqID0gb2JqIGFzIFN0YWNrT2JqZWN0XG4gICAgICBsZXQgY2FzdFR5cGUgPSB0eXBlIGFzIE9iamVjdFJlZlR5cGVcbiAgICAgIGxldCBtb2RlbCA9IHRoaXMuY29udGV4dC5jYWNoZS5nZXRNb2RlbChjYXN0VHlwZS5tb2RlbE5hbWUpXG5cbiAgICAgIGlmKG1vZGVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgdHJ5aW5nIHRvIHNlcmlhbGl6ZSBhbiBlZGl0ZWQgdmFsdWUgKE9iamVjdFJlZikuIFRoZSBNb2RlbCAoJHtjYXN0VHlwZS5tb2RlbE5hbWV9KSBkb2VzIG5vdCBleGlzdC5gKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IE9iamVjdFJlZlZhbHVlKGNhc3RUeXBlLm1vZGVsTmFtZSwgY2FzdE9iai5pZCwgdGhpcy5jb250ZXh0KVxuICAgfVxufVxuIl19