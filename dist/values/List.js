"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListValue = exports.ListType = void 0;
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class ListType extends Type_1.Type {
    constructor(itemType) {
        super(Type_1.TypeSet.List);
        this.itemType = itemType;
    }
    equals(other) {
        if (other.type !== Type_1.TypeSet.List) {
            return false;
        }
        let cast = other;
        if (!this.itemType.equals(cast.itemType)) {
            return false;
        }
        return true;
    }
    async validate(obj) {
        if (!Array.isArray(obj)) {
            return { success: false, error: new Error(`Type does not match. Expected 'Array' but receieved '${typeof obj}' instead.`) };
        }
        let array = obj;
        for (let i = 0; i < array.length; ++i) {
            let valid = await this.itemType.validate(array[i]);
            if (valid.success == false) {
                return { success: false, error: new Error(`Encountered an error when validating the items in a List. Reason: ${valid.error}`) };
            }
        }
        return { success: true };
    }
}
exports.ListType = ListType;
class ListValue extends Value_1.Value {
    constructor(itemType) {
        super(new ListType(itemType));
        this.itemType = itemType;
        this.items = new Array();
    }
    [Symbol.iterator]() {
        let index = 0;
        let self = this;
        return {
            next() {
                return index == self.items.length ?
                    { value: undefined, done: true } :
                    { value: self.items[index++], done: false };
            }
        };
    }
    at(index) {
        return this.items.at(index);
    }
    clear() {
        this.items.splice(0, this.items.length);
    }
    equals(other) {
        if (!this.type.equals(other.type)) {
            return false;
        }
        let list = other;
        if (list.items.length != this.items.length) {
            return false;
        }
        for (let i = 0; i < this.items.length; ++i) {
            let thisItem = this.items[i];
            let otherItem = list.items[i];
            if (!thisItem.equals(otherItem)) {
                return false;
            }
        }
        return true;
    }
    push(...items) {
        return this.items.push(...items);
    }
    set(value) {
        if (!this.type.equals(value.type)) {
            throw new Error(`Cannot set a List Value with a different type. Encountered ${value.type.type} when setting the value of a List.`);
        }
        let list = value;
        this.items.splice(0, this.items.length);
        this.items.push(...list.items);
        return this;
    }
    async toJs() {
        let results = new Array();
        for (let i = 0; i < this.items.length; ++i) {
            results.push(await this.items[i].toJs());
        }
        return results;
    }
}
exports.ListValue = ListValue;
//# sourceMappingURL=data:application/json;base64,