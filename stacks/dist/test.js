"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
async function main() {
    let stack = _1.Stack.create();
    let ReferenceType = await stack.create.model('reference', {
        string: 'use me',
        items: [0, 1, 2, 3, 4]
    });
    let GG = await stack.create.model('gg', {
        name: {
            type: ({ string }) => string,
            value: '',
            symbols: [
                { name: 'no-re', value: { some: 'thing', is: -1, not: { anything: true } } }
            ]
        },
        int: -42,
        uint: ({ uint }) => uint(42),
        bool: false,
        list: [''],
        ref: ({ ref }) => ref(ReferenceType.name),
        string: 'Oh man!'
    });
    let ggs = [];
    for (let i = 0; i < 1000; ++i) {
        ggs.push(await GG.create());
    }
    let paged = await GG.getMany();
    console.dir(paged);
    let Team = await stack.create.model('team', {
        name: '',
        manager: 'mother'
    });
    let defaultTeam = await Team.create({
        name: 'default',
        manager: 'jefe'
    });
    let User = await stack.create.model('user', {
        name: '',
        age: 0,
        money: -100,
        team: ({ ref }) => ref('team', defaultTeam.id)
    });
    let chris = await User.create({
        name: 'chris'
    });
    console.dir(chris, { depth: null });
}
main()
    .then(() => {
    console.log(`Succeeded`);
    process.exit(0);
})
    .catch(err => {
    console.error(`Failed`);
    console.error(`Reason:\n${err}\nStack:\n${err.stack}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0JBQXNDO0FBRXRDLEtBQUssVUFBVSxJQUFJO0lBQ2hCLElBQUksS0FBSyxHQUFHLFFBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQWMxQixJQUFJLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUN2RCxNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3hCLENBQUMsQ0FBQTtJQUVGLElBQUksRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3JDLElBQUksRUFBRTtZQUNILElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU07WUFDNUIsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUU7Z0JBQ04sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO2FBQzlFO1NBQ0g7UUFDRCxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ1IsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLEVBQUUsS0FBSztRQUNYLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNWLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxTQUFTO0tBQ25CLENBQUMsQ0FBQTtJQUVGLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUNaLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDM0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0tBQzdCO0lBRUQsSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVsQixJQUFJLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUN6QyxJQUFJLEVBQUUsRUFBRTtRQUNSLE9BQU8sRUFBRSxRQUFRO0tBQ25CLENBQUMsQ0FBQTtJQUVGLElBQUksV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBVztRQUMzQyxJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxNQUFNO0tBQ2pCLENBQUMsQ0FBQTtJQUVGLElBQUksSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3pDLElBQUksRUFBRSxFQUFFO1FBQ1IsR0FBRyxFQUFFLENBQUM7UUFDTixLQUFLLEVBQUUsQ0FBQyxHQUFHO1FBQ1gsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDO0tBQ2hELENBQUMsQ0FBQTtJQUVGLElBQUksS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBVztRQUNyQyxJQUFJLEVBQUUsT0FBTztLQUNmLENBQUMsQ0FBQTtJQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7QUFDdEMsQ0FBQztBQUVELElBQUksRUFBRTtLQUNGLElBQUksQ0FBQyxHQUFHLEVBQUU7SUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbEIsQ0FBQyxDQUFDO0tBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxhQUFhLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3RELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbEIsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjaywgU3RhY2tPYmplY3QgfSBmcm9tICcuJ1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCk6IFByb21pc2U8dm9pZD4ge1xuICAgbGV0IHN0YWNrID0gU3RhY2suY3JlYXRlKClcblxuICAgdHlwZSBVc2VyVHlwZSA9IHtcbiAgICAgIG5tZTogc3RyaW5nXG4gICAgICBhZ2U6IG51bWJlclxuICAgICAgbW9uZXk6IG51bWJlclxuICAgICAgdGVhbTogVGVhbVR5cGVcbiAgIH0gJiBTdGFja09iamVjdFxuXG4gICB0eXBlIFRlYW1UeXBlID0ge1xuICAgICAgbmFtZTogc3RyaW5nXG4gICAgICBtYW5hZ2VyOiBzdHJpbmdcbiAgIH0gJiBTdGFja09iamVjdFxuXG4gICBsZXQgUmVmZXJlbmNlVHlwZSA9IGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbCgncmVmZXJlbmNlJywge1xuICAgICAgc3RyaW5nOiAndXNlIG1lJyxcbiAgICAgIGl0ZW1zOiBbMCwgMSwgMiwgMywgNF1cbiAgIH0pXG5cbiAgIGxldCBHRyA9IGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbCgnZ2cnLCB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgICB0eXBlOiAoeyBzdHJpbmcgfSkgPT4gc3RyaW5nLFxuICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgc3ltYm9sczogW1xuICAgICAgICAgICAgeyBuYW1lOiAnbm8tcmUnLCB2YWx1ZTogeyBzb21lOiAndGhpbmcnLCBpczogLTEsIG5vdDogeyBhbnl0aGluZzogdHJ1ZSB9IH0gfVxuICAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGludDogLTQyLFxuICAgICAgdWludDogKHsgdWludCB9KSA9PiB1aW50KDQyKSxcbiAgICAgIGJvb2w6IGZhbHNlLFxuICAgICAgbGlzdDogWycnXSxcbiAgICAgIHJlZjogKHsgcmVmIH0pID0+IHJlZihSZWZlcmVuY2VUeXBlLm5hbWUpLFxuICAgICAgc3RyaW5nOiAnT2ggbWFuISdcbiAgIH0pXG5cbiAgIGxldCBnZ3MgPSBbXVxuICAgZm9yKGxldCBpID0gMDsgaSA8IDEwMDA7ICsraSkge1xuICAgICAgZ2dzLnB1c2goYXdhaXQgR0cuY3JlYXRlKCkpXG4gICB9XG5cbiAgIGxldCBwYWdlZCA9IGF3YWl0IEdHLmdldE1hbnkoKVxuXG4gICBjb25zb2xlLmRpcihwYWdlZClcblxuICAgbGV0IFRlYW0gPSBhd2FpdCBzdGFjay5jcmVhdGUubW9kZWwoJ3RlYW0nLCB7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIG1hbmFnZXI6ICdtb3RoZXInXG4gICB9KVxuXG4gICBsZXQgZGVmYXVsdFRlYW0gPSBhd2FpdCBUZWFtLmNyZWF0ZTxUZWFtVHlwZT4oe1xuICAgICAgbmFtZTogJ2RlZmF1bHQnLFxuICAgICAgbWFuYWdlcjogJ2plZmUnXG4gICB9KVxuXG4gICBsZXQgVXNlciA9IGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbCgndXNlcicsIHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgYWdlOiAwLFxuICAgICAgbW9uZXk6IC0xMDAsXG4gICAgICB0ZWFtOiAoeyByZWYgfSkgPT4gcmVmKCd0ZWFtJywgZGVmYXVsdFRlYW0uaWQpXG4gICB9KVxuXG4gICBsZXQgY2hyaXMgPSBhd2FpdCBVc2VyLmNyZWF0ZTxVc2VyVHlwZT4oe1xuICAgICAgbmFtZTogJ2NocmlzJ1xuICAgfSlcblxuICAgY29uc29sZS5kaXIoY2hyaXMsIHsgZGVwdGg6IG51bGwgfSlcbn1cblxubWFpbigpXG4gICAudGhlbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgU3VjY2VlZGVkYClcbiAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgfSlcbiAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkYClcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYXNvbjpcXG4ke2Vycn1cXG5TdGFjazpcXG4ke2Vyci5zdGFja31gKVxuICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICB9KSJdfQ==