"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
class Cache {
    constructor() {
        /**
         * Key: Model name
         * Value: Model
         */
        this.cache = new Map();
        /**
         * Key: Model Name
         * Value: Object
         */
        this.objects = new Map();
    }
    getModel(name) {
        return this.cache.get(name);
    }
    getModelById(id) {
        for (let model of this.cache.values()) {
            if (model.id === id) {
                return model;
            }
        }
        return undefined;
    }
    hasId(id) {
        let model = this.getModelById(id);
        if (model) {
            return true;
        }
        for (let [_, objects] of this.objects) {
            let found = objects.find(o => o.id === id);
            if (found) {
                return true;
            }
        }
        return false;
    }
    saveModel(model) {
        this.cache.set(model.name, model);
    }
    saveObject(model, obj) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            objects = new Array();
            this.objects.set(model.name, objects);
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === undefined) {
            objects.push(obj);
            return;
        }
        objects.splice(found, 1);
        objects.push(obj);
    }
    deleteObject(model, obj) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return;
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === undefined) {
            return;
        }
        objects.splice(found, 1);
    }
    getObject(model, id) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return undefined;
        }
        return objects.find(o => o.id === id);
    }
    getObjects(model) {
        let objects = this.objects.get(model.name);
        return objects || new Array();
    }
}
exports.Cache = Cache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBZUEsTUFBYSxLQUFLO0lBYWY7UUFaQTs7O1dBR0c7UUFDSyxVQUFLLEdBQXdCLElBQUksR0FBRyxFQUFrQixDQUFBO1FBRTlEOzs7V0FHRztRQUNLLFlBQU8sR0FBd0IsSUFBSSxHQUFHLEVBQWlCLENBQUE7SUFJL0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFZO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFVO1FBQ3BCLEtBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuQyxJQUFHLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUNqQixPQUFPLEtBQUssQ0FBQTthQUNkO1NBQ0g7UUFFRCxPQUFPLFNBQVMsQ0FBQTtJQUNuQixDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQVU7UUFDYixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRWpDLElBQUcsS0FBSyxFQUFFO1lBQ1AsT0FBTyxJQUFJLENBQUE7U0FDYjtRQUVELEtBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ25DLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBRTFDLElBQUcsS0FBSyxFQUFFO2dCQUNQLE9BQU8sSUFBSSxDQUFBO2FBQ2I7U0FDSDtRQUVELE9BQU8sS0FBSyxDQUFBO0lBQ2YsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVELFVBQVUsQ0FBd0IsS0FBYSxFQUFFLEdBQU07UUFDcEQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFDLElBQUcsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQU8sQ0FBQTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1NBQ3ZDO1FBRUQsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRW5ELElBQUcsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNyQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2pCLE9BQU07U0FDUjtRQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDcEIsQ0FBQztJQUVELFlBQVksQ0FBd0IsS0FBYSxFQUFFLEdBQU07UUFDdEQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFDLElBQUcsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFNO1NBQ1I7UUFFRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkQsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE9BQU07U0FDUjtRQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFFRCxTQUFTLENBQXdCLEtBQWEsRUFBRSxFQUFVO1FBQ3ZELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUUxQyxJQUFHLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxTQUFTLENBQUE7U0FDbEI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFFRCxVQUFVLENBQXdCLEtBQWE7UUFDNUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzFDLE9BQU8sT0FBTyxJQUFJLElBQUksS0FBSyxFQUFLLENBQUE7SUFDbkMsQ0FBQztDQUNIO0FBdEdELHNCQXNHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrT2JqZWN0IH0gZnJvbSBcIi4vQm9uZGVkT2JqZWN0XCI7XG5pbXBvcnQgeyBJTW9kZWwgfSBmcm9tIFwiLi9Nb2RlbFwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNhY2hlIHtcbiAgIGdldE1vZGVsKG5hbWU6IHN0cmluZyk6IElNb2RlbCB8IHVuZGVmaW5lZFxuICAgZ2V0TW9kZWxCeUlkKGlkOiBzdHJpbmcpOiBJTW9kZWwgfCB1bmRlZmluZWRcbiAgIGhhc0lkKGlkOiBzdHJpbmcpOiBib29sZWFuXG4gICBzYXZlTW9kZWwobW9kZWw6IElNb2RlbCk6IHZvaWRcbiAgIHNhdmVPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBvYmo6IFQpOiB2b2lkXG4gICBkZWxldGVPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBvYmo6IFQpOiB2b2lkXG4gICBnZXRPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBpZDogc3RyaW5nKTogVCB8IHVuZGVmaW5lZFxuICAgZ2V0T2JqZWN0czxUIGV4dGVuZHMgU3RhY2tPYmplY3Q+KG1vZGVsOiBJTW9kZWwpOiBUW11cbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlIGltcGxlbWVudHMgSUNhY2hlIHtcbiAgIC8qKlxuICAgICogS2V5OiBNb2RlbCBuYW1lXG4gICAgKiBWYWx1ZTogTW9kZWxcbiAgICAqL1xuICAgcHJpdmF0ZSBjYWNoZTogTWFwPHN0cmluZywgSU1vZGVsPiA9IG5ldyBNYXA8c3RyaW5nLCBJTW9kZWw+KClcblxuICAgLyoqXG4gICAgKiBLZXk6IE1vZGVsIE5hbWVcbiAgICAqIFZhbHVlOiBPYmplY3RcbiAgICAqL1xuICAgcHJpdmF0ZSBvYmplY3RzOiBNYXA8c3RyaW5nLCBhbnlbXT4gPSAgbmV3IE1hcDxzdHJpbmcsIGFueVtdPigpXG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICB9XG5cbiAgIGdldE1vZGVsKG5hbWU6IHN0cmluZyk6IElNb2RlbCB8IHVuZGVmaW5lZCB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQobmFtZSlcbiAgIH1cblxuICAgZ2V0TW9kZWxCeUlkKGlkOiBzdHJpbmcpOiBJTW9kZWwgfCB1bmRlZmluZWQge1xuICAgICAgZm9yKGxldCBtb2RlbCBvZiB0aGlzLmNhY2hlLnZhbHVlcygpKSB7XG4gICAgICAgICBpZihtb2RlbC5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFxuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICB9XG5cbiAgIGhhc0lkKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIGxldCBtb2RlbCA9IHRoaXMuZ2V0TW9kZWxCeUlkKGlkKVxuXG4gICAgICBpZihtb2RlbCkge1xuICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBbXywgb2JqZWN0c10gb2YgdGhpcy5vYmplY3RzKSB7XG4gICAgICAgICBsZXQgZm91bmQgPSBvYmplY3RzLmZpbmQobyA9PiBvLmlkID09PSBpZClcblxuICAgICAgICAgaWYoZm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgfVxuXG4gICBzYXZlTW9kZWwobW9kZWw6IElNb2RlbCk6IHZvaWQge1xuICAgICAgdGhpcy5jYWNoZS5zZXQobW9kZWwubmFtZSwgbW9kZWwpXG4gICB9XG4gICBcbiAgIHNhdmVPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBvYmo6IFQpOiB2b2lkIHtcbiAgICAgIGxldCBvYmplY3RzID0gdGhpcy5vYmplY3RzLmdldChtb2RlbC5uYW1lKVxuXG4gICAgICBpZihvYmplY3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIG9iamVjdHMgPSBuZXcgQXJyYXk8YW55PigpXG4gICAgICAgICB0aGlzLm9iamVjdHMuc2V0KG1vZGVsLm5hbWUsIG9iamVjdHMpXG4gICAgICB9XG5cbiAgICAgIGxldCBmb3VuZCA9IG9iamVjdHMuZmluZEluZGV4KG8gPT4gby5pZCA9PT0gb2JqLmlkKVxuXG4gICAgICBpZihmb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICBvYmplY3RzLnB1c2gob2JqKVxuICAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIG9iamVjdHMuc3BsaWNlKGZvdW5kLCAxKVxuICAgICAgb2JqZWN0cy5wdXNoKG9iailcbiAgIH1cblxuICAgZGVsZXRlT2JqZWN0PFQgZXh0ZW5kcyBTdGFja09iamVjdD4obW9kZWw6IElNb2RlbCwgb2JqOiBUKTogdm9pZCB7XG4gICAgICBsZXQgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5nZXQobW9kZWwubmFtZSlcblxuICAgICAgaWYob2JqZWN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IGZvdW5kID0gb2JqZWN0cy5maW5kSW5kZXgobyA9PiBvLmlkID09PSBvYmouaWQpXG5cbiAgICAgIGlmKGZvdW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBvYmplY3RzLnNwbGljZShmb3VuZCwgMSlcbiAgIH1cblxuICAgZ2V0T2JqZWN0PFQgZXh0ZW5kcyBTdGFja09iamVjdD4obW9kZWw6IElNb2RlbCwgaWQ6IHN0cmluZyk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgbGV0IG9iamVjdHMgPSB0aGlzLm9iamVjdHMuZ2V0KG1vZGVsLm5hbWUpXG5cbiAgICAgIGlmKG9iamVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0cy5maW5kKG8gPT4gby5pZCA9PT0gaWQpXG4gICB9XG5cbiAgIGdldE9iamVjdHM8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsKTogVFtdIHtcbiAgICAgIGxldCBvYmplY3RzID0gdGhpcy5vYmplY3RzLmdldChtb2RlbC5uYW1lKVxuICAgICAgcmV0dXJuIG9iamVjdHMgfHwgbmV3IEFycmF5PFQ+KClcbiAgIH1cbn0iXX0=