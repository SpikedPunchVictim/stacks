"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIntSerializer = exports.UIntValue = exports.UIntType = void 0;
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class UIntType extends Type_1.BasicType {
    constructor() {
        super(Type_1.TypeSet.UInt);
    }
    async validate(obj) {
        let isValid = typeof obj === 'number';
        //@ts-ignore
        let cast = obj;
        if (cast < 0) {
            return { success: false, error: new Error(`Cannot set a negative value for a UInt type. Received value ${obj}`) };
        }
        if (isValid) {
            return { success: true };
        }
        else {
            return { success: false, error: new Error(`Type does not match. Expected 'number' and receieved '${typeof obj}'`) };
        }
    }
}
exports.UIntType = UIntType;
UIntType.Singleton = new UIntType();
class UIntValue extends Value_1.BasicValue {
    constructor(value = 0) {
        super(UIntType.Singleton, value);
    }
    clone() {
        return new UIntValue(this.value);
    }
    async deserialize(value) {
        if (typeof value !== 'number') {
            throw new Error(`Cannot deserialize a ${typeof value}. Expected a number`);
        }
        if (value < 0) {
            throw new Error(`Failed to deserialize an unsigned number ${value}. The value is expected to be positive.`);
        }
        return new UIntValue(value);
    }
}
exports.UIntValue = UIntValue;
class UIntSerializer extends ValueSerializer_1.ValueSerializer {
    constructor() {
        super(Type_1.TypeSet.UInt);
    }
    async toJs(value) {
        this.validate(value.type);
        let int = value;
        return int.value;
    }
    async fromJs(type, obj) {
        this.validate(type);
        if (typeof obj !== 'number') {
            throw new Error(`The JS object type dfoes not match what's expected when serializing`);
        }
        let uint = obj;
        if (uint < 0) {
            throw new Error(`Encountered a negative value when serializing a UINT value`);
        }
        return new UIntValue(obj);
    }
}
exports.UIntSerializer = UIntSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWx1ZXMvVUludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrRUFBK0Q7QUFDL0QsaUNBQW1FO0FBQ25FLG1DQUE2QztBQUU3QyxNQUFhLFFBQVMsU0FBUSxnQkFBaUI7SUFHNUM7UUFDRyxLQUFLLENBQUMsY0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFJLEdBQU07UUFDckIsSUFBSSxPQUFPLEdBQUcsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFBO1FBRXJDLFlBQVk7UUFDWixJQUFJLElBQUksR0FBRyxHQUFhLENBQUE7UUFFeEIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDWixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsK0RBQStELEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQTtRQUNwSCxDQUFDO1FBRUQsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNYLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUE7UUFDM0IsQ0FBQzthQUFNLENBQUM7WUFDTCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMseURBQXlELE9BQU8sR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFBO1FBQ3RILENBQUM7SUFDSixDQUFDOztBQXRCSiw0QkF1QkM7QUF0QmtCLGtCQUFTLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQTtBQXdCdkQsTUFBYSxTQUFVLFNBQVEsa0JBQWtCO0lBQzlDLFlBQVksUUFBZ0IsQ0FBQztRQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsS0FBSztRQUNGLE9BQU8sSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQVU7UUFDekIsSUFBRyxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixPQUFPLEtBQUsscUJBQXFCLENBQUMsQ0FBQTtRQUM3RSxDQUFDO1FBRUQsSUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxLQUFLLHlDQUF5QyxDQUFDLENBQUE7UUFDOUcsQ0FBQztRQUVELE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBZSxDQUFDLENBQUE7SUFDeEMsQ0FBQztDQUNIO0FBcEJELDhCQW9CQztBQUVELE1BQWEsY0FBZSxTQUFRLGlDQUFlO0lBQ2hEO1FBQ0csS0FBSyxDQUFDLGNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN0QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXpCLElBQUksR0FBRyxHQUFHLEtBQWtCLENBQUE7UUFDNUIsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFBO0lBQ25CLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQVcsRUFBRSxHQUFRO1FBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFbkIsSUFBRyxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUE7UUFDekYsQ0FBQztRQUVELElBQUksSUFBSSxHQUFHLEdBQWEsQ0FBQTtRQUV4QixJQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQTtRQUNoRixDQUFDO1FBRUQsT0FBTyxJQUFJLFNBQVMsQ0FBQyxHQUFhLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0NBQ0g7QUEzQkQsd0NBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsdWVTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZS9WYWx1ZVNlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IEJhc2ljVHlwZSwgSVR5cGUsIFR5cGVTZXQsIFZhbGlkYXRlUmVzdWx0IH0gZnJvbSBcIi4vVHlwZVwiO1xuaW1wb3J0IHsgQmFzaWNWYWx1ZSwgSVZhbHVlIH0gZnJvbSBcIi4vVmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIFVJbnRUeXBlIGV4dGVuZHMgQmFzaWNUeXBlPG51bWJlcj4ge1xuICAgc3RhdGljIHJlYWRvbmx5IFNpbmdsZXRvbjogVUludFR5cGUgPSBuZXcgVUludFR5cGUoKVxuXG4gICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKFR5cGVTZXQuVUludClcbiAgIH1cblxuICAgYXN5bmMgdmFsaWRhdGU8VD4ob2JqOiBUKTogUHJvbWlzZTxWYWxpZGF0ZVJlc3VsdD4ge1xuICAgICAgbGV0IGlzVmFsaWQgPSB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJ1xuXG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGxldCBjYXN0ID0gb2JqIGFzIG51bWJlclxuXG4gICAgICBpZiAoY2FzdCA8IDApIHtcbiAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogbmV3IEVycm9yKGBDYW5ub3Qgc2V0IGEgbmVnYXRpdmUgdmFsdWUgZm9yIGEgVUludCB0eXBlLiBSZWNlaXZlZCB2YWx1ZSAke29ian1gKSB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IG5ldyBFcnJvcihgVHlwZSBkb2VzIG5vdCBtYXRjaC4gRXhwZWN0ZWQgJ251bWJlcicgYW5kIHJlY2VpZXZlZCAnJHt0eXBlb2Ygb2JqfSdgKSB9XG4gICAgICB9XG4gICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVSW50VmFsdWUgZXh0ZW5kcyBCYXNpY1ZhbHVlPG51bWJlcj4ge1xuICAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlciA9IDApIHtcbiAgICAgIHN1cGVyKFVJbnRUeXBlLlNpbmdsZXRvbiwgdmFsdWUpXG4gICB9XG5cbiAgIGNsb25lKCk6IElWYWx1ZSB7XG4gICAgICByZXR1cm4gbmV3IFVJbnRWYWx1ZSh0aGlzLnZhbHVlKVxuICAgfVxuXG4gICBhc3luYyBkZXNlcmlhbGl6ZSh2YWx1ZTogYW55KTogUHJvbWlzZTxJVmFsdWU+IHtcbiAgICAgIGlmKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRlc2VyaWFsaXplIGEgJHt0eXBlb2YgdmFsdWV9LiBFeHBlY3RlZCBhIG51bWJlcmApXG4gICAgICB9XG5cbiAgICAgIGlmKHZhbHVlIDwgMCkge1xuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZGVzZXJpYWxpemUgYW4gdW5zaWduZWQgbnVtYmVyICR7dmFsdWV9LiBUaGUgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgcG9zaXRpdmUuYClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBVSW50VmFsdWUodmFsdWUgYXMgbnVtYmVyKVxuICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVUludFNlcmlhbGl6ZXIgZXh0ZW5kcyBWYWx1ZVNlcmlhbGl6ZXIge1xuICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcihUeXBlU2V0LlVJbnQpXG4gICB9XG5cbiAgIGFzeW5jIHRvSnModmFsdWU6IElWYWx1ZSk6IFByb21pc2U8YW55PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlKHZhbHVlLnR5cGUpXG5cbiAgICAgIGxldCBpbnQgPSB2YWx1ZSBhcyBVSW50VmFsdWVcbiAgICAgIHJldHVybiBpbnQudmFsdWVcbiAgIH1cblxuICAgYXN5bmMgZnJvbUpzKHR5cGU6IElUeXBlLCBvYmo6IGFueSk6IFByb21pc2U8SVZhbHVlPiB7XG4gICAgICB0aGlzLnZhbGlkYXRlKHR5cGUpXG5cbiAgICAgIGlmKHR5cGVvZiBvYmogIT09ICdudW1iZXInKSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBKUyBvYmplY3QgdHlwZSBkZm9lcyBub3QgbWF0Y2ggd2hhdCdzIGV4cGVjdGVkIHdoZW4gc2VyaWFsaXppbmdgKVxuICAgICAgfVxuXG4gICAgICBsZXQgdWludCA9IG9iaiBhcyBudW1iZXJcblxuICAgICAgaWYodWludCA8IDApIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRW5jb3VudGVyZWQgYSBuZWdhdGl2ZSB2YWx1ZSB3aGVuIHNlcmlhbGl6aW5nIGEgVUlOVCB2YWx1ZWApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgVUludFZhbHVlKG9iaiBhcyBudW1iZXIpXG4gICB9XG59Il19