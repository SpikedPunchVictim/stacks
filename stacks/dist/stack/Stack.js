"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const Cache_1 = require("../Cache");
const EventRouter_1 = require("../events/EventRouter");
const RequestForChange_1 = require("../events/RequestForChange");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const UidKeeper_1 = require("../UidKeeper");
const Eventing_1 = require("../utils/Eventing");
const Bool_1 = require("../values/Bool");
const Int_1 = require("../values/Int");
const List_1 = require("../values/List");
const ObjectRef_1 = require("../values/ObjectRef");
const String_1 = require("../values/String");
const Type_1 = require("../values/Type");
const UInt_1 = require("../values/UInt");
const StackContext_1 = require("./StackContext");
const StackCreate_1 = require("./StackCreate");
const StackDelete_1 = require("./StackDelete");
const StackGet_1 = require("./StackGet");
const StackUpdate_1 = require("./StackUpdate");
class Stack extends Eventing_1.CombinedEventEmitter {
    constructor(options) {
        super();
        this.uid = (options === null || options === void 0 ? void 0 : options.uidKeeper) || new UidKeeper_1.UidKeeper();
        this.cache = new Cache_1.Cache();
        this.delete = new StackDelete_1.StackDelete();
        this.router = new EventRouter_1.EventRouter();
        this.rfc = new RequestForChange_1.RequestForChangeSource(this.router);
        let serializer = new ValueSerializer_1.CompositeSerializer();
        this.serializer = serializer;
        this.context = new StackContext_1.StackContext(this, this.rfc, this.cache, this.uid, serializer);
        serializer.register(Type_1.TypeSet.Bool, new Bool_1.BoolSerializer());
        serializer.register(Type_1.TypeSet.Int, new Int_1.IntSerializer());
        serializer.register(Type_1.TypeSet.List, new List_1.ListSerializer(serializer));
        serializer.register(Type_1.TypeSet.ObjectRef, new ObjectRef_1.ObjectRefSerializer(this.context));
        serializer.register(Type_1.TypeSet.String, new String_1.StringSerializer());
        serializer.register(Type_1.TypeSet.UInt, new UInt_1.UIntSerializer());
        this.get = new StackGet_1.StackGet(this.context);
        this.create = new StackCreate_1.StackCreate(this.get, this.context);
        this.update = new StackUpdate_1.StackUpdate(this.context);
    }
    static create(options) {
        return new Stack(options);
    }
    async hasId(id) {
        return this.context.orchestrator.hasId(id);
    }
}
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RhY2svU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0NBQXdDO0FBQ3hDLHVEQUFpRTtBQUNqRSxpRUFBNEY7QUFDNUYsa0VBQW9GO0FBQ3BGLDRDQUFvRDtBQUNwRCxnREFBK0U7QUFDL0UseUNBQStDO0FBQy9DLHVDQUE2QztBQUM3Qyx5Q0FBK0M7QUFDL0MsbURBQXlEO0FBQ3pELDZDQUFtRDtBQUNuRCx5Q0FBd0M7QUFDeEMseUNBQStDO0FBQy9DLGlEQUE2QztBQUM3QywrQ0FBeUQ7QUFDekQsK0NBQXlEO0FBQ3pELHlDQUFnRDtBQUNoRCwrQ0FBeUQ7QUFxQnpELE1BQWEsS0FDVixTQUFRLCtCQUFvQjtJQWU1QixZQUFZLE9BQXNCO1FBQy9CLEtBQUssRUFBRSxDQUFBO1FBRVAsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLEtBQUksSUFBSSxxQkFBUyxFQUFFLENBQUE7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFBO1FBRXhCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUE7UUFFL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQTtRQUMvQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUkseUNBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRWxELElBQUksVUFBVSxHQUFHLElBQUkscUNBQW1CLEVBQUUsQ0FBQTtRQUMxQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtRQUU1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksMkJBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFFakYsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsSUFBSSxFQUFFLElBQUkscUJBQWMsRUFBRSxDQUFDLENBQUE7UUFDdkQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsR0FBRyxFQUFFLElBQUksbUJBQWEsRUFBRSxDQUFDLENBQUE7UUFDckQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsSUFBSSxFQUFFLElBQUkscUJBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBQ2pFLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLCtCQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQzdFLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLHlCQUFnQixFQUFFLENBQUMsQ0FBQTtRQUMzRCxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxxQkFBYyxFQUFFLENBQUMsQ0FBQTtRQUV2RCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQXNCO1FBQ2pDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0NBQ0g7QUFuREQsc0JBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGUsIElDYWNoZSB9IGZyb20gXCIuLi9DYWNoZVwiXG5pbXBvcnQgeyBFdmVudFJvdXRlciwgSUV2ZW50Um91dGVyIH0gZnJvbSBcIi4uL2V2ZW50cy9FdmVudFJvdXRlclwiXG5pbXBvcnQgeyBJUmVxdWVzdEZvckNoYW5nZVNvdXJjZSwgUmVxdWVzdEZvckNoYW5nZVNvdXJjZSB9IGZyb20gXCIuLi9ldmVudHMvUmVxdWVzdEZvckNoYW5nZVwiXG5pbXBvcnQgeyBDb21wb3NpdGVTZXJpYWxpemVyLCBJVmFsdWVTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZS9WYWx1ZVNlcmlhbGl6ZXJcIlxuaW1wb3J0IHsgSVVpZEtlZXBlciwgVWlkS2VlcGVyIH0gZnJvbSBcIi4uL1VpZEtlZXBlclwiXG5pbXBvcnQgeyBDb21iaW5lZEV2ZW50RW1pdHRlciwgSUNvbWJpbmVkRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWxzL0V2ZW50aW5nXCJcbmltcG9ydCB7IEJvb2xTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3ZhbHVlcy9Cb29sXCJcbmltcG9ydCB7IEludFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdmFsdWVzL0ludFwiXG5pbXBvcnQgeyBMaXN0U2VyaWFsaXplciB9IGZyb20gXCIuLi92YWx1ZXMvTGlzdFwiXG5pbXBvcnQgeyBPYmplY3RSZWZTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3ZhbHVlcy9PYmplY3RSZWZcIlxuaW1wb3J0IHsgU3RyaW5nU2VyaWFsaXplciB9IGZyb20gXCIuLi92YWx1ZXMvU3RyaW5nXCJcbmltcG9ydCB7IFR5cGVTZXQgfSBmcm9tIFwiLi4vdmFsdWVzL1R5cGVcIlxuaW1wb3J0IHsgVUludFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdmFsdWVzL1VJbnRcIlxuaW1wb3J0IHsgU3RhY2tDb250ZXh0IH0gZnJvbSBcIi4vU3RhY2tDb250ZXh0XCJcbmltcG9ydCB7IElTdGFja0NyZWF0ZSwgU3RhY2tDcmVhdGUgfSBmcm9tIFwiLi9TdGFja0NyZWF0ZVwiXG5pbXBvcnQgeyBJU3RhY2tEZWxldGUsIFN0YWNrRGVsZXRlIH0gZnJvbSBcIi4vU3RhY2tEZWxldGVcIlxuaW1wb3J0IHsgSVN0YWNrR2V0LCBTdGFja0dldCB9IGZyb20gXCIuL1N0YWNrR2V0XCJcbmltcG9ydCB7IElTdGFja1VwZGF0ZSwgU3RhY2tVcGRhdGUgfSBmcm9tIFwiLi9TdGFja1VwZGF0ZVwiXG5cbmV4cG9ydCB0eXBlIFN0YWNrT3B0aW9ucyA9IHtcbiAgIHVpZEtlZXBlcj86IElVaWRLZWVwZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhY2sgZXh0ZW5kcyBJQ29tYmluZWRFdmVudEVtaXR0ZXIge1xuICAgcmVhZG9ubHkgY3JlYXRlOiBJU3RhY2tDcmVhdGVcbiAgIHJlYWRvbmx5IGRlbGV0ZTogSVN0YWNrRGVsZXRlXG4gICByZWFkb25seSBnZXQ6IElTdGFja0dldFxuICAgcmVhZG9ubHkgdXBkYXRlOiBJU3RhY2tVcGRhdGVcbiAgIHJlYWRvbmx5IHNlcmlhbGl6ZXI6IElWYWx1ZVNlcmlhbGl6ZXJcblxuICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIGlmIGFuIGlkIGlzIGFscmVhZHkgaW4gdXNlLlxuICAgICogXG4gICAgKiBAcGFyYW0gaWQgVGhlIGlkXG4gICAgKi9cbiAgIGhhc0lkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFja1xuICAgZXh0ZW5kcyBDb21iaW5lZEV2ZW50RW1pdHRlciBcbiAgIGltcGxlbWVudHMgSVN0YWNrXG4gICB7XG4gICByZWFkb25seSBnZXQ6IElTdGFja0dldFxuICAgcmVhZG9ubHkgY3JlYXRlOiBJU3RhY2tDcmVhdGVcbiAgIHJlYWRvbmx5IHVwZGF0ZTogSVN0YWNrVXBkYXRlXG4gICByZWFkb25seSBkZWxldGU6IElTdGFja0RlbGV0ZVxuICAgcmVhZG9ubHkgdWlkOiBJVWlkS2VlcGVyXG4gICByZWFkb25seSBzZXJpYWxpemVyOiBJVmFsdWVTZXJpYWxpemVyXG5cbiAgIHByaXZhdGUgcmZjOiBJUmVxdWVzdEZvckNoYW5nZVNvdXJjZVxuICAgcHJpdmF0ZSByb3V0ZXI6IElFdmVudFJvdXRlclxuICAgcHJpdmF0ZSBjb250ZXh0OiBTdGFja0NvbnRleHRcbiAgIHByaXZhdGUgY2FjaGU6IElDYWNoZVxuXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zPzogU3RhY2tPcHRpb25zKSB7XG4gICAgICBzdXBlcigpXG4gICAgICBcbiAgICAgIHRoaXMudWlkID0gb3B0aW9ucz8udWlkS2VlcGVyIHx8IG5ldyBVaWRLZWVwZXIoKVxuICAgICAgdGhpcy5jYWNoZSA9IG5ldyBDYWNoZSgpXG4gICAgICBcbiAgICAgIHRoaXMuZGVsZXRlID0gbmV3IFN0YWNrRGVsZXRlKClcblxuICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgRXZlbnRSb3V0ZXIoKVxuICAgICAgdGhpcy5yZmMgPSBuZXcgUmVxdWVzdEZvckNoYW5nZVNvdXJjZSh0aGlzLnJvdXRlcilcblxuICAgICAgbGV0IHNlcmlhbGl6ZXIgPSBuZXcgQ29tcG9zaXRlU2VyaWFsaXplcigpXG4gICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyXG5cbiAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBTdGFja0NvbnRleHQodGhpcywgdGhpcy5yZmMsIHRoaXMuY2FjaGUsIHRoaXMudWlkLCBzZXJpYWxpemVyKVxuXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuQm9vbCwgbmV3IEJvb2xTZXJpYWxpemVyKCkpXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuSW50LCBuZXcgSW50U2VyaWFsaXplcigpKVxuICAgICAgc2VyaWFsaXplci5yZWdpc3RlcihUeXBlU2V0Lkxpc3QsIG5ldyBMaXN0U2VyaWFsaXplcihzZXJpYWxpemVyKSlcbiAgICAgIHNlcmlhbGl6ZXIucmVnaXN0ZXIoVHlwZVNldC5PYmplY3RSZWYsIG5ldyBPYmplY3RSZWZTZXJpYWxpemVyKHRoaXMuY29udGV4dCkpXG4gICAgICBzZXJpYWxpemVyLnJlZ2lzdGVyKFR5cGVTZXQuU3RyaW5nLCBuZXcgU3RyaW5nU2VyaWFsaXplcigpKVxuICAgICAgc2VyaWFsaXplci5yZWdpc3RlcihUeXBlU2V0LlVJbnQsIG5ldyBVSW50U2VyaWFsaXplcigpKVxuXG4gICAgICB0aGlzLmdldCA9IG5ldyBTdGFja0dldCh0aGlzLmNvbnRleHQpXG4gICAgICB0aGlzLmNyZWF0ZSA9IG5ldyBTdGFja0NyZWF0ZSh0aGlzLmdldCwgdGhpcy5jb250ZXh0KVxuICAgICAgdGhpcy51cGRhdGUgPSBuZXcgU3RhY2tVcGRhdGUodGhpcy5jb250ZXh0KVxuICAgfVxuXG4gICBzdGF0aWMgY3JlYXRlKG9wdGlvbnM/OiBTdGFja09wdGlvbnMpOiBJU3RhY2sge1xuICAgICAgcmV0dXJuIG5ldyBTdGFjayhvcHRpb25zKVxuICAgfVxuXG4gICBhc3luYyBoYXNJZChpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm9yY2hlc3RyYXRvci5oYXNJZChpZClcbiAgIH1cbn0iXX0=