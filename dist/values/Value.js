"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicValue = exports.Value = void 0;
class Value {
    constructor(type) {
        this.type = type;
    }
    equals(other) {
        if (!this.type.equals(other.type)) {
            return false;
        }
        return true;
    }
    set(value) {
        throw new Error("Method not implemented.");
    }
    toJs() {
        throw new Error("Method not implemented.");
    }
}
exports.Value = Value;
class BasicValue extends Value {
    constructor(type, value) {
        super(type);
        this._value = value;
    }
    get value() {
        return this._value;
    }
    set(value) {
        if (!this.type.equals(value.type)) {
            throw new Error(`Incompatible type encountered when trying to set a Value`);
        }
        this._value = value.value;
        return this;
    }
    async toJs() {
        return this.value;
    }
}
exports.BasicValue = BasicValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsdWVzL1ZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTZCQSxNQUFzQixLQUFLO0lBR3hCLFlBQVksSUFBVztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWE7UUFDakIsSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQTtTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDZCxDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWE7UUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUk7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNIO0FBdEJELHNCQXNCQztBQUVELE1BQXNCLFVBQWMsU0FBUSxLQUFLO0lBTzlDLFlBQVksSUFBVyxFQUFFLEtBQVE7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQVRELElBQUksS0FBSztRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUNyQixDQUFDO0lBU0QsR0FBRyxDQUFDLEtBQWE7UUFDZCxJQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQTtTQUM3RTtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUksS0FBdUIsQ0FBQyxLQUFLLENBQUE7UUFDNUMsT0FBTyxJQUFJLENBQUE7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDUCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDcEIsQ0FBQztDQUNIO0FBeEJELGdDQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUeXBlIH0gZnJvbSBcIi4vVHlwZVwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVZhbHVlIHtcbiAgIHJlYWRvbmx5IHR5cGU6IElUeXBlXG5cbiAgIC8qKlxuICAgICogRGV0ZXJtaWVucyBpZiB0aGlzIHZhbHVlIGFuZCBhbm90aGVyIHZhbHVlIGFyZSBlcXVhbFxuICAgICogXG4gICAgKiBAcGFyYW0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmVcbiAgICAqL1xuICAgZXF1YWxzKG90aGVyOiBJVmFsdWUpOiBib29sZWFuXG4gICBcbiAgIC8qKlxuICAgICogU2V0cyB0aGUgdmFsdWUgdG8gdGhlIG5ldyB2YWx1ZS5cbiAgICAqIFxuICAgICogTm90ZTogVGhpcyBpcyBub3QgYW4gYXN5bmMgZnVuY3Rpb24uIFNldHRpbmcgdmFsdWVzXG4gICAgKiBzaG91bGQgYmUgc3luY2hyb25vdXMuIEFueSB2YWxpZGF0aW9uIHNob3VsZCBiZSBkb25lXG4gICAgKiB3aGVuIHZhbGlkYXRlKCkgaXMgY2FsbGVkLlxuICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAqL1xuICAgc2V0KHZhbHVlOiBJVmFsdWUpOiBJVmFsdWVcbiAgIFxuICAgLyoqXG4gICAgKiBDb252ZXJ0cyB0aGUgVmFsdWUgaW50byBpdHMgSlMgT2JqZWN0IGNvdW50ZXJwYXJ0XG4gICAgKi9cbiAgIHRvSnMoKTogUHJvbWlzZTxhbnk+XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XG4gICByZWFkb25seSB0eXBlOiBJVHlwZTtcblxuICAgY29uc3RydWN0b3IodHlwZTogSVR5cGUpIHtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgIH1cblxuICAgZXF1YWxzKG90aGVyOiBJVmFsdWUpOiBib29sZWFuIHtcbiAgICAgIGlmKCF0aGlzLnR5cGUuZXF1YWxzKG90aGVyLnR5cGUpKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWVcbiAgIH1cblxuICAgc2V0KHZhbHVlOiBJVmFsdWUpOiBJVmFsdWUge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICB9XG5cbiAgIHRvSnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzaWNWYWx1ZTxUPiBleHRlbmRzIFZhbHVlIHtcbiAgIGdldCB2YWx1ZSgpOiBUIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZVxuICAgfVxuXG4gICBwcml2YXRlIF92YWx1ZTogVFxuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBJVHlwZSwgdmFsdWU6IFQpIHtcbiAgICAgIHN1cGVyKHR5cGUpXG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG4gICB9XG5cbiAgIHNldCh2YWx1ZTogSVZhbHVlKTogSVZhbHVlIHtcbiAgICAgIGlmKCF0aGlzLnR5cGUuZXF1YWxzKHZhbHVlLnR5cGUpKSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluY29tcGF0aWJsZSB0eXBlIGVuY291bnRlcmVkIHdoZW4gdHJ5aW5nIHRvIHNldCBhIFZhbHVlYClcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdmFsdWUgPSAodmFsdWUgYXMgQmFzaWNWYWx1ZTxUPikudmFsdWVcbiAgICAgIHJldHVybiB0aGlzXG4gICB9XG5cbiAgIGFzeW5jIHRvSnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICB9XG59Il19