"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberCollection = void 0;
const Member_1 = require("../Member");
class MemberCollection {
    constructor(model, context) {
        this.model = model;
        this.context = context;
        this.members = new Array();
    }
    get uid() {
        return this.context.uid;
    }
    [Symbol.iterator]() {
        let index = 0;
        let self = this;
        return {
            next() {
                return index == self.members.length ?
                    { value: undefined, done: true } :
                    { value: self.members[index++], done: false };
            }
        };
    }
    async add(name, value) {
        let found = this.members.find(m => m.name === name);
        let member = Member_1.Member.create({ [name]: value }, { model: this.model }, this.context);
        if (found !== undefined) {
            found.value = member[0].value;
            return;
        }
        this.members.push(...member);
    }
    async append(obj) {
        let members = Member_1.Member.create(obj, { model: this.model }, this.context);
        for (let member of members) {
            let found = this.members.find(m => m.name === member.name);
            // Replace an existing Member if the Types match
            if (found !== undefined) {
                found.value = member.value;
                continue;
            }
            this.members.push(member);
        }
    }
    async delete(name) {
        let found = this.members.findIndex(m => m.name === name);
        if (found) {
            this.members.splice(found, 1);
        }
    }
    find(predicate) {
        return this.members.find(predicate);
    }
    get(name) {
        return this.members.find(m => m.name === name);
    }
}
exports.MemberCollection = MemberCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVtYmVyQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xsZWN0aW9ucy9NZW1iZXJDb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF5RDtBQW1CekQsTUFBYSxnQkFBZ0I7SUFVMUIsWUFBWSxLQUFhLEVBQUUsT0FBc0I7UUFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBVyxDQUFBO0lBQ3RDLENBQUM7SUFWRCxJQUFJLEdBQUc7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFBO0lBQzFCLENBQUM7SUFVRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDYixJQUFJLElBQUksR0FBRyxJQUFJLENBQUE7UUFDZixPQUFPO1lBQ0osSUFBSTtnQkFDRCxPQUFPLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNsQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQ2xDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUE7WUFDbkQsQ0FBQztTQUNILENBQUE7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFZLEVBQUUsS0FBa0I7UUFDdkMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFBO1FBRW5ELElBQUksTUFBTSxHQUFHLGVBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFbEYsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtZQUM3QixPQUFNO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQXNCO1FBQ2hDLElBQUksT0FBTyxHQUFHLGVBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFckUsS0FBSSxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUUxRCxnREFBZ0Q7WUFDaEQsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUNyQixLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQzFCLFNBQVE7YUFDVjtZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzNCO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBWTtRQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUE7UUFFeEQsSUFBRyxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDL0I7SUFDSixDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQWdDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFZO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUE7SUFDakQsQ0FBQztDQUNIO0FBeEVELDRDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNZW1iZXIsIE1lbWJlciwgTWVtYmVyVmFsdWUgfSBmcm9tIFwiLi4vTWVtYmVyXCI7XG5pbXBvcnQgeyBJTW9kZWwsIE1vZGVsQ3JlYXRlUGFyYW1zIH0gZnJvbSAnLi4vTW9kZWwnXG5pbXBvcnQgeyBJU3RhY2tDb250ZXh0IH0gZnJvbSBcIi4uL3N0YWNrL1N0YWNrQ29udGV4dFwiO1xuaW1wb3J0IHsgSVVpZEtlZXBlciB9IGZyb20gXCIuLi9VaWRLZWVwZXJcIjtcblxuZXhwb3J0IHR5cGUgVmlzaXRIYW5kbGVyPFQ+ID0gKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBhcnJheTogQXJyYXk8VD4pID0+IHZvaWRcblxuZXhwb3J0IGludGVyZmFjZSBJTWVtYmVyQ29sbGVjdGlvbiB7XG4gICByZWFkb25seSBtb2RlbDogSU1vZGVsXG5cbiAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhdG9yPElNZW1iZXI+XG5cbiAgIGFkZChuYW1lOiBzdHJpbmcsIHZhbHVlOiBNZW1iZXJWYWx1ZSk6IFByb21pc2U8dm9pZD5cbiAgIGFwcGVuZChvYmo6IE1vZGVsQ3JlYXRlUGFyYW1zKTogUHJvbWlzZTx2b2lkPlxuICAgZGVsZXRlKG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD5cbiAgIGZpbmQocHJlZGljYXRlOiBWaXNpdEhhbmRsZXI8SU1lbWJlcj4pOiBJTWVtYmVyIHwgdW5kZWZpbmVkXG4gICBnZXQobmFtZTogc3RyaW5nKTogSU1lbWJlciB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY2xhc3MgTWVtYmVyQ29sbGVjdGlvbiBpbXBsZW1lbnRzIElNZW1iZXJDb2xsZWN0aW9uIHtcbiAgIHJlYWRvbmx5IG1vZGVsOiBJTW9kZWxcbiAgIHJlYWRvbmx5IGNvbnRleHQgOiBJU3RhY2tDb250ZXh0XG5cbiAgIGdldCB1aWQoKTogSVVpZEtlZXBlciB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnVpZFxuICAgfVxuXG4gICBwcml2YXRlIG1lbWJlcnM6IEFycmF5PElNZW1iZXI+XG4gICBcbiAgIGNvbnN0cnVjdG9yKG1vZGVsOiBJTW9kZWwsIGNvbnRleHQ6IElTdGFja0NvbnRleHQpIHtcbiAgICAgIHRoaXMubW9kZWwgPSBtb2RlbFxuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICAgICAgdGhpcy5tZW1iZXJzID0gbmV3IEFycmF5PElNZW1iZXI+KClcbiAgIH1cblxuICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8SU1lbWJlcj4ge1xuICAgICAgbGV0IGluZGV4ID0gMFxuICAgICAgbGV0IHNlbGYgPSB0aGlzXG4gICAgICByZXR1cm4ge1xuICAgICAgICAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxJTWVtYmVyPiB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPT0gc2VsZi5tZW1iZXJzLmxlbmd0aCA/XG4gICAgICAgICAgICAgICB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSA6XG4gICAgICAgICAgICAgICB7IHZhbHVlOiBzZWxmLm1lbWJlcnNbaW5kZXgrK10sIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cblxuICAgYXN5bmMgYWRkKG5hbWU6IHN0cmluZywgdmFsdWU6IE1lbWJlclZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBsZXQgZm91bmQgPSB0aGlzLm1lbWJlcnMuZmluZChtID0+IG0ubmFtZSA9PT0gbmFtZSlcblxuICAgICAgbGV0IG1lbWJlciA9IE1lbWJlci5jcmVhdGUoeyBbbmFtZV06IHZhbHVlIH0sIHsgbW9kZWw6IHRoaXMubW9kZWwgfSwgdGhpcy5jb250ZXh0KVxuXG4gICAgICBpZihmb3VuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICBmb3VuZC52YWx1ZSA9IG1lbWJlclswXS52YWx1ZVxuICAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBcbiAgICAgIHRoaXMubWVtYmVycy5wdXNoKC4uLm1lbWJlcilcbiAgIH1cblxuICAgYXN5bmMgYXBwZW5kKG9iajogTW9kZWxDcmVhdGVQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGxldCBtZW1iZXJzID0gTWVtYmVyLmNyZWF0ZShvYmosIHsgbW9kZWw6IHRoaXMubW9kZWwgfSwgdGhpcy5jb250ZXh0KVxuICAgICAgXG4gICAgICBmb3IobGV0IG1lbWJlciBvZiBtZW1iZXJzKSB7XG4gICAgICAgICBsZXQgZm91bmQgPSB0aGlzLm1lbWJlcnMuZmluZChtID0+IG0ubmFtZSA9PT0gbWVtYmVyLm5hbWUpXG5cbiAgICAgICAgIC8vIFJlcGxhY2UgYW4gZXhpc3RpbmcgTWVtYmVyIGlmIHRoZSBUeXBlcyBtYXRjaFxuICAgICAgICAgaWYoZm91bmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm91bmQudmFsdWUgPSBtZW1iZXIudmFsdWVcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICB9XG5cbiAgICAgICAgIHRoaXMubWVtYmVycy5wdXNoKG1lbWJlcilcbiAgICAgIH1cbiAgIH1cblxuICAgYXN5bmMgZGVsZXRlKG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgbGV0IGZvdW5kID0gdGhpcy5tZW1iZXJzLmZpbmRJbmRleChtID0+IG0ubmFtZSA9PT0gbmFtZSlcblxuICAgICAgaWYoZm91bmQpIHtcbiAgICAgICAgIHRoaXMubWVtYmVycy5zcGxpY2UoZm91bmQsIDEpXG4gICAgICB9XG4gICB9XG5cbiAgIGZpbmQocHJlZGljYXRlOiBWaXNpdEhhbmRsZXI8SU1lbWJlcj4pOiBJTWVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMuZmluZChwcmVkaWNhdGUpXG4gICB9IFxuXG4gICBnZXQobmFtZTogc3RyaW5nKTogSU1lbWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICByZXR1cm4gdGhpcy5tZW1iZXJzLmZpbmQobSA9PiBtLm5hbWUgPT09IG5hbWUpXG4gICB9XG59Il19