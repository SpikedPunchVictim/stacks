"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackUpdate = void 0;
class StackUpdate {
    get orchestrator() {
        return this.context.orchestrator;
    }
    constructor(context) {
        this.context = context;
    }
    async model(model, params) {
        if (typeof model === 'string') {
            // Note: We may have to pull this Model from a backend, and not Cache
            let found = this.context.cache.getModel(model);
            if (found === undefined) {
                throw new Error(`Encountered an issue when updating a Model. The Model ${model} does not exist`);
            }
            model = found;
        }
        await this.orchestrator.updateModel(model, params);
    }
    async object(model, object, onUpdate) {
        await this.orchestrator.updateObject(model, object, onUpdate);
    }
}
exports.StackUpdate = StackUpdate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhY2tVcGRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RhY2svU3RhY2tVcGRhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBNEJBLE1BQWEsV0FBVztJQUNyQixJQUFJLFlBQVk7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFBO0lBQ25DLENBQUM7SUFFRCxZQUFxQixPQUFzQjtRQUF0QixZQUFPLEdBQVAsT0FBTyxDQUFlO0lBRTNDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQXNCLEVBQUUsTUFBeUI7UUFDMUQsSUFBRyxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM1QixxRUFBcUU7WUFDckUsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBRTlDLElBQUcsS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO2dCQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxLQUFLLGlCQUFpQixDQUFDLENBQUE7WUFDbkcsQ0FBQztZQUVELEtBQUssR0FBRyxLQUFLLENBQUE7UUFDaEIsQ0FBQztRQUVELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3JELENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUF3QixLQUFhLEVBQUUsTUFBUyxFQUFFLFFBQWdDO1FBQzNGLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0NBQ0g7QUEzQkQsa0NBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tPYmplY3QgfSBmcm9tIFwiLi4vU3RhY2tPYmplY3RcIjtcbmltcG9ydCB7IEV4aXN0U3RhdGUgfSBmcm9tIFwiLi4vZXZlbnRzL0V2ZW50XCI7XG5pbXBvcnQgeyBJTW9kZWwgfSBmcm9tIFwiLi4vTW9kZWxcIjtcbmltcG9ydCB7IElPcmNoZXN0cmF0b3IgfSBmcm9tIFwiLi4vb3JjaGVzdHJhdG9yL09yY2hlc3RyYXRvclwiO1xuaW1wb3J0IHsgSVN0YWNrQ29udGV4dCB9IGZyb20gXCIuL1N0YWNrQ29udGV4dFwiO1xuaW1wb3J0IHsgTW9kZWxDcmVhdGVQYXJhbXMgfSBmcm9tIFwiLi5cIjtcblxuZXhwb3J0IHR5cGUgVXBkYXRlT2JqZWN0SGFuZGxlcjxUIGV4dGVuZHMgU3RhY2tPYmplY3Q+ID0gKHVwZGF0ZWQ6IFQgfCB1bmRlZmluZWQsIGV4aXN0OiBFeGlzdFN0YXRlKSA9PiBQcm9taXNlPHZvaWQ+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YWNrVXBkYXRlIHtcbiAgIC8qKlxuICAgICogVXBkYXRlcyBhIE1vZGVsXG4gICAgKiBcbiAgICAqIEBwYXJhbSBtb2RlbCBUaGUgTW9kZWwgbmFtZSBvciB0aGUgTW9kZWwgdG8gdXBkYXRlXG4gICAgKiBAcGFyYW0gcGFyYW1zIFRoZSB2YWx1ZXMgdG8gdXBkYXRlXG4gICAgKi9cbiAgIG1vZGVsKG1vZGVsOiBzdHJpbmcgfCBJTW9kZWwsIHBhcmFtczogTW9kZWxDcmVhdGVQYXJhbXMpOiBQcm9taXNlPHZvaWQ+XG5cbiAgIC8qKlxuICAgICogVXBkYXRlcyBhbiBPYmplY3RcbiAgICAqIFxuICAgICogQHBhcmFtIG1vZGVsIFRoZSBPYmplY3QncyBNb2RlbFxuICAgICogQHBhcmFtIG9iamVjdCBUaGUgT2JqZWN0IHRvIHVwZGF0ZVxuICAgICogQHBhcmFtIG9uVXBkYXRlIEhhbmRsZXIgdGhhdCBnZXRzIGNhbGxlZCBhZnRlciB0aGUgdXBkYXRlXG4gICAgKi9cbiAgIG9iamVjdDxUIGV4dGVuZHMgU3RhY2tPYmplY3Q+KG1vZGVsOiBJTW9kZWwsIG9iamVjdDogVCwgb25VcGRhdGU6IFVwZGF0ZU9iamVjdEhhbmRsZXI8VD4pOiBQcm9taXNlPHZvaWQ+XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFja1VwZGF0ZSBpbXBsZW1lbnRzIElTdGFja1VwZGF0ZSB7XG4gICBnZXQgb3JjaGVzdHJhdG9yKCk6IElPcmNoZXN0cmF0b3Ige1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5vcmNoZXN0cmF0b3JcbiAgIH1cblxuICAgY29uc3RydWN0b3IocmVhZG9ubHkgY29udGV4dDogSVN0YWNrQ29udGV4dCkge1xuXG4gICB9XG5cbiAgIGFzeW5jIG1vZGVsKG1vZGVsOiBzdHJpbmcgfCBJTW9kZWwsIHBhcmFtczogTW9kZWxDcmVhdGVQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGlmKHR5cGVvZiBtb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgIC8vIE5vdGU6IFdlIG1heSBoYXZlIHRvIHB1bGwgdGhpcyBNb2RlbCBmcm9tIGEgYmFja2VuZCwgYW5kIG5vdCBDYWNoZVxuICAgICAgICAgbGV0IGZvdW5kID0gdGhpcy5jb250ZXh0LmNhY2hlLmdldE1vZGVsKG1vZGVsKVxuXG4gICAgICAgICBpZihmb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVuY291bnRlcmVkIGFuIGlzc3VlIHdoZW4gdXBkYXRpbmcgYSBNb2RlbC4gVGhlIE1vZGVsICR7bW9kZWx9IGRvZXMgbm90IGV4aXN0YClcbiAgICAgICAgIH1cblxuICAgICAgICAgbW9kZWwgPSBmb3VuZFxuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLm9yY2hlc3RyYXRvci51cGRhdGVNb2RlbChtb2RlbCwgcGFyYW1zKVxuICAgfVxuXG4gICBhc3luYyBvYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBvYmplY3Q6IFQsIG9uVXBkYXRlOiBVcGRhdGVPYmplY3RIYW5kbGVyPFQ+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICBhd2FpdCB0aGlzLm9yY2hlc3RyYXRvci51cGRhdGVPYmplY3QobW9kZWwsIG9iamVjdCwgb25VcGRhdGUpXG4gICB9XG59Il19