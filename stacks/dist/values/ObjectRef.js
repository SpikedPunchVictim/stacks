"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectRefSerializer = exports.ObjectRefValue = exports.ObjectRefType = void 0;
const ProxyObject_1 = require("../ProxyObject");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const StackObject_1 = require("../StackObject");
const UidKeeper_1 = require("../UidKeeper");
const Type_1 = require("./Type");
const Value_1 = require("./Value");
class ObjectRefType extends Type_1.Type {
    constructor(modelName, context) {
        super(Type_1.TypeSet.ObjectRef);
        this.modelName = modelName;
        this.context = context;
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    get info() {
        return {
            type: this.type,
            modelName: this.modelName
        };
    }
    equals(other) {
        if (other.type !== Type_1.TypeSet.ObjectRef) {
            return false;
        }
        let cast = other;
        if (cast.modelName.toLowerCase() !== this.modelName.toLowerCase()) {
            return false;
        }
        return true;
    }
    async validate(obj) {
        if (typeof obj !== 'object') {
            return { success: false, error: new Error(`Type does not match. Expected 'object' for a reference type but receieved '${typeof obj}'`) };
        }
        if (!(0, StackObject_1.isStackObject)(obj)) {
            return { success: false, error: new Error(`The Object is expected to be a StackObject.`) };
        }
        return { success: true };
    }
}
exports.ObjectRefType = ObjectRefType;
class ObjectRefValue extends Value_1.Value {
    constructor(modelName, id, context) {
        super(new ObjectRefType(modelName, context));
        this.id = id;
    }
    clone() {
        let refType = this.type;
        return new ObjectRefValue(refType.modelName, this.id, refType.context);
    }
}
exports.ObjectRefValue = ObjectRefValue;
class ObjectRefSerializer extends ValueSerializer_1.ValueSerializer {
    constructor(context) {
        super(Type_1.TypeSet.ObjectRef);
        this.context = context;
    }
    async toJs(value) {
        this.validate(value.type);
        let type = value.type;
        let objRef = value;
        let model = this.context.cache.getModel(type.modelName);
        if (model === undefined) {
            throw new Error(`Encountered an error when serializing an ObjectRef. The Model referenced (${type.modelName}) does not exist.`);
        }
        if (objRef.id === UidKeeper_1.UidKeeper.IdNotSet) {
            return await ProxyObject_1.ProxyObject.fromModel(model, this.context);
        }
        return await this.context.orchestrator.getObject(model, objRef.id);
    }
    async fromJs(type, obj) {
        this.validate(type);
        let castObj = obj;
        let castType = type;
        let model = this.context.cache.getModel(castType.modelName);
        if (model === undefined) {
            throw new Error(`Error encountered while trying to serialize an edited value (ObjectRef). The Model (${castType.modelName}) does not exist.`);
        }
        return new ObjectRefValue(castType.modelName, castObj.id, this.context);
    }
}
exports.ObjectRefSerializer = ObjectRefSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0UmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZhbHVlcy9PYmplY3RSZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsZ0RBQTZDO0FBQzdDLGtFQUErRDtBQUUvRCxnREFBNEQ7QUFDNUQsNENBQXlDO0FBQ3pDLGlDQUF3RTtBQUN4RSxtQ0FBd0M7QUFFeEMsTUFBYSxhQUFjLFNBQVEsV0FBSTtJQVlwQyxZQUFxQixTQUFpQixFQUFXLE9BQXNCO1FBQ3BFLEtBQUssQ0FBQyxjQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFETixjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVcsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUV2RSxDQUFDO0lBYkQsSUFBSSxZQUFZO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQTtJQUNuQyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0wsT0FBTztZQUNKLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztTQUMzQixDQUFBO0lBQ0osQ0FBQztJQU1ELE1BQU0sQ0FBQyxLQUFZO1FBQ2hCLElBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxjQUFPLENBQUMsU0FBUyxFQUFFO1lBQ2xDLE9BQU8sS0FBSyxDQUFBO1NBQ2Q7UUFFRCxJQUFJLElBQUksR0FBRyxLQUFzQixDQUFBO1FBRWpDLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQy9ELE9BQU8sS0FBSyxDQUFBO1NBQ2Q7UUFFRCxPQUFPLElBQUksQ0FBQTtJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFJLEdBQU07UUFDckIsSUFBRyxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDekIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxF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b20gXCIuLi9vcmNoZXN0cmF0b3IvT3JjaGVzdHJhdG9yXCI7XG5pbXBvcnQgeyBQcm94eU9iamVjdCB9IGZyb20gXCIuLi9Qcm94eU9iamVjdFwiO1xuaW1wb3J0IHsgVmFsdWVTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZS9WYWx1ZVNlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IElTdGFja0NvbnRleHQgfSBmcm9tIFwiLi4vc3RhY2svU3RhY2tDb250ZXh0XCI7XG5pbXBvcnQgeyBpc1N0YWNrT2JqZWN0LCBTdGFja09iamVjdCB9IGZyb20gXCIuLi9TdGFja09iamVjdFwiO1xuaW1wb3J0IHsgVWlkS2VlcGVyIH0gZnJvbSBcIi4uL1VpZEtlZXBlclwiO1xuaW1wb3J0IHsgSVR5cGUsIFR5cGUsIFR5cGVJbmZvLCBUeXBlU2V0LCBWYWxpZGF0ZVJlc3VsdCB9IGZyb20gXCIuL1R5cGVcIjtcbmltcG9ydCB7IElWYWx1ZSwgVmFsdWUgfSBmcm9tIFwiLi9WYWx1ZVwiO1xuXG5leHBvcnQgY2xhc3MgT2JqZWN0UmVmVHlwZSBleHRlbmRzIFR5cGUge1xuICAgZ2V0IG9yY2hlc3RyYXRvcigpOiBJT3JjaGVzdHJhdG9yIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQub3JjaGVzdHJhdG9yXG4gICB9XG5cbiAgIGdldCBpbmZvKCk6IFR5cGVJbmZvIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICBtb2RlbE5hbWU6IHRoaXMubW9kZWxOYW1lXG4gICAgICB9XG4gICB9XG5cbiAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IG1vZGVsTmFtZTogc3RyaW5nLCByZWFkb25seSBjb250ZXh0OiBJU3RhY2tDb250ZXh0KSB7XG4gICAgICBzdXBlcihUeXBlU2V0Lk9iamVjdFJlZilcbiAgIH1cblxuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgaWYob3RoZXIudHlwZSAhPT0gVHlwZVNldC5PYmplY3RSZWYpIHtcbiAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBsZXQgY2FzdCA9IG90aGVyIGFzIE9iamVjdFJlZlR5cGVcblxuICAgICAgaWYoY2FzdC5tb2RlbE5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdGhpcy5tb2RlbE5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlXG4gICB9XG5cbiAgIGFzeW5jIHZhbGlkYXRlPFQ+KG9iajogVCk6IFByb21pc2U8VmFsaWRhdGVSZXN1bHQ+IHtcbiAgICAgIGlmKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IG5ldyBFcnJvcihgVHlwZSBkb2VzIG5vdCBtYXRjaC4gRXhwZWN0ZWQgJ29iamVjdCcgZm9yIGEgcmVmZXJlbmNlIHR5cGUgYnV0IHJlY2VpZXZlZCAnJHt0eXBlb2Ygb2JqfSdgKX1cbiAgICAgIH1cblxuICAgICAgaWYoIWlzU3RhY2tPYmplY3Qob2JqKSkge1xuICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBuZXcgRXJyb3IoYFRoZSBPYmplY3QgaXMgZXhwZWN0ZWQgdG8gYmUgYSBTdGFja09iamVjdC5gKX1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPYmplY3RSZWZWYWx1ZSBleHRlbmRzIFZhbHVlIHtcbiAgIGlkOiBzdHJpbmdcblxuICAgY29uc3RydWN0b3IobW9kZWxOYW1lOiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNvbnRleHQ6IElTdGFja0NvbnRleHQpIHtcbiAgICAgIHN1cGVyKG5ldyBPYmplY3RSZWZUeXBlKG1vZGVsTmFtZSwgY29udGV4dCkpXG4gICAgICB0aGlzLmlkID0gaWRcbiAgIH1cblxuICAgY2xvbmUoKTogSVZhbHVlIHtcbiAgICAgIGxldCByZWZUeXBlID0gdGhpcy50eXBlIGFzIE9iamVjdFJlZlR5cGVcbiAgICAgIHJldHVybiBuZXcgT2JqZWN0UmVmVmFsdWUocmVmVHlwZS5tb2RlbE5hbWUsIHRoaXMuaWQsIHJlZlR5cGUuY29udGV4dClcbiAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9iamVjdFJlZlNlcmlhbGl6ZXIgZXh0ZW5kcyBWYWx1ZVNlcmlhbGl6ZXIge1xuICAgY29uc3RydWN0b3IocmVhZG9ubHkgY29udGV4dDogSVN0YWNrQ29udGV4dCkge1xuICAgICAgc3VwZXIoVHlwZVNldC5PYmplY3RSZWYpXG4gICB9XG5cbiAgIGFzeW5jIHRvSnModmFsdWU6IElWYWx1ZSk6IFByb21pc2U8YW55PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlKHZhbHVlLnR5cGUpXG5cbiAgICAgIGxldCB0eXBlID0gdmFsdWUudHlwZSBhcyBPYmplY3RSZWZUeXBlXG4gICAgICBsZXQgb2JqUmVmID0gdmFsdWUgYXMgT2JqZWN0UmVmVmFsdWVcbiAgICAgIFxuICAgICAgbGV0IG1vZGVsID0gdGhpcy5jb250ZXh0LmNhY2hlLmdldE1vZGVsKHR5cGUubW9kZWxOYW1lKVxuXG4gICAgICBpZihtb2RlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVuY291bnRlcmVkIGFuIGVycm9yIHdoZW4gc2VyaWFsaXppbmcgYW4gT2JqZWN0UmVmLiBUaGUgTW9kZWwgcmVmZXJlbmNlZCAoJHt0eXBlLm1vZGVsTmFtZX0pIGRvZXMgbm90IGV4aXN0LmApXG4gICAgICB9XG5cbiAgICAgIGlmKG9ialJlZi5pZCA9PT0gVWlkS2VlcGVyLklkTm90U2V0KSB7XG4gICAgICAgICByZXR1cm4gYXdhaXQgUHJveHlPYmplY3QuZnJvbU1vZGVsKG1vZGVsLCB0aGlzLmNvbnRleHQpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRleHQub3JjaGVzdHJhdG9yLmdldE9iamVjdChtb2RlbCwgb2JqUmVmLmlkKVxuICAgfVxuXG4gICBhc3luYyBmcm9tSnModHlwZTogSVR5cGUsIG9iajogYW55KTogUHJvbWlzZTxJVmFsdWU+IHtcbiAgICAgIHRoaXMudmFsaWRhdGUodHlwZSlcblxuICAgICAgbGV0IGNhc3RPYmogPSBvYmogYXMgU3RhY2tPYmplY3RcbiAgICAgIGxldCBjYXN0VHlwZSA9IHR5cGUgYXMgT2JqZWN0UmVmVHlwZVxuICAgICAgbGV0IG1vZGVsID0gdGhpcy5jb250ZXh0LmNhY2hlLmdldE1vZGVsKGNhc3RUeXBlLm1vZGVsTmFtZSlcblxuICAgICAgaWYobW9kZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBlbmNvdW50ZXJlZCB3aGlsZSB0cnlpbmcgdG8gc2VyaWFsaXplIGFuIGVkaXRlZCB2YWx1ZSAoT2JqZWN0UmVmKS4gVGhlIE1vZGVsICgke2Nhc3RUeXBlLm1vZGVsTmFtZX0pIGRvZXMgbm90IGV4aXN0LmApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgT2JqZWN0UmVmVmFsdWUoY2FzdFR5cGUubW9kZWxOYW1lLCBjYXN0T2JqLmlkLCB0aGlzLmNvbnRleHQpXG4gICB9XG59XG4iXX0=