"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueSource = void 0;
const Bool_1 = require("./Bool");
const Int_1 = require("./Int");
const List_1 = require("./List");
const ObjectRef_1 = require("./ObjectRef");
const String_1 = require("./String");
const UInt_1 = require("./UInt");
class ValueSource {
    constructor(context) {
        this.context = context;
    }
    static resolve(source, context, createContext) {
        let values = new ValueSource(context);
        if (typeof source === 'function') {
            let bindSource = {};
            if (createContext != null) {
                bindSource = createContext;
            }
            let value = source.bind(bindSource, values)();
            if (!Array.isArray(value)) {
                return value;
            }
            let cast = value;
            if (cast.length == 0) {
                throw new Error(`Encountered an error when determining the Type of a value. Received an empty Array. Array notation can only be used if it contains at least 1 element.`);
            }
            let firstType = cast[0].type;
            let allTypesEqual = cast.every(it => firstType.equals(it.type));
            if (!allTypesEqual) {
                throw new Error(`Encountered an error when determinging the Type of a value. When specifying a List Type using Array notation, all Types in the Array must be the same.`);
            }
            let list = new List_1.ListValue(firstType);
            list.push(...cast);
            return list;
        }
        else if (typeof source === 'string') {
            return values.string(source);
        }
        else if (typeof source === 'number') {
            let cast = source;
            if (cast >= 0) {
                return values.uint(source);
            }
            else {
                return values.int(source);
            }
        }
        else if (typeof source === 'boolean') {
            return values.bool(source);
        }
        else {
            throw new Error(`Unsupported source when resolving a type: ${typeof source}`);
        }
    }
    bool(value = true) {
        return new Bool_1.BoolValue(value);
    }
    int(value = 0) {
        return new Int_1.IntValue(value);
    }
    list(itemType) {
        return new List_1.ListValue(itemType);
    }
    // TODO: Add ref(model: IModel) version
    ref(modelName, id) {
        return new ObjectRef_1.ObjectRefValue(modelName, id, this.context);
    }
    string(value = '') {
        return new String_1.StringValue(value);
    }
    uint(value = 0) {
        if (value < 0) {
            throw new Error(`When creating a UInt value, the number must not be negative`);
        }
        return new UInt_1.UIntValue(value);
    }
}
exports.ValueSource = ValueSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVTb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsdWVzL1ZhbHVlU291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLGlDQUFtQztBQUNuQywrQkFBaUM7QUFDakMsaUNBQW1DO0FBQ25DLDJDQUE2QztBQUM3QyxxQ0FBdUM7QUFFdkMsaUNBQW1DO0FBcUJuQyxNQUFhLFdBQVc7SUFFckIsWUFBcUIsT0FBc0I7UUFBdEIsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUUzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FDWCxNQUF5QixFQUN6QixPQUFzQixFQUN0QixhQUFrQztRQUVsQyxJQUFJLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUVyQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtZQUMvQixJQUFJLFVBQVUsR0FBSSxFQUFFLENBQUE7WUFFcEIsSUFBRyxhQUFhLElBQUksSUFBSSxFQUFFO2dCQUN2QixVQUFVLEdBQUcsYUFBYSxDQUFBO2FBQzVCO1lBRUQsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQTtZQUU3QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxLQUFLLENBQUE7YUFDZDtZQUVELElBQUksSUFBSSxHQUFHLEtBQXNCLENBQUE7WUFFakMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3SkFBd0osQ0FBQyxDQUFBO2FBQzNLO1lBRUQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtZQUU1QixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUUvRCxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLHdKQUF3SixDQUFDLENBQUE7YUFDM0s7WUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLGdCQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1lBRWxCLE9BQU8sSUFBSSxDQUFBO1NBQ2I7YUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUNwQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDOUI7YUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUNwQyxJQUFJLElBQUksR0FBRyxNQUFnQixDQUFBO1lBRTNCLElBQUcsSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDWCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDNUI7aUJBQU07Z0JBQ0osT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQzNCO1NBQ0g7YUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUNyQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDNUI7YUFBTTtZQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLE9BQU8sTUFBTSxFQUFFLENBQUMsQ0FBQTtTQUMvRTtJQUNKLENBQUM7SUFFRCxJQUFJLENBQUMsUUFBaUIsSUFBSTtRQUN2QixPQUFPLElBQUksZ0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QixDQUFDO0lBRUQsR0FBRyxDQUFDLFFBQWdCLENBQUM7UUFDbEIsT0FBTyxJQUFJLGNBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsSUFBSSxDQUFDLFFBQWU7UUFDakIsT0FBTyxJQUFJLGdCQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxHQUFHLENBQUMsU0FBaUIsRUFBRSxFQUFVO1FBQzlCLE9BQU8sSUFBSSwwQkFBYyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBZ0IsRUFBRTtRQUN0QixPQUFPLElBQUksb0JBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsSUFBSSxDQUFDLFFBQWdCLENBQUM7UUFDbkIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFBO1NBQ2hGO1FBRUQsT0FBTyxJQUFJLGdCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDOUIsQ0FBQztDQUNIO0FBekZELGtDQXlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGVsQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuLi9Nb2RlbFwiO1xuaW1wb3J0IHsgSVN0YWNrQ29udGV4dCB9IGZyb20gXCIuLi9zdGFjay9TdGFja0NvbnRleHRcIjtcbmltcG9ydCB7IEJvb2xWYWx1ZSB9IGZyb20gXCIuL0Jvb2xcIjtcbmltcG9ydCB7IEludFZhbHVlIH0gZnJvbSBcIi4vSW50XCI7XG5pbXBvcnQgeyBMaXN0VmFsdWUgfSBmcm9tIFwiLi9MaXN0XCI7XG5pbXBvcnQgeyBPYmplY3RSZWZWYWx1ZSB9IGZyb20gXCIuL09iamVjdFJlZlwiO1xuaW1wb3J0IHsgU3RyaW5nVmFsdWUgfSBmcm9tIFwiLi9TdHJpbmdcIjtcbmltcG9ydCB7IElUeXBlIH0gZnJvbSBcIi4vVHlwZVwiO1xuaW1wb3J0IHsgVUludFZhbHVlIH0gZnJvbSBcIi4vVUludFwiO1xuaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSBcIi4vVmFsdWVcIjtcblxuZXhwb3J0IHR5cGUgQ3JlYXRlVmFsdWVIYW5kbGVyID0gKHZhbHVlOiBWYWx1ZVNvdXJjZSkgPT4gSVZhbHVlXG5leHBvcnQgdHlwZSBWYWx1ZUNyZWF0ZVBhcmFtcyA9IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBDcmVhdGVWYWx1ZUhhbmRsZXJcblxuZXhwb3J0IHR5cGUgTm9ybWFsaXplZFR5cGUgPSB7XG4gICBba2V5OiBzdHJpbmddOiBJVHlwZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZVNvdXJjZSB7XG4gICBib29sKHZhbHVlOiBib29sZWFuKTogQm9vbFZhbHVlXG4gICBpbnQodmFsdWU6IG51bWJlcik6IEludFZhbHVlXG4gICBsaXN0KGl0ZW1UeXBlOiBJVHlwZSk6IExpc3RWYWx1ZVxuXG4gICAvLyBUT0RPOiBBZGQgcmVmKG1vZGVsOiBJTW9kZWwpIHZlcnNpb25cbiAgIHJlZihtb2RlbE5hbWU6IHN0cmluZywgaWQ6IHN0cmluZyk6IE9iamVjdFJlZlZhbHVlXG4gICBzdHJpbmcodmFsdWU6IHN0cmluZyk6IFN0cmluZ1ZhbHVlXG4gICB1aW50KHZhbHVlOiBudW1iZXIpOiBVSW50VmFsdWVcbn1cblxuZXhwb3J0IGNsYXNzIFZhbHVlU291cmNlIGltcGxlbWVudHMgSVZhbHVlU291cmNlIHtcblxuICAgY29uc3RydWN0b3IocmVhZG9ubHkgY29udGV4dDogSVN0YWNrQ29udGV4dCkge1xuXG4gICB9XG5cbiAgIHN0YXRpYyByZXNvbHZlKFxuICAgICAgc291cmNlOiBWYWx1ZUNyZWF0ZVBhcmFtcyxcbiAgICAgIGNvbnRleHQ6IElTdGFja0NvbnRleHQsXG4gICAgICBjcmVhdGVDb250ZXh0PzogTW9kZWxDcmVhdGVDb250ZXh0XG4gICApOiBJVmFsdWUge1xuICAgICAgbGV0IHZhbHVlcyA9IG5ldyBWYWx1ZVNvdXJjZShjb250ZXh0KVxuXG4gICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgbGV0IGJpbmRTb3VyY2UgPSAge31cblxuICAgICAgICAgaWYoY3JlYXRlQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBiaW5kU291cmNlID0gY3JlYXRlQ29udGV4dFxuICAgICAgICAgfVxuXG4gICAgICAgICBsZXQgdmFsdWUgPSBzb3VyY2UuYmluZChiaW5kU291cmNlLCB2YWx1ZXMpKClcblxuICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgICB9XG5cbiAgICAgICAgIGxldCBjYXN0ID0gdmFsdWUgYXMgQXJyYXk8SVZhbHVlPlxuXG4gICAgICAgICBpZiAoY2FzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbmNvdW50ZXJlZCBhbiBlcnJvciB3aGVuIGRldGVybWluaW5nIHRoZSBUeXBlIG9mIGEgdmFsdWUuIFJlY2VpdmVkIGFuIGVtcHR5IEFycmF5LiBBcnJheSBub3RhdGlvbiBjYW4gb25seSBiZSB1c2VkIGlmIGl0IGNvbnRhaW5zIGF0IGxlYXN0IDEgZWxlbWVudC5gKVxuICAgICAgICAgfVxuXG4gICAgICAgICBsZXQgZmlyc3RUeXBlID0gY2FzdFswXS50eXBlXG5cbiAgICAgICAgIGxldCBhbGxUeXBlc0VxdWFsID0gY2FzdC5ldmVyeShpdCA9PiBmaXJzdFR5cGUuZXF1YWxzKGl0LnR5cGUpKVxuXG4gICAgICAgICBpZiAoIWFsbFR5cGVzRXF1YWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRW5jb3VudGVyZWQgYW4gZXJyb3Igd2hlbiBkZXRlcm1pbmdpbmcgdGhlIFR5cGUgb2YgYSB2YWx1ZS4gV2hlbiBzcGVjaWZ5aW5nIGEgTGlzdCBUeXBlIHVzaW5nIEFycmF5IG5vdGF0aW9uLCBhbGwgVHlwZXMgaW4gdGhlIEFycmF5IG11c3QgYmUgdGhlIHNhbWUuYClcbiAgICAgICAgIH1cblxuICAgICAgICAgbGV0IGxpc3QgPSBuZXcgTGlzdFZhbHVlKGZpcnN0VHlwZSlcbiAgICAgICAgIGxpc3QucHVzaCguLi5jYXN0KVxuXG4gICAgICAgICByZXR1cm4gbGlzdFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgcmV0dXJuIHZhbHVlcy5zdHJpbmcoc291cmNlKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgbGV0IGNhc3QgPSBzb3VyY2UgYXMgbnVtYmVyXG5cbiAgICAgICAgIGlmKGNhc3QgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy51aW50KHNvdXJjZSlcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLmludChzb3VyY2UpXG4gICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdib29sZWFuJykge1xuICAgICAgICAgcmV0dXJuIHZhbHVlcy5ib29sKHNvdXJjZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHNvdXJjZSB3aGVuIHJlc29sdmluZyBhIHR5cGU6ICR7dHlwZW9mIHNvdXJjZX1gKVxuICAgICAgfVxuICAgfVxuXG4gICBib29sKHZhbHVlOiBib29sZWFuID0gdHJ1ZSk6IEJvb2xWYWx1ZSB7XG4gICAgICByZXR1cm4gbmV3IEJvb2xWYWx1ZSh2YWx1ZSlcbiAgIH1cblxuICAgaW50KHZhbHVlOiBudW1iZXIgPSAwKTogSW50VmFsdWUge1xuICAgICAgcmV0dXJuIG5ldyBJbnRWYWx1ZSh2YWx1ZSlcbiAgIH1cblxuICAgbGlzdChpdGVtVHlwZTogSVR5cGUpOiBMaXN0VmFsdWUge1xuICAgICAgcmV0dXJuIG5ldyBMaXN0VmFsdWUoaXRlbVR5cGUpXG4gICB9XG5cbiAgIC8vIFRPRE86IEFkZCByZWYobW9kZWw6IElNb2RlbCkgdmVyc2lvblxuICAgcmVmKG1vZGVsTmFtZTogc3RyaW5nLCBpZDogc3RyaW5nKTogT2JqZWN0UmVmVmFsdWUge1xuICAgICAgcmV0dXJuIG5ldyBPYmplY3RSZWZWYWx1ZShtb2RlbE5hbWUsIGlkLCB0aGlzLmNvbnRleHQpXG4gICB9XG5cbiAgIHN0cmluZyh2YWx1ZTogc3RyaW5nID0gJycpOiBTdHJpbmdWYWx1ZSB7XG4gICAgICByZXR1cm4gbmV3IFN0cmluZ1ZhbHVlKHZhbHVlKVxuICAgfVxuXG4gICB1aW50KHZhbHVlOiBudW1iZXIgPSAwKTogVUludFZhbHVlIHtcbiAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2hlbiBjcmVhdGluZyBhIFVJbnQgdmFsdWUsIHRoZSBudW1iZXIgbXVzdCBub3QgYmUgbmVnYXRpdmVgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFVJbnRWYWx1ZSh2YWx1ZSlcbiAgIH1cbn0iXX0=