"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldCollection = void 0;
class FieldCollection {
    constructor(fields) {
        this.fields = fields;
    }
    [Symbol.iterator]() {
        let index = 0;
        let self = this;
        return {
            next() {
                return index == self.fields.length ?
                    { value: undefined, done: true } :
                    { value: self.fields[index++], done: false };
            }
        };
    }
    get(name) {
        return this.fields.find(f => f.name === name);
    }
    async set(name, value) {
        let field = this.fields.find(f => f.name === name);
        if (field === undefined) {
            throw new Error(`No Field with the name ${name} exists`);
        }
        field.value;
    }
    async switch(handler) {
        for (let field of this.fields) {
            let fn = handler[field.value.type.type];
            if (fn) {
                await fn(field);
            }
        }
    }
}
exports.FieldCollection = FieldCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmllbGRDb2xsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbGxlY3Rpb25zL0ZpZWxkQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF3QkEsTUFBYSxlQUFlO0lBQ3pCLFlBQTZCLE1BQWdCO1FBQWhCLFdBQU0sR0FBTixNQUFNLENBQVU7SUFFN0MsQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNkLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLE9BQU87WUFDSixJQUFJO2dCQUNELE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2pDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDbEMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQTtZQUNsRCxDQUFDO1NBQ0gsQ0FBQTtJQUNKLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBWTtRQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLElBQVksRUFBRSxLQUF3QjtRQUM3QyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUE7UUFFbEQsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLElBQUksU0FBUyxDQUFDLENBQUE7U0FDMUQ7UUFFRCxLQUFLLENBQUMsS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBMkI7UUFDckMsS0FBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzNCLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN2QyxJQUFHLEVBQUUsRUFBRTtnQkFDSixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUNqQjtTQUNIO0lBQ0osQ0FBQztDQUNIO0FBdkNELDBDQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElGaWVsZCB9IGZyb20gXCIuLi9GaWVsZFwiO1xuaW1wb3J0IHsgVmFsdWVDcmVhdGVQYXJhbXMgfSBmcm9tIFwiLi4vdmFsdWVzL1ZhbHVlU291cmNlXCI7XG5cbi8qKlxuICogRWFjaCBQcm9wZXJ0eSBpcyBvbmUgb2YgdGhlIFR5ZXBTZXQgZW51bXNcbiAqL1xuZXhwb3J0IHR5cGUgRmllbGRTd2l0Y2hIYW5kbGVyID0ge1xuICAgW2tleTogc3RyaW5nXTogKGZpZWxkOiBJRmllbGQpID0+IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmllbGRDb2xsZWN0aW9uIHtcbiAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhdG9yPElGaWVsZD5cblxuICAgLyoqXG4gICAgKiBVdGlsaXR5IG1ldGhvZCB0byBwcm9jZXNzIGVhY2ggRmllbGQgYmFzZWQgb24gdGhlaXIgVHlwZVxuICAgICogXG4gICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgSGFuZGxlciBmb3IgdGhlIFZhbHVlU2V0IHR5cGVzXG4gICAgKi9cbiAgIHN3aXRjaChoYW5kbGVyOiBGaWVsZFN3aXRjaEhhbmRsZXIpOiBQcm9taXNlPHZvaWQ+XG5cbiAgIGdldChuYW1lOiBzdHJpbmcpOiBJRmllbGQgfCB1bmRlZmluZWRcbiAgIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZUNyZWF0ZVBhcmFtcyk6IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGNsYXNzIEZpZWxkQ29sbGVjdGlvbiBpbXBsZW1lbnRzIElGaWVsZENvbGxlY3Rpb24ge1xuICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBmaWVsZHM6IElGaWVsZFtdKSB7XG5cbiAgIH1cblxuICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8SUZpZWxkPiB7XG4gICAgICBsZXQgaW5kZXggPSAwXG4gICAgICBsZXQgc2VsZiA9IHRoaXNcbiAgICAgIHJldHVybiB7XG4gICAgICAgICBuZXh0KCk6IEl0ZXJhdG9yUmVzdWx0PElGaWVsZD4ge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09IHNlbGYuZmllbGRzLmxlbmd0aCA/XG4gICAgICAgICAgICAgICB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSA6XG4gICAgICAgICAgICAgICB7IHZhbHVlOiBzZWxmLmZpZWxkc1tpbmRleCsrXSwgZG9uZTogZmFsc2UgfVxuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuXG4gICBnZXQobmFtZTogc3RyaW5nKTogSUZpZWxkIHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiB0aGlzLmZpZWxkcy5maW5kKGYgPT4gZi5uYW1lID09PSBuYW1lKVxuICAgfVxuXG4gICBhc3luYyBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogVmFsdWVDcmVhdGVQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGxldCBmaWVsZCA9IHRoaXMuZmllbGRzLmZpbmQoZiA9PiBmLm5hbWUgPT09IG5hbWUpXG5cbiAgICAgIGlmKGZpZWxkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gRmllbGQgd2l0aCB0aGUgbmFtZSAke25hbWV9IGV4aXN0c2ApXG4gICAgICB9XG5cbiAgICAgIGZpZWxkLnZhbHVlXG4gICB9XG5cbiAgIGFzeW5jIHN3aXRjaChoYW5kbGVyOiBGaWVsZFN3aXRjaEhhbmRsZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGZvcihsZXQgZmllbGQgb2YgdGhpcy5maWVsZHMpIHtcbiAgICAgICAgIGxldCBmbiA9IGhhbmRsZXJbZmllbGQudmFsdWUudHlwZS50eXBlXVxuICAgICAgICAgaWYoZm4pIHtcbiAgICAgICAgICAgIGF3YWl0IGZuKGZpZWxkKVxuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxufSJdfQ==