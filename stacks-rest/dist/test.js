"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stacks_1 = require("@spikedpunch/stacks");
const Rest_1 = require("./Rest");
//import got from 'got'
//import got from 'got'
async function main() {
    await new Promise(async (resolve, reject) => {
        let stack = stacks_1.Stack.create();
        let rest = new Rest_1.StacksRest(stack);
        // type UserType = {
        //    name: string
        //    age: number
        //    money: number
        // } & StackObject
        // type TeamType = {
        //    name: string
        //    manager: string
        // } & StackObject
        let Team = await stack.create.model('team', {
            name: '',
            manager: 'dave'
        });
        let ReferenceType = await stack.create.model('reference', {
            string: 'use me',
            items: [0, 1, 2, 3, 4],
            ref: ({ ref }) => ref(Team.name)
        });
        let GG = await stack.create.model('gg', {
            id: '',
            name: {
                type: ({ string }) => string,
                value: '',
                symbols: [
                    { name: 'no-re', value: { some: 'thing', is: -1, not: { anything: true } } }
                ]
            },
            int: -42,
            uint: ({ uint }) => uint(42),
            bool: false,
            list: [''],
            ref: ({ ref }) => ref(ReferenceType.name),
            string: 'Oh man!'
        });
        for (let i = 0; i < 100; ++i) {
            let temp = await GG.create();
            await GG.save(temp);
        }
        //-- Default
        rest.get('/user', { model: GG, many: ['name', 'int'] });
        rest.put('/user', { model: GG });
        rest.post('/user', { model: GG });
        rest.del('/user', { model: GG });
        let server = rest.listen(4200, () => console.log(`Server up on port 4200`));
        server.on('close', resolve);
    });
    // let res = await got("http://localhost:4200/user")
    // console.dir(res)
}
main()
    .then(() => {
    console.log(`Succeeded`);
    //process.exit(0)
})
    .catch(err => {
    console.error(`Failed`);
    console.error(`Reason:\n${err}\nStack:\n${err.stack}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0RBQTJDO0FBQzNDLGlDQUFtQztBQUNuQyx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBRXZCLEtBQUssVUFBVSxJQUFJO0lBRWhCLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN6QyxJQUFJLEtBQUssR0FBRyxjQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDMUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxpQkFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRWhDLG9CQUFvQjtRQUNwQixrQkFBa0I7UUFDbEIsaUJBQWlCO1FBQ2pCLG1CQUFtQjtRQUNuQixrQkFBa0I7UUFFbEIsb0JBQW9CO1FBQ3BCLGtCQUFrQjtRQUNsQixxQkFBcUI7UUFDckIsa0JBQWtCO1FBRWxCLElBQUksSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pDLElBQUksRUFBRSxFQUFFO1lBQ1IsT0FBTyxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFBO1FBRUYsSUFBSSxhQUFhLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDdkQsTUFBTSxFQUFFLFFBQVE7WUFDaEIsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QixHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNsQyxDQUFDLENBQUE7UUFFRixJQUFJLEVBQUUsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNyQyxFQUFFLEVBQUUsRUFBRTtZQUNOLElBQUksRUFBRTtnQkFDSCxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNO2dCQUM1QixLQUFLLEVBQUUsRUFBRTtnQkFDVCxPQUFPLEVBQUU7b0JBQ04sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO2lCQUM5RTthQUNIO1lBQ0QsR0FBRyxFQUFFLENBQUMsRUFBRTtZQUNSLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDNUIsSUFBSSxFQUFFLEtBQUs7WUFDWCxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDVixHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztZQUN6QyxNQUFNLEVBQUUsU0FBUztTQUNuQixDQUFDLENBQUE7UUFFRixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDM0IsSUFBSSxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDNUIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3RCLENBQUM7UUFFRCxZQUFZO1FBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7UUFFM0UsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFHRixvREFBb0Q7SUFDcEQsbUJBQW1CO0FBQ3RCLENBQUM7QUFFRCxJQUFJLEVBQUU7S0FDRixJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN4QixpQkFBaUI7QUFDcEIsQ0FBQyxDQUFDO0tBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxhQUFhLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3RELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbEIsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjayB9IGZyb20gJ0BzcGlrZWRwdW5jaC9zdGFja3MnXG5pbXBvcnQgeyBTdGFja3NSZXN0IH0gZnJvbSAnLi9SZXN0J1xuLy9pbXBvcnQgZ290IGZyb20gJ2dvdCdcbi8vaW1wb3J0IGdvdCBmcm9tICdnb3QnXG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKTogUHJvbWlzZTx2b2lkPiB7XG5cbiAgIGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBzdGFjayA9IFN0YWNrLmNyZWF0ZSgpXG4gICAgICBsZXQgcmVzdCA9IG5ldyBTdGFja3NSZXN0KHN0YWNrKVxuICAgXG4gICAgICAvLyB0eXBlIFVzZXJUeXBlID0ge1xuICAgICAgLy8gICAgbmFtZTogc3RyaW5nXG4gICAgICAvLyAgICBhZ2U6IG51bWJlclxuICAgICAgLy8gICAgbW9uZXk6IG51bWJlclxuICAgICAgLy8gfSAmIFN0YWNrT2JqZWN0XG4gICBcbiAgICAgIC8vIHR5cGUgVGVhbVR5cGUgPSB7XG4gICAgICAvLyAgICBuYW1lOiBzdHJpbmdcbiAgICAgIC8vICAgIG1hbmFnZXI6IHN0cmluZ1xuICAgICAgLy8gfSAmIFN0YWNrT2JqZWN0XG4gICBcbiAgICAgIGxldCBUZWFtID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCd0ZWFtJywge1xuICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICBtYW5hZ2VyOiAnZGF2ZSdcbiAgICAgIH0pXG4gICBcbiAgICAgIGxldCBSZWZlcmVuY2VUeXBlID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCdyZWZlcmVuY2UnLCB7XG4gICAgICAgICBzdHJpbmc6ICd1c2UgbWUnLFxuICAgICAgICAgaXRlbXM6IFswLCAxLCAyLCAzLCA0XSxcbiAgICAgICAgIHJlZjogKHsgcmVmIH0pID0+IHJlZihUZWFtLm5hbWUpXG4gICAgICB9KVxuICAgXG4gICAgICBsZXQgR0cgPSBhd2FpdCBzdGFjay5jcmVhdGUubW9kZWwoJ2dnJywge1xuICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgdHlwZTogKHsgc3RyaW5nIH0pID0+IHN0cmluZyxcbiAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgIHN5bWJvbHM6IFtcbiAgICAgICAgICAgICAgIHsgbmFtZTogJ25vLXJlJywgdmFsdWU6IHsgc29tZTogJ3RoaW5nJywgaXM6IC0xLCBub3Q6IHsgYW55dGhpbmc6IHRydWUgfSB9IH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgIH0sXG4gICAgICAgICBpbnQ6IC00MixcbiAgICAgICAgIHVpbnQ6ICh7IHVpbnQgfSkgPT4gdWludCg0MiksXG4gICAgICAgICBib29sOiBmYWxzZSxcbiAgICAgICAgIGxpc3Q6IFsnJ10sXG4gICAgICAgICByZWY6ICh7IHJlZiB9KSA9PiByZWYoUmVmZXJlbmNlVHlwZS5uYW1lKSxcbiAgICAgICAgIHN0cmluZzogJ09oIG1hbiEnXG4gICAgICB9KVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTAwOyArK2kpIHtcbiAgICAgICAgIGxldCB0ZW1wID0gYXdhaXQgR0cuY3JlYXRlKClcbiAgICAgICAgIGF3YWl0IEdHLnNhdmUodGVtcClcbiAgICAgIH1cbiAgIFxuICAgICAgLy8tLSBEZWZhdWx0XG4gICAgICByZXN0LmdldCgnL3VzZXInLCB7IG1vZGVsOiBHRywgbWFueTogWyduYW1lJywgJ2ludCddIH0pXG4gICAgICByZXN0LnB1dCgnL3VzZXInLCB7IG1vZGVsOiBHRyB9KVxuICAgICAgcmVzdC5wb3N0KCcvdXNlcicsIHsgbW9kZWw6IEdHIH0pXG4gICAgICByZXN0LmRlbCgnL3VzZXInLCB7IG1vZGVsOiBHRyB9KVxuICAgXG4gICAgICBsZXQgc2VydmVyID0gcmVzdC5saXN0ZW4oNDIwMCwgKCkgPT4gY29uc29sZS5sb2coYFNlcnZlciB1cCBvbiBwb3J0IDQyMDBgKSlcbiAgIFxuICAgICAgc2VydmVyLm9uKCdjbG9zZScsIHJlc29sdmUpICBcbiAgIH0pXG5cblxuICAgLy8gbGV0IHJlcyA9IGF3YWl0IGdvdChcImh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC91c2VyXCIpXG4gICAvLyBjb25zb2xlLmRpcihyZXMpXG59XG5cbm1haW4oKVxuICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYFN1Y2NlZWRlZGApXG4gICAgICAvL3Byb2Nlc3MuZXhpdCgwKVxuICAgfSlcbiAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkYClcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYXNvbjpcXG4ke2Vycn1cXG5TdGFjazpcXG4ke2Vyci5zdGFja31gKVxuICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICB9KSJdfQ==