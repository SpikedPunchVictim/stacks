"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
class Cache {
    constructor() {
        /**
         * Key: Model name
         * Value: Model
         */
        this.models = new Map();
        /**
         * Key: Model Name
         * Value: Object
         */
        this.objects = new Map();
    }
    deleteModel(name) {
        this.models.delete(name);
    }
    getModel(name) {
        return this.models.get(name);
    }
    getModelById(id) {
        for (let model of this.models.values()) {
            if (model.id === id) {
                return model;
            }
        }
        return undefined;
    }
    hasId(id) {
        let model = this.getModelById(id);
        if (model) {
            return true;
        }
        for (let [_, objects] of this.objects) {
            let found = objects.find(o => o.id === id);
            if (found) {
                return true;
            }
        }
        return false;
    }
    saveModel(model) {
        this.models.set(model.name, model);
    }
    saveObject(model, obj) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            objects = new Array();
            this.objects.set(model.name, objects);
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === undefined) {
            objects.push(obj);
            return;
        }
        objects.splice(found, 1);
        objects.push(obj);
    }
    deleteObject(model, obj) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return;
        }
        let found = objects.findIndex(o => o.id === obj.id);
        if (found === undefined) {
            return;
        }
        objects.splice(found, 1);
    }
    getObject(model, id) {
        let objects = this.objects.get(model.name);
        if (objects === undefined) {
            return undefined;
        }
        return objects.find(o => o.id === id);
    }
    getObjects(model) {
        let objects = this.objects.get(model.name);
        return objects || new Array();
    }
}
exports.Cache = Cache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBZ0JBLE1BQWEsS0FBSztJQWFmO1FBWkE7OztXQUdHO1FBQ0ssV0FBTSxHQUF3QixJQUFJLEdBQUcsRUFBa0IsQ0FBQTtRQUUvRDs7O1dBR0c7UUFDSyxZQUFPLEdBQXdCLElBQUksR0FBRyxFQUFpQixDQUFBO0lBSS9ELENBQUM7SUFFRCxXQUFXLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMzQixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRUQsWUFBWSxDQUFDLEVBQVU7UUFDcEIsS0FBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3BDLElBQUcsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFBO2FBQ2Q7U0FDSDtRQUVELE9BQU8sU0FBUyxDQUFBO0lBQ25CLENBQUM7SUFFRCxLQUFLLENBQUMsRUFBVTtRQUNiLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFakMsSUFBRyxLQUFLLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQTtTQUNiO1FBRUQsS0FBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbkMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7WUFFMUMsSUFBRyxLQUFLLEVBQUU7Z0JBQ1AsT0FBTyxJQUFJLENBQUE7YUFDYjtTQUNIO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRUQsVUFBVSxDQUF3QixLQUFhLEVBQUUsR0FBTTtRQUNwRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFMUMsSUFBRyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBTyxDQUFBO1lBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7U0FDdkM7UUFFRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkQsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDakIsT0FBTTtTQUNSO1FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRUQsWUFBWSxDQUF3QixLQUFhLEVBQUUsR0FBTTtRQUN0RCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFMUMsSUFBRyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU07U0FDUjtRQUVELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVuRCxJQUFHLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDckIsT0FBTTtTQUNSO1FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVELFNBQVMsQ0FBd0IsS0FBYSxFQUFFLEVBQVU7UUFDdkQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFDLElBQUcsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLFNBQVMsQ0FBQTtTQUNsQjtRQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVELFVBQVUsQ0FBd0IsS0FBYTtRQUM1QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUMsT0FBTyxPQUFPLElBQUksSUFBSSxLQUFLLEVBQUssQ0FBQTtJQUNuQyxDQUFDO0NBQ0g7QUExR0Qsc0JBMEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tPYmplY3QgfSBmcm9tIFwiLi9TdGFja09iamVjdFwiO1xuaW1wb3J0IHsgSU1vZGVsIH0gZnJvbSBcIi4vTW9kZWxcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIElDYWNoZSB7XG4gICBkZWxldGVNb2RlbChuYW1lOiBzdHJpbmcpOiB2b2lkXG4gICBnZXRNb2RlbChuYW1lOiBzdHJpbmcpOiBJTW9kZWwgfCB1bmRlZmluZWRcbiAgIGdldE1vZGVsQnlJZChpZDogc3RyaW5nKTogSU1vZGVsIHwgdW5kZWZpbmVkXG4gICBoYXNJZChpZDogc3RyaW5nKTogYm9vbGVhblxuICAgc2F2ZU1vZGVsKG1vZGVsOiBJTW9kZWwpOiB2b2lkXG4gICBzYXZlT2JqZWN0PFQgZXh0ZW5kcyBTdGFja09iamVjdD4obW9kZWw6IElNb2RlbCwgb2JqOiBUKTogdm9pZFxuICAgZGVsZXRlT2JqZWN0PFQgZXh0ZW5kcyBTdGFja09iamVjdD4obW9kZWw6IElNb2RlbCwgb2JqOiBUKTogdm9pZFxuICAgZ2V0T2JqZWN0PFQgZXh0ZW5kcyBTdGFja09iamVjdD4obW9kZWw6IElNb2RlbCwgaWQ6IHN0cmluZyk6IFQgfCB1bmRlZmluZWRcbiAgIGdldE9iamVjdHM8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsKTogVFtdXG59XG5cbmV4cG9ydCBjbGFzcyBDYWNoZSBpbXBsZW1lbnRzIElDYWNoZSB7XG4gICAvKipcbiAgICAqIEtleTogTW9kZWwgbmFtZVxuICAgICogVmFsdWU6IE1vZGVsXG4gICAgKi9cbiAgIHByaXZhdGUgbW9kZWxzOiBNYXA8c3RyaW5nLCBJTW9kZWw+ID0gbmV3IE1hcDxzdHJpbmcsIElNb2RlbD4oKVxuXG4gICAvKipcbiAgICAqIEtleTogTW9kZWwgTmFtZVxuICAgICogVmFsdWU6IE9iamVjdFxuICAgICovXG4gICBwcml2YXRlIG9iamVjdHM6IE1hcDxzdHJpbmcsIGFueVtdPiA9ICBuZXcgTWFwPHN0cmluZywgYW55W10+KClcblxuICAgY29uc3RydWN0b3IoKSB7XG5cbiAgIH1cblxuICAgZGVsZXRlTW9kZWwobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICB0aGlzLm1vZGVscy5kZWxldGUobmFtZSlcbiAgIH1cblxuICAgZ2V0TW9kZWwobmFtZTogc3RyaW5nKTogSU1vZGVsIHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVscy5nZXQobmFtZSlcbiAgIH1cblxuICAgZ2V0TW9kZWxCeUlkKGlkOiBzdHJpbmcpOiBJTW9kZWwgfCB1bmRlZmluZWQge1xuICAgICAgZm9yKGxldCBtb2RlbCBvZiB0aGlzLm1vZGVscy52YWx1ZXMoKSkge1xuICAgICAgICAgaWYobW9kZWwuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWxcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgfVxuXG4gICBoYXNJZChpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICBsZXQgbW9kZWwgPSB0aGlzLmdldE1vZGVsQnlJZChpZClcblxuICAgICAgaWYobW9kZWwpIHtcbiAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgW18sIG9iamVjdHNdIG9mIHRoaXMub2JqZWN0cykge1xuICAgICAgICAgbGV0IGZvdW5kID0gb2JqZWN0cy5maW5kKG8gPT4gby5pZCA9PT0gaWQpXG5cbiAgICAgICAgIGlmKGZvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgIH1cblxuICAgc2F2ZU1vZGVsKG1vZGVsOiBJTW9kZWwpOiB2b2lkIHtcbiAgICAgIHRoaXMubW9kZWxzLnNldChtb2RlbC5uYW1lLCBtb2RlbClcbiAgIH1cbiAgIFxuICAgc2F2ZU9iamVjdDxUIGV4dGVuZHMgU3RhY2tPYmplY3Q+KG1vZGVsOiBJTW9kZWwsIG9iajogVCk6IHZvaWQge1xuICAgICAgbGV0IG9iamVjdHMgPSB0aGlzLm9iamVjdHMuZ2V0KG1vZGVsLm5hbWUpXG5cbiAgICAgIGlmKG9iamVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgb2JqZWN0cyA9IG5ldyBBcnJheTxhbnk+KClcbiAgICAgICAgIHRoaXMub2JqZWN0cy5zZXQobW9kZWwubmFtZSwgb2JqZWN0cylcbiAgICAgIH1cblxuICAgICAgbGV0IGZvdW5kID0gb2JqZWN0cy5maW5kSW5kZXgobyA9PiBvLmlkID09PSBvYmouaWQpXG5cbiAgICAgIGlmKGZvdW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIG9iamVjdHMucHVzaChvYmopXG4gICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgb2JqZWN0cy5zcGxpY2UoZm91bmQsIDEpXG4gICAgICBvYmplY3RzLnB1c2gob2JqKVxuICAgfVxuXG4gICBkZWxldGVPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBvYmo6IFQpOiB2b2lkIHtcbiAgICAgIGxldCBvYmplY3RzID0gdGhpcy5vYmplY3RzLmdldChtb2RlbC5uYW1lKVxuXG4gICAgICBpZihvYmplY3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBsZXQgZm91bmQgPSBvYmplY3RzLmZpbmRJbmRleChvID0+IG8uaWQgPT09IG9iai5pZClcblxuICAgICAgaWYoZm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIG9iamVjdHMuc3BsaWNlKGZvdW5kLCAxKVxuICAgfVxuXG4gICBnZXRPYmplY3Q8VCBleHRlbmRzIFN0YWNrT2JqZWN0Pihtb2RlbDogSU1vZGVsLCBpZDogc3RyaW5nKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICBsZXQgb2JqZWN0cyA9IHRoaXMub2JqZWN0cy5nZXQobW9kZWwubmFtZSlcblxuICAgICAgaWYob2JqZWN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3RzLmZpbmQobyA9PiBvLmlkID09PSBpZClcbiAgIH1cblxuICAgZ2V0T2JqZWN0czxUIGV4dGVuZHMgU3RhY2tPYmplY3Q+KG1vZGVsOiBJTW9kZWwpOiBUW10ge1xuICAgICAgbGV0IG9iamVjdHMgPSB0aGlzLm9iamVjdHMuZ2V0KG1vZGVsLm5hbWUpXG4gICAgICByZXR1cm4gb2JqZWN0cyB8fCBuZXcgQXJyYXk8VD4oKVxuICAgfVxufSJdfQ==