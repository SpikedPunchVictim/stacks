"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
const MemberCollection_1 = require("./collections/MemberCollection");
const Type_1 = require("./values/Type");
const ValueSource_1 = require("./values/ValueSource");
class Model {
    constructor(name, id, context) {
        this.name = name;
        this.id = id;
        this.context = context;
        this.members = new MemberCollection_1.MemberCollection(this, this.context);
    }
    get orchestrator() {
        return this.context.orchestrator;
    }
    async append(obj) {
        return this.members.append(obj);
    }
    async commit(obj) {
        await this.orchestrator.commitObject(this, obj);
    }
    async create(obj) {
        let result = {};
        for (let key of Object.keys(obj)) {
            let value = ValueSource_1.ValueSource.resolve(obj[key], this.context);
            result[key] = value.toJs();
        }
        for (let member of this.members) {
            if (result[member.name] != null) {
                continue;
            }
            result[member.name] = await member.value.toJs();
        }
        return result;
    }
    async delete(object) {
        await this.orchestrator.deleteObject(this, object);
    }
    async get(id) {
        return await this.orchestrator.getObject(this, id);
    }
    async getMany(req) {
        return this.getMany(req);
    }
    async toJs() {
        let result = {
            id: this.id
        };
        for (let member of this.members) {
            result[member.name] = await member.value.toJs();
        }
        //@ts-ignore
        return result;
    }
    async validate(obj) {
        let report = new Type_1.ValidationReport();
        for (let key of Object.keys(obj)) {
            let member = this.members.get(key);
            if (member === undefined) {
                report.addError(new Error(`Object contains a key that does not exist int he Model: ${key}`));
                continue;
            }
            let result = await member.type.validate(obj[key]);
            if (result.success === false && result.error) {
                report.addError(result.error);
            }
        }
        return report;
    }
}
exports.Model = Model;
//# sourceMappingURL=data:application/json;base64,