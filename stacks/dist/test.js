"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
async function main() {
    let stack = _1.Stack.create();
    let ReferenceType = await stack.create.model('reference', {
        string: 'use me',
        items: [0, 1, 2, 3, 4]
    });
    let GG = await stack.create.model('gg', {
        name: {
            type: ({ string }) => string,
            value: '',
            symbols: [
                { name: 'no-re', value: { some: 'thing', is: -1, not: { anything: true } } }
            ]
        },
        int: -42,
        uint: ({ uint }) => uint(42),
        bool: false,
        list: [''],
        ref: ({ ref }) => ref(ReferenceType.name),
        string: 'Oh man!'
    });
    let ggs = [];
    for (let i = 0; i < 1000; ++i) {
        ggs.push(await GG.create());
    }
    let Team = await stack.create.model('team', {
        name: '',
        manager: 'mother'
    });
    let defaultTeam = await Team.create({
        name: 'default',
        manager: 'jefe'
    });
    let User = await stack.create.model('user', {
        name: '',
        age: 0,
        money: -100,
        team: ({ ref }) => ref('team', defaultTeam.id)
    });
    let chris = await User.create({
        name: 'chris'
    });
    console.dir(chris, { depth: null });
}
main()
    .then(() => {
    console.log(`Succeeded`);
    process.exit(0);
})
    .catch(err => {
    console.error(`Failed`);
    console.error(`Reason:\n${err}\nStack:\n${err.stack}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0JBQXNDO0FBRXRDLEtBQUssVUFBVSxJQUFJO0lBQ2hCLElBQUksS0FBSyxHQUFHLFFBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQWMxQixJQUFJLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUN2RCxNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3hCLENBQUMsQ0FBQTtJQUVGLElBQUksRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3JDLElBQUksRUFBRTtZQUNILElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU07WUFDNUIsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUU7Z0JBQ04sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO2FBQzlFO1NBQ0g7UUFDRCxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ1IsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLEVBQUUsS0FBSztRQUNYLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNWLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxTQUFTO0tBQ25CLENBQUMsQ0FBQTtJQUVGLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUNaLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDM0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0tBQzdCO0lBRUQsSUFBSSxJQUFJLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDekMsSUFBSSxFQUFFLEVBQUU7UUFDUixPQUFPLEVBQUUsUUFBUTtLQUNuQixDQUFDLENBQUE7SUFFRixJQUFJLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQVc7UUFDM0MsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsTUFBTTtLQUNqQixDQUFDLENBQUE7SUFFRixJQUFJLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUN6QyxJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsRUFBRSxDQUFDO1FBQ04sS0FBSyxFQUFFLENBQUMsR0FBRztRQUNYLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQztLQUNoRCxDQUFDLENBQUE7SUFFRixJQUFJLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQVc7UUFDckMsSUFBSSxFQUFFLE9BQU87S0FDZixDQUFDLENBQUE7SUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ3RDLENBQUM7QUFFRCxJQUFJLEVBQUU7S0FDRixJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLENBQUMsQ0FBQztLQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsYUFBYSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUN0RCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2ssIFN0YWNrT2JqZWN0IH0gZnJvbSAnLidcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgIGxldCBzdGFjayA9IFN0YWNrLmNyZWF0ZSgpXG5cbiAgIHR5cGUgVXNlclR5cGUgPSB7XG4gICAgICBubWU6IHN0cmluZ1xuICAgICAgYWdlOiBudW1iZXJcbiAgICAgIG1vbmV5OiBudW1iZXJcbiAgICAgIHRlYW06IFRlYW1UeXBlXG4gICB9ICYgU3RhY2tPYmplY3RcblxuICAgdHlwZSBUZWFtVHlwZSA9IHtcbiAgICAgIG5hbWU6IHN0cmluZ1xuICAgICAgbWFuYWdlcjogc3RyaW5nXG4gICB9ICYgU3RhY2tPYmplY3RcblxuICAgbGV0IFJlZmVyZW5jZVR5cGUgPSBhd2FpdCBzdGFjay5jcmVhdGUubW9kZWwoJ3JlZmVyZW5jZScsIHtcbiAgICAgIHN0cmluZzogJ3VzZSBtZScsXG4gICAgICBpdGVtczogWzAsIDEsIDIsIDMsIDRdXG4gICB9KVxuXG4gICBsZXQgR0cgPSBhd2FpdCBzdGFjay5jcmVhdGUubW9kZWwoJ2dnJywge1xuICAgICAgbmFtZToge1xuICAgICAgICAgdHlwZTogKHsgc3RyaW5nIH0pID0+IHN0cmluZyxcbiAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgIHN5bWJvbHM6IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ25vLXJlJywgdmFsdWU6IHsgc29tZTogJ3RoaW5nJywgaXM6IC0xLCBub3Q6IHsgYW55dGhpbmc6IHRydWUgfSB9IH1cbiAgICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBpbnQ6IC00MixcbiAgICAgIHVpbnQ6ICh7IHVpbnQgfSkgPT4gdWludCg0MiksXG4gICAgICBib29sOiBmYWxzZSxcbiAgICAgIGxpc3Q6IFsnJ10sXG4gICAgICByZWY6ICh7IHJlZiB9KSA9PiByZWYoUmVmZXJlbmNlVHlwZS5uYW1lKSxcbiAgICAgIHN0cmluZzogJ09oIG1hbiEnXG4gICB9KVxuXG4gICBsZXQgZ2dzID0gW11cbiAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDAwOyArK2kpIHtcbiAgICAgIGdncy5wdXNoKGF3YWl0IEdHLmNyZWF0ZSgpKVxuICAgfVxuXG4gICBsZXQgVGVhbSA9IGF3YWl0IHN0YWNrLmNyZWF0ZS5tb2RlbCgndGVhbScsIHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgbWFuYWdlcjogJ21vdGhlcidcbiAgIH0pXG5cbiAgIGxldCBkZWZhdWx0VGVhbSA9IGF3YWl0IFRlYW0uY3JlYXRlPFRlYW1UeXBlPih7XG4gICAgICBuYW1lOiAnZGVmYXVsdCcsXG4gICAgICBtYW5hZ2VyOiAnamVmZSdcbiAgIH0pXG5cbiAgIGxldCBVc2VyID0gYXdhaXQgc3RhY2suY3JlYXRlLm1vZGVsKCd1c2VyJywge1xuICAgICAgbmFtZTogJycsXG4gICAgICBhZ2U6IDAsXG4gICAgICBtb25leTogLTEwMCxcbiAgICAgIHRlYW06ICh7IHJlZiB9KSA9PiByZWYoJ3RlYW0nLCBkZWZhdWx0VGVhbS5pZClcbiAgIH0pXG5cbiAgIGxldCBjaHJpcyA9IGF3YWl0IFVzZXIuY3JlYXRlPFVzZXJUeXBlPih7XG4gICAgICBuYW1lOiAnY2hyaXMnXG4gICB9KVxuXG4gICBjb25zb2xlLmRpcihjaHJpcywgeyBkZXB0aDogbnVsbCB9KVxufVxuXG5tYWluKClcbiAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBTdWNjZWVkZWRgKVxuICAgICAgcHJvY2Vzcy5leGl0KDApXG4gICB9KVxuICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWRgKVxuICAgICAgY29uc29sZS5lcnJvcihgUmVhc29uOlxcbiR7ZXJyfVxcblN0YWNrOlxcbiR7ZXJyLnN0YWNrfWApXG4gICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgIH0pIl19