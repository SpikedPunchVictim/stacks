"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicValue = exports.Value = void 0;
class Value {
    constructor(type) {
        this.type = type;
    }
    clone() {
        throw new Error(`clone() not implemented`);
    }
    equals(other) {
        if (!this.type.equals(other.type)) {
            return false;
        }
        return true;
    }
    set(value) {
        throw new Error("set() not implemented.");
    }
}
exports.Value = Value;
class BasicValue extends Value {
    get value() {
        return this._value;
    }
    constructor(type, value) {
        super(type);
        this._value = value;
    }
    clone() {
        throw new Error(`clone() not implemented`);
    }
    set(value) {
        if (!this.type.equals(value.type)) {
            throw new Error(`Incompatible type encountered when trying to set a Value`);
        }
        this._value = value.value;
        return this;
    }
}
exports.BasicValue = BasicValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsdWVzL1ZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTRCQSxNQUFzQixLQUFLO0lBR3hCLFlBQVksSUFBVztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsS0FBSztRQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWE7UUFDakIsSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sS0FBSyxDQUFBO1FBQ2YsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2QsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFhO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSDtBQXRCRCxzQkFzQkM7QUFFRCxNQUFzQixVQUFjLFNBQVEsS0FBSztJQUM5QyxJQUFJLEtBQUs7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDckIsQ0FBQztJQUlELFlBQVksSUFBVyxFQUFFLEtBQVE7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVELEtBQUs7UUFDRixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFhO1FBQ2QsSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQTtRQUM5RSxDQUFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBSSxLQUF1QixDQUFDLEtBQUssQ0FBQTtRQUM1QyxPQUFPLElBQUksQ0FBQTtJQUNkLENBQUM7Q0FDSDtBQXhCRCxnQ0F3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVHlwZSB9IGZyb20gXCIuL1R5cGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJVmFsdWUge1xuICAgcmVhZG9ubHkgdHlwZTogSVR5cGVcblxuICAgLyoqXG4gICAgKiBNYWtlcyBhIGNsb25lIG9mIHRoaXMgVmFsdWVcbiAgICAqL1xuICAgY2xvbmUoKTogSVZhbHVlXG5cbiAgIC8qKlxuICAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIHZhbHVlIGFuZCBhbm90aGVyIHZhbHVlIGFyZSBlcXVhbFxuICAgICogXG4gICAgKiBAcGFyYW0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmVcbiAgICAqL1xuICAgZXF1YWxzKG90aGVyOiBJVmFsdWUpOiBib29sZWFuXG4gICBcbiAgIC8qKlxuICAgICogU2V0cyB0aGUgdmFsdWUgdG8gdGhlIG5ldyB2YWx1ZS5cbiAgICAqIFxuICAgICogTm90ZTogVGhpcyBpcyBub3QgYW4gYXN5bmMgZnVuY3Rpb24uIFNldHRpbmcgdmFsdWVzXG4gICAgKiBzaG91bGQgYmUgc3luY2hyb25vdXMuIEFueSB2YWxpZGF0aW9uIHNob3VsZCBiZSBkb25lXG4gICAgKiB3aGVuIHZhbGlkYXRlKCkgaXMgY2FsbGVkLlxuICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAqL1xuICAgc2V0KHZhbHVlOiBJVmFsdWUpOiBJVmFsdWVcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcbiAgIHJlYWRvbmx5IHR5cGU6IElUeXBlO1xuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBJVHlwZSkge1xuICAgICAgdGhpcy50eXBlID0gdHlwZVxuICAgfVxuXG4gICBjbG9uZSgpOiBJVmFsdWUge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjbG9uZSgpIG5vdCBpbXBsZW1lbnRlZGApXG4gICB9XG5cbiAgIGVxdWFscyhvdGhlcjogSVZhbHVlKTogYm9vbGVhbiB7XG4gICAgICBpZighdGhpcy50eXBlLmVxdWFscyhvdGhlci50eXBlKSkge1xuICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlXG4gICB9XG5cbiAgIHNldCh2YWx1ZTogSVZhbHVlKTogSVZhbHVlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNldCgpIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNpY1ZhbHVlPFQ+IGV4dGVuZHMgVmFsdWUge1xuICAgZ2V0IHZhbHVlKCk6IFQge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlXG4gICB9XG5cbiAgIHByaXZhdGUgX3ZhbHVlOiBUXG5cbiAgIGNvbnN0cnVjdG9yKHR5cGU6IElUeXBlLCB2YWx1ZTogVCkge1xuICAgICAgc3VwZXIodHlwZSlcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcbiAgIH1cblxuICAgY2xvbmUoKTogSVZhbHVlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2xvbmUoKSBub3QgaW1wbGVtZW50ZWRgKVxuICAgfVxuXG4gICBzZXQodmFsdWU6IElWYWx1ZSk6IElWYWx1ZSB7XG4gICAgICBpZighdGhpcy50eXBlLmVxdWFscyh2YWx1ZS50eXBlKSkge1xuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmNvbXBhdGlibGUgdHlwZSBlbmNvdW50ZXJlZCB3aGVuIHRyeWluZyB0byBzZXQgYSBWYWx1ZWApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3ZhbHVlID0gKHZhbHVlIGFzIEJhc2ljVmFsdWU8VD4pLnZhbHVlXG4gICAgICByZXR1cm4gdGhpc1xuICAgfVxufSJdfQ==