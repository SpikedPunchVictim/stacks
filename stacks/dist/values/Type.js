"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicType = exports.Type = exports.ValidationReport = exports.TypeSet = void 0;
const Objects_1 = require("../utils/Objects");
var TypeSet;
(function (TypeSet) {
    TypeSet["Bool"] = "bool";
    TypeSet["Int"] = "int";
    TypeSet["List"] = "list";
    TypeSet["ObjectRef"] = "object-reference";
    TypeSet["String"] = "string";
    TypeSet["UInt"] = "uint";
})(TypeSet || (exports.TypeSet = TypeSet = {}));
/**
 * Tracks multiple errors in a Validation call
 */
class ValidationReport {
    get success() {
        return this.results.every(it => it.success == true);
    }
    constructor() {
        this.results = new Array();
    }
    addError(error) {
        this.results.push({
            success: false,
            error
        });
    }
}
exports.ValidationReport = ValidationReport;
class Type {
    get info() {
        throw new Error("Property not supported");
    }
    constructor(type) {
        this.type = type;
    }
    static isType(obj) {
        return (obj.equals != null) &&
            (obj.validate != null) &&
            (obj.type != null && (0, Objects_1.isEnum)(TypeSet, obj.type));
    }
    equals(other) {
        throw new Error("Method not implemented.");
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.Type = Type;
class BasicType {
    get info() {
        return {
            type: this.type
        };
    }
    constructor(type) {
        this.type = type;
    }
    equals(other) {
        return other.type == this.type;
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.BasicType = BasicType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWx1ZXMvVHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBeUM7QUFFekMsSUFBWSxPQU9YO0FBUEQsV0FBWSxPQUFPO0lBQ2hCLHdCQUFhLENBQUE7SUFDYixzQkFBVyxDQUFBO0lBQ1gsd0JBQWEsQ0FBQTtJQUNiLHlDQUE4QixDQUFBO0lBQzlCLDRCQUFnQixDQUFBO0lBQ2hCLHdCQUFhLENBQUE7QUFDaEIsQ0FBQyxFQVBXLE9BQU8sdUJBQVAsT0FBTyxRQU9sQjtBQUVEOztHQUVHO0FBQ0gsTUFBYSxnQkFBZ0I7SUFHMUIsSUFBSSxPQUFPO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLENBQUE7SUFDdEQsQ0FBQztJQUVEO1FBTlMsWUFBTyxHQUFxQixJQUFJLEtBQUssRUFBa0IsQ0FBQTtJQVFoRSxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQVk7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDZixPQUFPLEVBQUUsS0FBSztZQUNkLEtBQUs7U0FDUCxDQUFDLENBQUE7SUFDTCxDQUFDO0NBQ0g7QUFqQkQsNENBaUJDO0FBNkNELE1BQXNCLElBQUk7SUFHdkIsSUFBSSxJQUFJO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFFRCxZQUFZLElBQWE7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBVTtRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7WUFDeEIsQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztZQUN0QixDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUEsZ0JBQU0sRUFBVSxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFDOUQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFZO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRUQsUUFBUSxDQUFJLEdBQU07UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDaEQsQ0FBQztDQUNIO0FBeEJELG9CQXdCQztBQUVELE1BQXNCLFNBQVM7SUFHNUIsSUFBSSxJQUFJO1FBQ0wsT0FBTztZQUNKLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNqQixDQUFBO0lBQ0osQ0FBQztJQUVELFlBQVksSUFBYTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVk7UUFDaEIsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDakMsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFNO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQ2hELENBQUM7Q0FDSDtBQXBCRCw4QkFvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0VudW0gfSBmcm9tIFwiLi4vdXRpbHMvT2JqZWN0c1wiXG5cbmV4cG9ydCBlbnVtIFR5cGVTZXQge1xuICAgQm9vbCA9ICdib29sJyxcbiAgIEludCA9ICdpbnQnLFxuICAgTGlzdCA9ICdsaXN0JyxcbiAgIE9iamVjdFJlZiA9ICdvYmplY3QtcmVmZXJlbmNlJyxcbiAgIFN0cmluZyA9J3N0cmluZycsXG4gICBVSW50ID0gJ3VpbnQnXG59XG5cbi8qKlxuICogVHJhY2tzIG11bHRpcGxlIGVycm9ycyBpbiBhIFZhbGlkYXRpb24gY2FsbFxuICovXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvblJlcG9ydCB7XG4gICByZWFkb25seSByZXN1bHRzOiBWYWxpZGF0ZVJlc3VsdFtdID0gbmV3IEFycmF5PFZhbGlkYXRlUmVzdWx0PigpXG5cbiAgIGdldCBzdWNjZXNzKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cy5ldmVyeShpdCA9PiBpdC5zdWNjZXNzID09IHRydWUpXG4gICB9XG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICB9XG5cbiAgIGFkZEVycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xuICAgICAgdGhpcy5yZXN1bHRzLnB1c2goe1xuICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICBlcnJvclxuICAgICAgfSlcbiAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVmFsaWRhdGVSZXN1bHQgPSB7XG4gICBzdWNjZXNzOiBib29sZWFuXG4gICBlcnJvcj86IEVycm9yXG59XG5cbmV4cG9ydCB0eXBlIFR5cGVJbmZvID0ge1xuICAgdHlwZTogVHlwZVNldCxcbiAgIC8qKlxuICAgICogVGhpcyBpcyBzZXQgd2hlbiB0aGUgVHlwZSBpcyBhIExpc3RcbiAgICAqL1xuICAgaXRlbVR5cGU/OiBUeXBlSW5mb1xuICAgLyoqXG4gICAgKiBUaGlzIGlzIHNldCB3aGVuIHRoZSBUeXBlIGlzIGFuIE9iamVjdFJlZlxuICAgICovXG4gICBtb2RlbE5hbWU/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVHlwZSB7XG4gICByZWFkb25seSB0eXBlOiBUeXBlU2V0XG5cbiAgIHJlYWRvbmx5IGluZm86IFR5cGVJbmZvXG5cbiAgIC8qKlxuICAgICogRGV0ZXJtaW5lcyBpZiBhbm90aGVyIFR5cGUgaXMgZXF1YWxcbiAgICAqIFxuICAgICogQHBhcmFtIG90aGVyIFRoZSB2YWx1ZSB0byB0ZXN0XG4gICAgKi9cbiAgIGVxdWFscyhvdGhlcjogSVR5cGUpOiBib29sZWFuXG5cbiAgIC8qKlxuICAgICogVmFsaWRhdGVzIHRoYXQgYSBQcm94eU9iamVjdCdzIHZhbHVlIG1hdGNoZXMgdGhlIFR5cGUuIFxuICAgICogXG4gICAgKiBOb3RlOiBWYWxpZGF0aW9uIGlzIG5vdCBwZXJmb3JtZWQgd2hlbiBzZXR0aW5nXG4gICAgKiB0aGUgVmFsdWUgc2luY2Ugd2Ugd2FudCB0aGF0IHRvIHJlbWFpbiBzeW5jaHJvbm91cy5cbiAgICAqIFdlIHRydXN0IHRoZSBkZXZlbG9wZXIgdG8gcHV0IHRoZSBjb3JyZWN0IHNhZmVndWFyZHNcbiAgICAqIGluIHBsYWNlIGluIG9yZGVyIGZvciB1cyB0byBtYWtlIHRoZSBBUEkgZWFzeSB0b1xuICAgICogd29yayB3aXRoLiBJdCBhbGxvd3MgdXMgdG8gdXNlIFByb3hpZXMuXG4gICAgKiBcbiAgICAqIEBwYXJhbSBvYmogVGhlIEpTIG9iamVjdCB0byB2YWxpZGF0ZVxuICAgICovXG4gICB2YWxpZGF0ZTxUPihvYmo6IFQpOiBQcm9taXNlPFZhbGlkYXRlUmVzdWx0PlxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVHlwZSBpbXBsZW1lbnRzIElUeXBlIHtcbiAgIHJlYWRvbmx5IHR5cGU6IFR5cGVTZXRcblxuICAgZ2V0IGluZm8oKTogVHlwZUluZm8ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkgbm90IHN1cHBvcnRlZFwiKVxuICAgfVxuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBUeXBlU2V0KSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICB9XG5cbiAgIHN0YXRpYyBpc1R5cGUob2JqOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChvYmouZXF1YWxzICE9IG51bGwpICYmIFxuICAgICAgICAgKG9iai52YWxpZGF0ZSAhPSBudWxsKSAmJlxuICAgICAgICAgKG9iai50eXBlICE9IG51bGwgJiYgaXNFbnVtPFR5cGVTZXQ+KFR5cGVTZXQsIG9iai50eXBlKSlcbiAgIH1cblxuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgIH1cblxuICAgdmFsaWRhdGU8VD4ob2JqOiBUKTogUHJvbWlzZTxWYWxpZGF0ZVJlc3VsdD4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWxpZGF0ZSgpIG5vdCBpbXBsZW1lbnRlZGApXG4gICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNpY1R5cGU8VD4gaW1wbGVtZW50cyBJVHlwZSB7XG4gICByZWFkb25seSB0eXBlOiBUeXBlU2V0XG5cbiAgIGdldCBpbmZvKCk6IFR5cGVJbmZvIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICB0eXBlOiB0aGlzLnR5cGVcbiAgICAgIH1cbiAgIH1cblxuICAgY29uc3RydWN0b3IodHlwZTogVHlwZVNldCkge1xuICAgICAgdGhpcy50eXBlID0gdHlwZVxuICAgfVxuXG4gICBlcXVhbHMob3RoZXI6IElUeXBlKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gb3RoZXIudHlwZSA9PSB0aGlzLnR5cGVcbiAgIH1cblxuICAgdmFsaWRhdGU8VD4ob2JqOiBUKTogUHJvbWlzZTxWYWxpZGF0ZVJlc3VsdD4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWxpZGF0ZSgpIG5vdCBpbXBsZW1lbnRlZGApXG4gICB9XG59Il19