"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const Cache_1 = require("../Cache");
const EventRouter_1 = require("../events/EventRouter");
const RequestForChange_1 = require("../events/RequestForChange");
const ValueSerializer_1 = require("../serialize/ValueSerializer");
const UidKeeper_1 = require("../UidKeeper");
const Eventing_1 = require("../utils/Eventing");
const Bool_1 = require("../values/Bool");
const Int_1 = require("../values/Int");
const List_1 = require("../values/List");
const ObjectRef_1 = require("../values/ObjectRef");
const String_1 = require("../values/String");
const Type_1 = require("../values/Type");
const UInt_1 = require("../values/UInt");
const StackContext_1 = require("./StackContext");
const StackCreate_1 = require("./StackCreate");
const StackDelete_1 = require("./StackDelete");
const StackGet_1 = require("./StackGet");
const StackUpdate_1 = require("./StackUpdate");
class Stack extends Eventing_1.CombinedEventEmitter {
    constructor(options) {
        super();
        this.queryObject = undefined;
        this.uid = (options === null || options === void 0 ? void 0 : options.uidKeeper) || new UidKeeper_1.UidKeeper();
        this.cache = new Cache_1.Cache();
        this.router = new EventRouter_1.EventRouter();
        this.rfc = new RequestForChange_1.RequestForChangeSource(this.router);
        let serializer = new ValueSerializer_1.CompositeSerializer();
        this.serializer = serializer;
        this.context = new StackContext_1.StackContext(this, this.rfc, this.cache, this.uid, serializer);
        serializer.register(Type_1.TypeSet.Bool, new Bool_1.BoolSerializer());
        serializer.register(Type_1.TypeSet.Int, new Int_1.IntSerializer());
        serializer.register(Type_1.TypeSet.List, new List_1.ListSerializer(serializer));
        serializer.register(Type_1.TypeSet.ObjectRef, new ObjectRef_1.ObjectRefSerializer(this.context));
        serializer.register(Type_1.TypeSet.String, new String_1.StringSerializer());
        serializer.register(Type_1.TypeSet.UInt, new UInt_1.UIntSerializer());
        this.delete = new StackDelete_1.StackDelete(this.cache, this.context.orchestrator);
        this.get = new StackGet_1.StackGet(this.context);
        this.create = new StackCreate_1.StackCreate(this.get, this.context);
        this.update = new StackUpdate_1.StackUpdate(this.context);
    }
    static create(options) {
        return new Stack(options);
    }
    async bootstrap() {
        return this.context.orchestrator.boostrap();
    }
    getQueryObject() {
        return this.queryObject;
    }
    async hasId(id, model) {
        return this.context.orchestrator.hasId(id, model);
    }
    async setQueryObject(handler) {
        this.queryObject = await this.context.orchestrator.storeQueryObject(handler);
    }
    async use(plugin) {
        await plugin.setup(this, this.router);
    }
}
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;base64,