"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicType = exports.Type = exports.ValidationReport = exports.TypeSet = void 0;
var TypeSet;
(function (TypeSet) {
    TypeSet["Bool"] = "bool";
    TypeSet["Int"] = "int";
    TypeSet["List"] = "list";
    TypeSet["Object"] = "object";
    TypeSet["ObjectRef"] = "object-reference";
    TypeSet["String"] = "string";
    TypeSet["UInt"] = "uint";
})(TypeSet = exports.TypeSet || (exports.TypeSet = {}));
/**
 * Tracks multiple errors in a Validation call
 */
class ValidationReport {
    constructor() {
        this.results = new Array();
    }
    get success() {
        return this.results.every(it => it.success == true);
    }
    addError(error) {
        this.results.push({
            success: false,
            error
        });
    }
}
exports.ValidationReport = ValidationReport;
class Type {
    constructor(type) {
        this.type = type;
    }
    equals(other) {
        throw new Error("Method not implemented.");
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.Type = Type;
class BasicType {
    constructor(type) {
        this.type = type;
    }
    equals(other) {
        throw new Error(`equals() is not implemented`);
    }
    validate(obj) {
        throw new Error(`validate() not implemented`);
    }
}
exports.BasicType = BasicType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWx1ZXMvVHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxJQUFZLE9BUVg7QUFSRCxXQUFZLE9BQU87SUFDaEIsd0JBQWEsQ0FBQTtJQUNiLHNCQUFXLENBQUE7SUFDWCx3QkFBYSxDQUFBO0lBQ2IsNEJBQWlCLENBQUE7SUFDakIseUNBQThCLENBQUE7SUFDOUIsNEJBQWdCLENBQUE7SUFDaEIsd0JBQWEsQ0FBQTtBQUNoQixDQUFDLEVBUlcsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBUWxCO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGdCQUFnQjtJQU8xQjtRQU5TLFlBQU8sR0FBcUIsSUFBSSxLQUFLLEVBQWtCLENBQUE7SUFRaEUsQ0FBQztJQU5ELElBQUksT0FBTztRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFBO0lBQ3RELENBQUM7SUFNRCxRQUFRLENBQUMsS0FBWTtRQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNmLE9BQU8sRUFBRSxLQUFLO1lBQ2QsS0FBSztTQUNQLENBQUMsQ0FBQTtJQUNMLENBQUM7Q0FDSDtBQWpCRCw0Q0FpQkM7QUErQkQsTUFBc0IsSUFBSTtJQUd2QixZQUFZLElBQWE7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFZO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRUQsUUFBUSxDQUFJLEdBQU07UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDaEQsQ0FBQztDQUNIO0FBZEQsb0JBY0M7QUFFRCxNQUFzQixTQUFTO0lBRzVCLFlBQVksSUFBYTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVk7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFFRCxRQUFRLENBQUksR0FBTTtRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0NBQ0g7QUFkRCw4QkFjQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGVudW0gVHlwZVNldCB7XG4gICBCb29sID0gJ2Jvb2wnLFxuICAgSW50ID0gJ2ludCcsXG4gICBMaXN0ID0gJ2xpc3QnLFxuICAgT2JqZWN0ID0gJ29iamVjdCcsXG4gICBPYmplY3RSZWYgPSAnb2JqZWN0LXJlZmVyZW5jZScsXG4gICBTdHJpbmcgPSdzdHJpbmcnLFxuICAgVUludCA9ICd1aW50J1xufVxuXG4vKipcbiAqIFRyYWNrcyBtdWx0aXBsZSBlcnJvcnMgaW4gYSBWYWxpZGF0aW9uIGNhbGxcbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25SZXBvcnQge1xuICAgcmVhZG9ubHkgcmVzdWx0czogVmFsaWRhdGVSZXN1bHRbXSA9IG5ldyBBcnJheTxWYWxpZGF0ZVJlc3VsdD4oKVxuXG4gICBnZXQgc3VjY2VzcygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdHMuZXZlcnkoaXQgPT4gaXQuc3VjY2VzcyA9PSB0cnVlKVxuICAgfVxuXG4gICBjb25zdHJ1Y3RvcigpIHtcblxuICAgfVxuXG4gICBhZGRFcnJvcihlcnJvcjogRXJyb3IpOiB2b2lkIHtcbiAgICAgIHRoaXMucmVzdWx0cy5wdXNoKHtcbiAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgZXJyb3JcbiAgICAgIH0pXG4gICB9XG59XG5cbmV4cG9ydCB0eXBlIFZhbGlkYXRlUmVzdWx0ID0ge1xuICAgc3VjY2VzczogYm9vbGVhblxuICAgZXJyb3I/OiBFcnJvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUeXBlIHtcbiAgIHJlYWRvbmx5IHR5cGU6IFR5cGVTZXRcblxuICAgLyoqXG4gICAgKiBEZXRlcm1pbmVzIGlmIGFub3RoZXIgVHlwZSBpcyBlcXVhbFxuICAgICogXG4gICAgKiBAcGFyYW0gb3RoZXIgVGhlIHZhbHVlIHRvIHRlc3RcbiAgICAqL1xuICAgZXF1YWxzKG90aGVyOiBJVHlwZSk6IGJvb2xlYW5cblxuICAgLyoqXG4gICAgKiBWYWxpZGF0ZXMgYSBKUyBvYmplY3QgbWF0Y2hlcyB0aGUgVHlwZS4gXG4gICAgKiBcbiAgICAqIE5vdGU6IFZhbGlkYXRpb24gaXMgbm90IHBlcmZvcm1lZCB3aGVuIHNldHRpbmdcbiAgICAqIHRoZSBWYWx1ZSBzaW5jZSB3ZSB3YW50IHRoYXQgdG8gcmVtYWluIHN5bmNocm9ub3VzLlxuICAgICogV2UgdHJ1c3QgdGhlIGRldmVsb3BlciB0byBwdXQgdGhlIGNvcnJlY3Qgc2FmZWd1YXJkc1xuICAgICogaW4gcGxhY2UgaW4gb3JkZXIgZm9yIHVzIHRvIG1ha2UgdGhlIEFQSSBlYXN5IHRvXG4gICAgKiB3b3JrIHdpdGguIEl0IGFsbG93cyB1cyB0byB1c2UgUHJveGllcy5cbiAgICAqIFxuICAgICogQHBhcmFtIG9iaiBUaGUgSlMgb2JqZWN0IHRvIHZhbGlkYXRlXG4gICAgKi9cbiAgIHZhbGlkYXRlPFQ+KG9iajogVCk6IFByb21pc2U8VmFsaWRhdGVSZXN1bHQ+XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUeXBlIGltcGxlbWVudHMgSVR5cGUge1xuICAgcmVhZG9ubHkgdHlwZTogVHlwZVNldFxuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBUeXBlU2V0KSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICB9XG5cbiAgIGVxdWFscyhvdGhlcjogSVR5cGUpOiBib29sZWFuIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpXG4gICB9XG5cbiAgIHZhbGlkYXRlPFQ+KG9iajogVCk6IFByb21pc2U8VmFsaWRhdGVSZXN1bHQ+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmFsaWRhdGUoKSBub3QgaW1wbGVtZW50ZWRgKVxuICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzaWNUeXBlPFQ+IGltcGxlbWVudHMgSVR5cGUge1xuICAgcmVhZG9ubHkgdHlwZTogVHlwZVNldFxuXG4gICBjb25zdHJ1Y3Rvcih0eXBlOiBUeXBlU2V0KSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICB9XG5cbiAgIGVxdWFscyhvdGhlcjogSVR5cGUpOiBib29sZWFuIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZXF1YWxzKCkgaXMgbm90IGltcGxlbWVudGVkYClcbiAgIH1cblxuICAgdmFsaWRhdGU8VD4ob2JqOiBUKTogUHJvbWlzZTxWYWxpZGF0ZVJlc3VsdD4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWxpZGF0ZSgpIG5vdCBpbXBsZW1lbnRlZGApXG4gICB9XG59Il19